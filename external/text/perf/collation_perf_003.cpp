// Copyright (C) 2020 T. Zachary Laine
//
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// Warning! This file is autogenerated.
#include <boost/text/collate.hpp>
#include <boost/text/collation_table.hpp>

#include <benchmark/benchmark.h>

boost::text::detail::collation_trie_t const & trie()
{
    static auto const retval = boost::text::detail::make_default_trie();
    return retval;
}

boost::text::collation_table const & table()
{
    static auto const retval = boost::text::default_collation_table();
    return retval;
}

uint32_t cps_300[] = {
0x182aa, 0x182ab, 0x182ac, 0x182ad, 0x182ae, 0x182af, 0x182b0, 0x182b1, 0x182b2, 0x182b3, 0x182b4, 0x182b5, 0x182b6, 0x182b7, 0x182b8, 0x182b9, 0x182ba, 0x182bb, 0x182bc, 0x182bd, 0x182be, 0x182bf, 0x182c0, 0x182c1, 0x182c2, 0x182c3, 0x182c4, 0x182c5, 0x182c6, 0x182c7, 0x182c8, 0x182c9, 0x182ca, 0x182cb, 0x182cc, 0x182cd, 0x182ce, 0x182cf, 0x182d0, 0x182d1, 0x182d2, 0x182d3, 0x182d4, 0x182d5, 0x182d6, 0x182d7, 0x182d8, 0x182d9, 0x182da, 0x182db, 0x182dc, 0x182dd, 0x182de, 0x182df, 0x182e0, 0x182e1, 0x182e2, 0x182e3, 0x182e4, 0x182e5, 0x182e6, 0x182e7, 0x182e8, 0x182e9, 0x182ea, 0x182eb, 0x182ec, 0x182ed, 0x182ee, 0x182ef, 0x182f0, 0x182f1, 0x182f2, 0x182f3, 0x182f4, 0x182f5, 0x182f6, 0x182f7, 0x182f8, 0x182f9, 0x182fa, 0x182fb, 0x182fc, 0x182fd, 0x182fe, 0x182ff, 0x18300, 0x18301, 0x18302, 0x18303, 0x18304, 0x18305, 0x18306, 0x18307, 0x18308, 0x18309, 0x1830a, 0x1830b, 0x1830c, 0x1830d
};

void BM_collation_300(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_300, cps_300 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_300);

uint32_t cps_301[] = {
0x1830e, 0x1830f, 0x18310, 0x18311, 0x18312, 0x18313, 0x18314, 0x18315, 0x18316, 0x18317, 0x18318, 0x18319, 0x1831a, 0x1831b, 0x1831c, 0x1831d, 0x1831e, 0x1831f, 0x18320, 0x18321, 0x18322, 0x18323, 0x18324, 0x18325, 0x18326, 0x18327, 0x18328, 0x18329, 0x1832a, 0x1832b, 0x1832c, 0x1832d, 0x1832e, 0x1832f, 0x18330, 0x18331, 0x18332, 0x18333, 0x18334, 0x18335, 0x18336, 0x18337, 0x18338, 0x18339, 0x1833a, 0x1833b, 0x1833c, 0x1833d, 0x1833e, 0x1833f, 0x18340, 0x18341, 0x18342, 0x18343, 0x18344, 0x18345, 0x18346, 0x18347, 0x18348, 0x18349, 0x1834a, 0x1834b, 0x1834c, 0x1834d, 0x1834e, 0x1834f, 0x18350, 0x18351, 0x18352, 0x18353, 0x18354, 0x18355, 0x18356, 0x18357, 0x18358, 0x18359, 0x1835a, 0x1835b, 0x1835c, 0x1835d, 0x1835e, 0x1835f, 0x18360, 0x18361, 0x18362, 0x18363, 0x18364, 0x18365, 0x18366, 0x18367, 0x18368, 0x18369, 0x1836a, 0x1836b, 0x1836c, 0x1836d, 0x1836e, 0x1836f, 0x18370, 0x18371
};

void BM_collation_301(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_301, cps_301 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_301);

uint32_t cps_302[] = {
0x18372, 0x18373, 0x18374, 0x18375, 0x18376, 0x18377, 0x18378, 0x18379, 0x1837a, 0x1837b, 0x1837c, 0x1837d, 0x1837e, 0x1837f, 0x18380, 0x18381, 0x18382, 0x18383, 0x18384, 0x18385, 0x18386, 0x18387, 0x18388, 0x18389, 0x1838a, 0x1838b, 0x1838c, 0x1838d, 0x1838e, 0x1838f, 0x18390, 0x18391, 0x18392, 0x18393, 0x18394, 0x18395, 0x18396, 0x18397, 0x18398, 0x18399, 0x1839a, 0x1839b, 0x1839c, 0x1839d, 0x1839e, 0x1839f, 0x183a0, 0x183a1, 0x183a2, 0x183a3, 0x183a4, 0x183a5, 0x183a6, 0x183a7, 0x183a8, 0x183a9, 0x183aa, 0x183ab, 0x183ac, 0x183ad, 0x183ae, 0x183af, 0x183b0, 0x183b1, 0x183b2, 0x183b3, 0x183b4, 0x183b5, 0x183b6, 0x183b7, 0x183b8, 0x183b9, 0x183ba, 0x183bb, 0x183bc, 0x183bd, 0x183be, 0x183bf, 0x183c0, 0x183c1, 0x183c2, 0x183c3, 0x183c4, 0x183c5, 0x183c6, 0x183c7, 0x183c8, 0x183c9, 0x183ca, 0x183cb, 0x183cc, 0x183cd, 0x183ce, 0x183cf, 0x183d0, 0x183d1, 0x183d2, 0x183d3, 0x183d4, 0x183d5
};

void BM_collation_302(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_302, cps_302 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_302);

uint32_t cps_303[] = {
0x183d6, 0x183d7, 0x183d8, 0x183d9, 0x183da, 0x183db, 0x183dc, 0x183dd, 0x183de, 0x183df, 0x183e0, 0x183e1, 0x183e2, 0x183e3, 0x183e4, 0x183e5, 0x183e6, 0x183e7, 0x183e8, 0x183e9, 0x183ea, 0x183eb, 0x183ec, 0x183ed, 0x183ee, 0x183ef, 0x183f0, 0x183f1, 0x183f2, 0x183f3, 0x183f4, 0x183f5, 0x183f6, 0x183f7, 0x183f8, 0x183f9, 0x183fa, 0x183fb, 0x183fc, 0x183fd, 0x183fe, 0x183ff, 0x18400, 0x18401, 0x18402, 0x18403, 0x18404, 0x18405, 0x18406, 0x18407, 0x18408, 0x18409, 0x1840a, 0x1840b, 0x1840c, 0x1840d, 0x1840e, 0x1840f, 0x18410, 0x18411, 0x18412, 0x18413, 0x18414, 0x18415, 0x18416, 0x18417, 0x18418, 0x18419, 0x1841a, 0x1841b, 0x1841c, 0x1841d, 0x1841e, 0x1841f, 0x18420, 0x18421, 0x18422, 0x18423, 0x18424, 0x18425, 0x18426, 0x18427, 0x18428, 0x18429, 0x1842a, 0x1842b, 0x1842c, 0x1842d, 0x1842e, 0x1842f, 0x18430, 0x18431, 0x18432, 0x18433, 0x18434, 0x18435, 0x18436, 0x18437, 0x18438, 0x18439
};

void BM_collation_303(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_303, cps_303 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_303);

uint32_t cps_304[] = {
0x1843a, 0x1843b, 0x1843c, 0x1843d, 0x1843e, 0x1843f, 0x18440, 0x18441, 0x18442, 0x18443, 0x18444, 0x18445, 0x18446, 0x18447, 0x18448, 0x18449, 0x1844a, 0x1844b, 0x1844c, 0x1844d, 0x1844e, 0x1844f, 0x18450, 0x18451, 0x18452, 0x18453, 0x18454, 0x18455, 0x18456, 0x18457, 0x18458, 0x18459, 0x1845a, 0x1845b, 0x1845c, 0x1845d, 0x1845e, 0x1845f, 0x18460, 0x18461, 0x18462, 0x18463, 0x18464, 0x18465, 0x18466, 0x18467, 0x18468, 0x18469, 0x1846a, 0x1846b, 0x1846c, 0x1846d, 0x1846e, 0x1846f, 0x18470, 0x18471, 0x18472, 0x18473, 0x18474, 0x18475, 0x18476, 0x18477, 0x18478, 0x18479, 0x1847a, 0x1847b, 0x1847c, 0x1847d, 0x1847e, 0x1847f, 0x18480, 0x18481, 0x18482, 0x18483, 0x18484, 0x18485, 0x18486, 0x18487, 0x18488, 0x18489, 0x1848a, 0x1848b, 0x1848c, 0x1848d, 0x1848e, 0x1848f, 0x18490, 0x18491, 0x18492, 0x18493, 0x18494, 0x18495, 0x18496, 0x18497, 0x18498, 0x18499, 0x1849a, 0x1849b, 0x1849c, 0x1849d
};

void BM_collation_304(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_304, cps_304 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_304);

uint32_t cps_305[] = {
0x1849e, 0x1849f, 0x184a0, 0x184a1, 0x184a2, 0x184a3, 0x184a4, 0x184a5, 0x184a6, 0x184a7, 0x184a8, 0x184a9, 0x184aa, 0x184ab, 0x184ac, 0x184ad, 0x184ae, 0x184af, 0x184b0, 0x184b1, 0x184b2, 0x184b3, 0x184b4, 0x184b5, 0x184b6, 0x184b7, 0x184b8, 0x184b9, 0x184ba, 0x184bb, 0x184bc, 0x184bd, 0x184be, 0x184bf, 0x184c0, 0x184c1, 0x184c2, 0x184c3, 0x184c4, 0x184c5, 0x184c6, 0x184c7, 0x184c8, 0x184c9, 0x184ca, 0x184cb, 0x184cc, 0x184cd, 0x184ce, 0x184cf, 0x184d0, 0x184d1, 0x184d2, 0x184d3, 0x184d4, 0x184d5, 0x184d6, 0x184d7, 0x184d8, 0x184d9, 0x184da, 0x184db, 0x184dc, 0x184dd, 0x184de, 0x184df, 0x184e0, 0x184e1, 0x184e2, 0x184e3, 0x184e4, 0x184e5, 0x184e6, 0x184e7, 0x184e8, 0x184e9, 0x184ea, 0x184eb, 0x184ec, 0x184ed, 0x184ee, 0x184ef, 0x184f0, 0x184f1, 0x184f2, 0x184f3, 0x184f4, 0x184f5, 0x184f6, 0x184f7, 0x184f8, 0x184f9, 0x184fa, 0x184fb, 0x184fc, 0x184fd, 0x184fe, 0x184ff, 0x18500, 0x18501
};

void BM_collation_305(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_305, cps_305 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_305);

uint32_t cps_306[] = {
0x18502, 0x18503, 0x18504, 0x18505, 0x18506, 0x18507, 0x18508, 0x18509, 0x1850a, 0x1850b, 0x1850c, 0x1850d, 0x1850e, 0x1850f, 0x18510, 0x18511, 0x18512, 0x18513, 0x18514, 0x18515, 0x18516, 0x18517, 0x18518, 0x18519, 0x1851a, 0x1851b, 0x1851c, 0x1851d, 0x1851e, 0x1851f, 0x18520, 0x18521, 0x18522, 0x18523, 0x18524, 0x18525, 0x18526, 0x18527, 0x18528, 0x18529, 0x1852a, 0x1852b, 0x1852c, 0x1852d, 0x1852e, 0x1852f, 0x18530, 0x18531, 0x18532, 0x18533, 0x18534, 0x18535, 0x18536, 0x18537, 0x18538, 0x18539, 0x1853a, 0x1853b, 0x1853c, 0x1853d, 0x1853e, 0x1853f, 0x18540, 0x18541, 0x18542, 0x18543, 0x18544, 0x18545, 0x18546, 0x18547, 0x18548, 0x18549, 0x1854a, 0x1854b, 0x1854c, 0x1854d, 0x1854e, 0x1854f, 0x18550, 0x18551, 0x18552, 0x18553, 0x18554, 0x18555, 0x18556, 0x18557, 0x18558, 0x18559, 0x1855a, 0x1855b, 0x1855c, 0x1855d, 0x1855e, 0x1855f, 0x18560, 0x18561, 0x18562, 0x18563, 0x18564, 0x18565
};

void BM_collation_306(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_306, cps_306 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_306);

uint32_t cps_307[] = {
0x18566, 0x18567, 0x18568, 0x18569, 0x1856a, 0x1856b, 0x1856c, 0x1856d, 0x1856e, 0x1856f, 0x18570, 0x18571, 0x18572, 0x18573, 0x18574, 0x18575, 0x18576, 0x18577, 0x18578, 0x18579, 0x1857a, 0x1857b, 0x1857c, 0x1857d, 0x1857e, 0x1857f, 0x18580, 0x18581, 0x18582, 0x18583, 0x18584, 0x18585, 0x18586, 0x18587, 0x18588, 0x18589, 0x1858a, 0x1858b, 0x1858c, 0x1858d, 0x1858e, 0x1858f, 0x18590, 0x18591, 0x18592, 0x18593, 0x18594, 0x18595, 0x18596, 0x18597, 0x18598, 0x18599, 0x1859a, 0x1859b, 0x1859c, 0x1859d, 0x1859e, 0x1859f, 0x185a0, 0x185a1, 0x185a2, 0x185a3, 0x185a4, 0x185a5, 0x185a6, 0x185a7, 0x185a8, 0x185a9, 0x185aa, 0x185ab, 0x185ac, 0x185ad, 0x185ae, 0x185af, 0x185b0, 0x185b1, 0x185b2, 0x185b3, 0x185b4, 0x185b5, 0x185b6, 0x185b7, 0x185b8, 0x185b9, 0x185ba, 0x185bb, 0x185bc, 0x185bd, 0x185be, 0x185bf, 0x185c0, 0x185c1, 0x185c2, 0x185c3, 0x185c4, 0x185c5, 0x185c6, 0x185c7, 0x185c8, 0x185c9
};

void BM_collation_307(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_307, cps_307 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_307);

uint32_t cps_308[] = {
0x185ca, 0x185cb, 0x185cc, 0x185cd, 0x185ce, 0x185cf, 0x185d0, 0x185d1, 0x185d2, 0x185d3, 0x185d4, 0x185d5, 0x185d6, 0x185d7, 0x185d8, 0x185d9, 0x185da, 0x185db, 0x185dc, 0x185dd, 0x185de, 0x185df, 0x185e0, 0x185e1, 0x185e2, 0x185e3, 0x185e4, 0x185e5, 0x185e6, 0x185e7, 0x185e8, 0x185e9, 0x185ea, 0x185eb, 0x185ec, 0x185ed, 0x185ee, 0x185ef, 0x185f0, 0x185f1, 0x185f2, 0x185f3, 0x185f4, 0x185f5, 0x185f6, 0x185f7, 0x185f8, 0x185f9, 0x185fa, 0x185fb, 0x185fc, 0x185fd, 0x185fe, 0x185ff, 0x18600, 0x18601, 0x18602, 0x18603, 0x18604, 0x18605, 0x18606, 0x18607, 0x18608, 0x18609, 0x1860a, 0x1860b, 0x1860c, 0x1860d, 0x1860e, 0x1860f, 0x18610, 0x18611, 0x18612, 0x18613, 0x18614, 0x18615, 0x18616, 0x18617, 0x18618, 0x18619, 0x1861a, 0x1861b, 0x1861c, 0x1861d, 0x1861e, 0x1861f, 0x18620, 0x18621, 0x18622, 0x18623, 0x18624, 0x18625, 0x18626, 0x18627, 0x18628, 0x18629, 0x1862a, 0x1862b, 0x1862c, 0x1862d
};

void BM_collation_308(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_308, cps_308 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_308);

uint32_t cps_309[] = {
0x1862e, 0x1862f, 0x18630, 0x18631, 0x18632, 0x18633, 0x18634, 0x18635, 0x18636, 0x18637, 0x18638, 0x18639, 0x1863a, 0x1863b, 0x1863c, 0x1863d, 0x1863e, 0x1863f, 0x18640, 0x18641, 0x18642, 0x18643, 0x18644, 0x18645, 0x18646, 0x18647, 0x18648, 0x18649, 0x1864a, 0x1864b, 0x1864c, 0x1864d, 0x1864e, 0x1864f, 0x18650, 0x18651, 0x18652, 0x18653, 0x18654, 0x18655, 0x18656, 0x18657, 0x18658, 0x18659, 0x1865a, 0x1865b, 0x1865c, 0x1865d, 0x1865e, 0x1865f, 0x18660, 0x18661, 0x18662, 0x18663, 0x18664, 0x18665, 0x18666, 0x18667, 0x18668, 0x18669, 0x1866a, 0x1866b, 0x1866c, 0x1866d, 0x1866e, 0x1866f, 0x18670, 0x18671, 0x18672, 0x18673, 0x18674, 0x18675, 0x18676, 0x18677, 0x18678, 0x18679, 0x1867a, 0x1867b, 0x1867c, 0x1867d, 0x1867e, 0x1867f, 0x18680, 0x18681, 0x18682, 0x18683, 0x18684, 0x18685, 0x18686, 0x18687, 0x18688, 0x18689, 0x1868a, 0x1868b, 0x1868c, 0x1868d, 0x1868e, 0x1868f, 0x18690, 0x18691
};

void BM_collation_309(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_309, cps_309 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_309);

uint32_t cps_310[] = {
0x18692, 0x18693, 0x18694, 0x18695, 0x18696, 0x18697, 0x18698, 0x18699, 0x1869a, 0x1869b, 0x1869c, 0x1869d, 0x1869e, 0x1869f, 0x186a0, 0x186a1, 0x186a2, 0x186a3, 0x186a4, 0x186a5, 0x186a6, 0x186a7, 0x186a8, 0x186a9, 0x186aa, 0x186ab, 0x186ac, 0x186ad, 0x186ae, 0x186af, 0x186b0, 0x186b1, 0x186b2, 0x186b3, 0x186b4, 0x186b5, 0x186b6, 0x186b7, 0x186b8, 0x186b9, 0x186ba, 0x186bb, 0x186bc, 0x186bd, 0x186be, 0x186bf, 0x186c0, 0x186c1, 0x186c2, 0x186c3, 0x186c4, 0x186c5, 0x186c6, 0x186c7, 0x186c8, 0x186c9, 0x186ca, 0x186cb, 0x186cc, 0x186cd, 0x186ce, 0x186cf, 0x186d0, 0x186d1, 0x186d2, 0x186d3, 0x186d4, 0x186d5, 0x186d6, 0x186d7, 0x186d8, 0x186d9, 0x186da, 0x186db, 0x186dc, 0x186dd, 0x186de, 0x186df, 0x186e0, 0x186e1, 0x186e2, 0x186e3, 0x186e4, 0x186e5, 0x186e6, 0x186e7, 0x186e8, 0x186e9, 0x186ea, 0x186eb, 0x186ec, 0x186ed, 0x186ee, 0x186ef, 0x186f0, 0x186f1, 0x186f2, 0x186f3, 0x186f4, 0x186f5
};

void BM_collation_310(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_310, cps_310 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_310);

uint32_t cps_311[] = {
0x186f6, 0x186f7, 0x186f8, 0x186f9, 0x186fa, 0x186fb, 0x186fc, 0x186fd, 0x186fe, 0x186ff, 0x18700, 0x18701, 0x18702, 0x18703, 0x18704, 0x18705, 0x18706, 0x18707, 0x18708, 0x18709, 0x1870a, 0x1870b, 0x1870c, 0x1870d, 0x1870e, 0x1870f, 0x18710, 0x18711, 0x18712, 0x18713, 0x18714, 0x18715, 0x18716, 0x18717, 0x18718, 0x18719, 0x1871a, 0x1871b, 0x1871c, 0x1871d, 0x1871e, 0x1871f, 0x18720, 0x18721, 0x18722, 0x18723, 0x18724, 0x18725, 0x18726, 0x18727, 0x18728, 0x18729, 0x1872a, 0x1872b, 0x1872c, 0x1872d, 0x1872e, 0x1872f, 0x18730, 0x18731, 0x18732, 0x18733, 0x18734, 0x18735, 0x18736, 0x18737, 0x18738, 0x18739, 0x1873a, 0x1873b, 0x1873c, 0x1873d, 0x1873e, 0x1873f, 0x18740, 0x18741, 0x18742, 0x18743, 0x18744, 0x18745, 0x18746, 0x18747, 0x18748, 0x18749, 0x1874a, 0x1874b, 0x1874c, 0x1874d, 0x1874e, 0x1874f, 0x18750, 0x18751, 0x18752, 0x18753, 0x18754, 0x18755, 0x18756, 0x18757, 0x18758, 0x18759
};

void BM_collation_311(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_311, cps_311 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_311);

uint32_t cps_312[] = {
0x1875a, 0x1875b, 0x1875c, 0x1875d, 0x1875e, 0x1875f, 0x18760, 0x18761, 0x18762, 0x18763, 0x18764, 0x18765, 0x18766, 0x18767, 0x18768, 0x18769, 0x1876a, 0x1876b, 0x1876c, 0x1876d, 0x1876e, 0x1876f, 0x18770, 0x18771, 0x18772, 0x18773, 0x18774, 0x18775, 0x18776, 0x18777, 0x18778, 0x18779, 0x1877a, 0x1877b, 0x1877c, 0x1877d, 0x1877e, 0x1877f, 0x18780, 0x18781, 0x18782, 0x18783, 0x18784, 0x18785, 0x18786, 0x18787, 0x18788, 0x18789, 0x1878a, 0x1878b, 0x1878c, 0x1878d, 0x1878e, 0x1878f, 0x18790, 0x18791, 0x18792, 0x18793, 0x18794, 0x18795, 0x18796, 0x18797, 0x18798, 0x18799, 0x1879a, 0x1879b, 0x1879c, 0x1879d, 0x1879e, 0x1879f, 0x187a0, 0x187a1, 0x187a2, 0x187a3, 0x187a4, 0x187a5, 0x187a6, 0x187a7, 0x187a8, 0x187a9, 0x187aa, 0x187ab, 0x187ac, 0x187ad, 0x187ae, 0x187af, 0x187b0, 0x187b1, 0x187b2, 0x187b3, 0x187b4, 0x187b5, 0x187b6, 0x187b7, 0x187b8, 0x187b9, 0x187ba, 0x187bb, 0x187bc, 0x187bd
};

void BM_collation_312(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_312, cps_312 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_312);

uint32_t cps_313[] = {
0x187be, 0x187bf, 0x187c0, 0x187c1, 0x187c2, 0x187c3, 0x187c4, 0x187c5, 0x187c6, 0x187c7, 0x187c8, 0x187c9, 0x187ca, 0x187cb, 0x187cc, 0x187cd, 0x187ce, 0x187cf, 0x187d0, 0x187d1, 0x187d2, 0x187d3, 0x187d4, 0x187d5, 0x187d6, 0x187d7, 0x187d8, 0x187d9, 0x187da, 0x187db, 0x187dc, 0x187dd, 0x187de, 0x187df, 0x187e0, 0x187e1, 0x187e2, 0x187e3, 0x187e4, 0x187e5, 0x187e6, 0x187e7, 0x187e8, 0x187e9, 0x187ea, 0x187eb, 0x187ec, 0x18800, 0x18801, 0x18802, 0x18803, 0x18804, 0x18805, 0x18806, 0x18807, 0x18808, 0x18809, 0x1880a, 0x1880b, 0x1880c, 0x1880d, 0x1880e, 0x1880f, 0x18810, 0x18811, 0x18812, 0x18813, 0x18814, 0x18815, 0x18816, 0x18817, 0x18818, 0x18819, 0x1881a, 0x1881b, 0x1881c, 0x1881d, 0x1881e, 0x1881f, 0x18820, 0x18821, 0x18822, 0x18823, 0x18824, 0x18825, 0x18826, 0x18827, 0x18828, 0x18829, 0x1882a, 0x1882b, 0x1882c, 0x1882d, 0x1882e, 0x1882f, 0x18830, 0x18831, 0x18832, 0x18833, 0x18834
};

void BM_collation_313(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_313, cps_313 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_313);

uint32_t cps_314[] = {
0x18835, 0x18836, 0x18837, 0x18838, 0x18839, 0x1883a, 0x1883b, 0x1883c, 0x1883d, 0x1883e, 0x1883f, 0x18840, 0x18841, 0x18842, 0x18843, 0x18844, 0x18845, 0x18846, 0x18847, 0x18848, 0x18849, 0x1884a, 0x1884b, 0x1884c, 0x1884d, 0x1884e, 0x1884f, 0x18850, 0x18851, 0x18852, 0x18853, 0x18854, 0x18855, 0x18856, 0x18857, 0x18858, 0x18859, 0x1885a, 0x1885b, 0x1885c, 0x1885d, 0x1885e, 0x1885f, 0x18860, 0x18861, 0x18862, 0x18863, 0x18864, 0x18865, 0x18866, 0x18867, 0x18868, 0x18869, 0x1886a, 0x1886b, 0x1886c, 0x1886d, 0x1886e, 0x1886f, 0x18870, 0x18871, 0x18872, 0x18873, 0x18874, 0x18875, 0x18876, 0x18877, 0x18878, 0x18879, 0x1887a, 0x1887b, 0x1887c, 0x1887d, 0x1887e, 0x1887f, 0x18880, 0x18881, 0x18882, 0x18883, 0x18884, 0x18885, 0x18886, 0x18887, 0x18888, 0x18889, 0x1888a, 0x1888b, 0x1888c, 0x1888d, 0x1888e, 0x1888f, 0x18890, 0x18891, 0x18892, 0x18893, 0x18894, 0x18895, 0x18896, 0x18897, 0x18898
};

void BM_collation_314(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_314, cps_314 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_314);

uint32_t cps_315[] = {
0x18899, 0x1889a, 0x1889b, 0x1889c, 0x1889d, 0x1889e, 0x1889f, 0x188a0, 0x188a1, 0x188a2, 0x188a3, 0x188a4, 0x188a5, 0x188a6, 0x188a7, 0x188a8, 0x188a9, 0x188aa, 0x188ab, 0x188ac, 0x188ad, 0x188ae, 0x188af, 0x188b0, 0x188b1, 0x188b2, 0x188b3, 0x188b4, 0x188b5, 0x188b6, 0x188b7, 0x188b8, 0x188b9, 0x188ba, 0x188bb, 0x188bc, 0x188bd, 0x188be, 0x188bf, 0x188c0, 0x188c1, 0x188c2, 0x188c3, 0x188c4, 0x188c5, 0x188c6, 0x188c7, 0x188c8, 0x188c9, 0x188ca, 0x188cb, 0x188cc, 0x188cd, 0x188ce, 0x188cf, 0x188d0, 0x188d1, 0x188d2, 0x188d3, 0x188d4, 0x188d5, 0x188d6, 0x188d7, 0x188d8, 0x188d9, 0x188da, 0x188db, 0x188dc, 0x188dd, 0x188de, 0x188df, 0x188e0, 0x188e1, 0x188e2, 0x188e3, 0x188e4, 0x188e5, 0x188e6, 0x188e7, 0x188e8, 0x188e9, 0x188ea, 0x188eb, 0x188ec, 0x188ed, 0x188ee, 0x188ef, 0x188f0, 0x188f1, 0x188f2, 0x188f3, 0x188f4, 0x188f5, 0x188f6, 0x188f7, 0x188f8, 0x188f9, 0x188fa, 0x188fb, 0x188fc
};

void BM_collation_315(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_315, cps_315 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_315);

uint32_t cps_316[] = {
0x188fd, 0x188fe, 0x188ff, 0x18900, 0x18901, 0x18902, 0x18903, 0x18904, 0x18905, 0x18906, 0x18907, 0x18908, 0x18909, 0x1890a, 0x1890b, 0x1890c, 0x1890d, 0x1890e, 0x1890f, 0x18910, 0x18911, 0x18912, 0x18913, 0x18914, 0x18915, 0x18916, 0x18917, 0x18918, 0x18919, 0x1891a, 0x1891b, 0x1891c, 0x1891d, 0x1891e, 0x1891f, 0x18920, 0x18921, 0x18922, 0x18923, 0x18924, 0x18925, 0x18926, 0x18927, 0x18928, 0x18929, 0x1892a, 0x1892b, 0x1892c, 0x1892d, 0x1892e, 0x1892f, 0x18930, 0x18931, 0x18932, 0x18933, 0x18934, 0x18935, 0x18936, 0x18937, 0x18938, 0x18939, 0x1893a, 0x1893b, 0x1893c, 0x1893d, 0x1893e, 0x1893f, 0x18940, 0x18941, 0x18942, 0x18943, 0x18944, 0x18945, 0x18946, 0x18947, 0x18948, 0x18949, 0x1894a, 0x1894b, 0x1894c, 0x1894d, 0x1894e, 0x1894f, 0x18950, 0x18951, 0x18952, 0x18953, 0x18954, 0x18955, 0x18956, 0x18957, 0x18958, 0x18959, 0x1895a, 0x1895b, 0x1895c, 0x1895d, 0x1895e, 0x1895f, 0x18960
};

void BM_collation_316(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_316, cps_316 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_316);

uint32_t cps_317[] = {
0x18961, 0x18962, 0x18963, 0x18964, 0x18965, 0x18966, 0x18967, 0x18968, 0x18969, 0x1896a, 0x1896b, 0x1896c, 0x1896d, 0x1896e, 0x1896f, 0x18970, 0x18971, 0x18972, 0x18973, 0x18974, 0x18975, 0x18976, 0x18977, 0x18978, 0x18979, 0x1897a, 0x1897b, 0x1897c, 0x1897d, 0x1897e, 0x1897f, 0x18980, 0x18981, 0x18982, 0x18983, 0x18984, 0x18985, 0x18986, 0x18987, 0x18988, 0x18989, 0x1898a, 0x1898b, 0x1898c, 0x1898d, 0x1898e, 0x1898f, 0x18990, 0x18991, 0x18992, 0x18993, 0x18994, 0x18995, 0x18996, 0x18997, 0x18998, 0x18999, 0x1899a, 0x1899b, 0x1899c, 0x1899d, 0x1899e, 0x1899f, 0x189a0, 0x189a1, 0x189a2, 0x189a3, 0x189a4, 0x189a5, 0x189a6, 0x189a7, 0x189a8, 0x189a9, 0x189aa, 0x189ab, 0x189ac, 0x189ad, 0x189ae, 0x189af, 0x189b0, 0x189b1, 0x189b2, 0x189b3, 0x189b4, 0x189b5, 0x189b6, 0x189b7, 0x189b8, 0x189b9, 0x189ba, 0x189bb, 0x189bc, 0x189bd, 0x189be, 0x189bf, 0x189c0, 0x189c1, 0x189c2, 0x189c3, 0x189c4
};

void BM_collation_317(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_317, cps_317 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_317);

uint32_t cps_318[] = {
0x189c5, 0x189c6, 0x189c7, 0x189c8, 0x189c9, 0x189ca, 0x189cb, 0x189cc, 0x189cd, 0x189ce, 0x189cf, 0x189d0, 0x189d1, 0x189d2, 0x189d3, 0x189d4, 0x189d5, 0x189d6, 0x189d7, 0x189d8, 0x189d9, 0x189da, 0x189db, 0x189dc, 0x189dd, 0x189de, 0x189df, 0x189e0, 0x189e1, 0x189e2, 0x189e3, 0x189e4, 0x189e5, 0x189e6, 0x189e7, 0x189e8, 0x189e9, 0x189ea, 0x189eb, 0x189ec, 0x189ed, 0x189ee, 0x189ef, 0x189f0, 0x189f1, 0x189f2, 0x189f3, 0x189f4, 0x189f5, 0x189f6, 0x189f7, 0x189f8, 0x189f9, 0x189fa, 0x189fb, 0x189fc, 0x189fd, 0x189fe, 0x189ff, 0x18a00, 0x18a01, 0x18a02, 0x18a03, 0x18a04, 0x18a05, 0x18a06, 0x18a07, 0x18a08, 0x18a09, 0x18a0a, 0x18a0b, 0x18a0c, 0x18a0d, 0x18a0e, 0x18a0f, 0x18a10, 0x18a11, 0x18a12, 0x18a13, 0x18a14, 0x18a15, 0x18a16, 0x18a17, 0x18a18, 0x18a19, 0x18a1a, 0x18a1b, 0x18a1c, 0x18a1d, 0x18a1e, 0x18a1f, 0x18a20, 0x18a21, 0x18a22, 0x18a23, 0x18a24, 0x18a25, 0x18a26, 0x18a27, 0x18a28
};

void BM_collation_318(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_318, cps_318 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_318);

uint32_t cps_319[] = {
0x18a29, 0x18a2a, 0x18a2b, 0x18a2c, 0x18a2d, 0x18a2e, 0x18a2f, 0x18a30, 0x18a31, 0x18a32, 0x18a33, 0x18a34, 0x18a35, 0x18a36, 0x18a37, 0x18a38, 0x18a39, 0x18a3a, 0x18a3b, 0x18a3c, 0x18a3d, 0x18a3e, 0x18a3f, 0x18a40, 0x18a41, 0x18a42, 0x18a43, 0x18a44, 0x18a45, 0x18a46, 0x18a47, 0x18a48, 0x18a49, 0x18a4a, 0x18a4b, 0x18a4c, 0x18a4d, 0x18a4e, 0x18a4f, 0x18a50, 0x18a51, 0x18a52, 0x18a53, 0x18a54, 0x18a55, 0x18a56, 0x18a57, 0x18a58, 0x18a59, 0x18a5a, 0x18a5b, 0x18a5c, 0x18a5d, 0x18a5e, 0x18a5f, 0x18a60, 0x18a61, 0x18a62, 0x18a63, 0x18a64, 0x18a65, 0x18a66, 0x18a67, 0x18a68, 0x18a69, 0x18a6a, 0x18a6b, 0x18a6c, 0x18a6d, 0x18a6e, 0x18a6f, 0x18a70, 0x18a71, 0x18a72, 0x18a73, 0x18a74, 0x18a75, 0x18a76, 0x18a77, 0x18a78, 0x18a79, 0x18a7a, 0x18a7b, 0x18a7c, 0x18a7d, 0x18a7e, 0x18a7f, 0x18a80, 0x18a81, 0x18a82, 0x18a83, 0x18a84, 0x18a85, 0x18a86, 0x18a87, 0x18a88, 0x18a89, 0x18a8a, 0x18a8b, 0x18a8c
};

void BM_collation_319(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_319, cps_319 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_319);

uint32_t cps_320[] = {
0x18a8d, 0x18a8e, 0x18a8f, 0x18a90, 0x18a91, 0x18a92, 0x18a93, 0x18a94, 0x18a95, 0x18a96, 0x18a97, 0x18a98, 0x18a99, 0x18a9a, 0x18a9b, 0x18a9c, 0x18a9d, 0x18a9e, 0x18a9f, 0x18aa0, 0x18aa1, 0x18aa2, 0x18aa3, 0x18aa4, 0x18aa5, 0x18aa6, 0x18aa7, 0x18aa8, 0x18aa9, 0x18aaa, 0x18aab, 0x18aac, 0x18aad, 0x18aae, 0x18aaf, 0x18ab0, 0x18ab1, 0x18ab2, 0x18ab3, 0x18ab4, 0x18ab5, 0x18ab6, 0x18ab7, 0x18ab8, 0x18ab9, 0x18aba, 0x18abb, 0x18abc, 0x18abd, 0x18abe, 0x18abf, 0x18ac0, 0x18ac1, 0x18ac2, 0x18ac3, 0x18ac4, 0x18ac5, 0x18ac6, 0x18ac7, 0x18ac8, 0x18ac9, 0x18aca, 0x18acb, 0x18acc, 0x18acd, 0x18ace, 0x18acf, 0x18ad0, 0x18ad1, 0x18ad2, 0x18ad3, 0x18ad4, 0x18ad5, 0x18ad6, 0x18ad7, 0x18ad8, 0x18ad9, 0x18ada, 0x18adb, 0x18adc, 0x18add, 0x18ade, 0x18adf, 0x18ae0, 0x18ae1, 0x18ae2, 0x18ae3, 0x18ae4, 0x18ae5, 0x18ae6, 0x18ae7, 0x18ae8, 0x18ae9, 0x18aea, 0x18aeb, 0x18aec, 0x18aed, 0x18aee, 0x18aef, 0x18af0
};

void BM_collation_320(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_320, cps_320 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_320);

uint32_t cps_321[] = {
0x18af1, 0x18af2, 0x1b000, 0x1b001, 0x1b002, 0x1b003, 0x1b004, 0x1b005, 0x1b006, 0x1b007, 0x1b008, 0x1b009, 0x1b00a, 0x1b00b, 0x1b00c, 0x1b00d, 0x1b00e, 0x1b00f, 0x1b010, 0x1b011, 0x1b012, 0x1b013, 0x1b014, 0x1b015, 0x1b016, 0x1b017, 0x1b018, 0x1b019, 0x1b01a, 0x1b01b, 0x1b01c, 0x1b01d, 0x1b01e, 0x1b01f, 0x1b020, 0x1b021, 0x1b022, 0x1b023, 0x1b024, 0x1b025, 0x1b026, 0x1b027, 0x1b028, 0x1b029, 0x1b02a, 0x1b02b, 0x1b02c, 0x1b02d, 0x1b02e, 0x1b02f, 0x1b030, 0x1b031, 0x1b032, 0x1b033, 0x1b034, 0x1b035, 0x1b036, 0x1b037, 0x1b038, 0x1b039, 0x1b03a, 0x1b03b, 0x1b03c, 0x1b03d, 0x1b03e, 0x1b03f, 0x1b040, 0x1b041, 0x1b042, 0x1b043, 0x1b044, 0x1b045, 0x1b046, 0x1b047, 0x1b048, 0x1b049, 0x1b04a, 0x1b04b, 0x1b04c, 0x1b04d, 0x1b04e, 0x1b04f, 0x1b050, 0x1b051, 0x1b052, 0x1b053, 0x1b054, 0x1b055, 0x1b056, 0x1b057, 0x1b058, 0x1b059, 0x1b05a, 0x1b05b, 0x1b05c, 0x1b05d, 0x1b05e, 0x1b05f, 0x1b060, 0x1b061
};

void BM_collation_321(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_321, cps_321 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_321);

uint32_t cps_322[] = {
0x1b062, 0x1b063, 0x1b064, 0x1b065, 0x1b066, 0x1b067, 0x1b068, 0x1b069, 0x1b06a, 0x1b06b, 0x1b06c, 0x1b06d, 0x1b06e, 0x1b06f, 0x1b070, 0x1b071, 0x1b072, 0x1b073, 0x1b074, 0x1b075, 0x1b076, 0x1b077, 0x1b078, 0x1b079, 0x1b07a, 0x1b07b, 0x1b07c, 0x1b07d, 0x1b07e, 0x1b07f, 0x1b080, 0x1b081, 0x1b082, 0x1b083, 0x1b084, 0x1b085, 0x1b086, 0x1b087, 0x1b088, 0x1b089, 0x1b08a, 0x1b08b, 0x1b08c, 0x1b08d, 0x1b08e, 0x1b08f, 0x1b090, 0x1b091, 0x1b092, 0x1b093, 0x1b094, 0x1b095, 0x1b096, 0x1b097, 0x1b098, 0x1b099, 0x1b09a, 0x1b09b, 0x1b09c, 0x1b09d, 0x1b09e, 0x1b09f, 0x1b0a0, 0x1b0a1, 0x1b0a2, 0x1b0a3, 0x1b0a4, 0x1b0a5, 0x1b0a6, 0x1b0a7, 0x1b0a8, 0x1b0a9, 0x1b0aa, 0x1b0ab, 0x1b0ac, 0x1b0ad, 0x1b0ae, 0x1b0af, 0x1b0b0, 0x1b0b1, 0x1b0b2, 0x1b0b3, 0x1b0b4, 0x1b0b5, 0x1b0b6, 0x1b0b7, 0x1b0b8, 0x1b0b9, 0x1b0ba, 0x1b0bb, 0x1b0bc, 0x1b0bd, 0x1b0be, 0x1b0bf, 0x1b0c0, 0x1b0c1, 0x1b0c2, 0x1b0c3, 0x1b0c4, 0x1b0c5
};

void BM_collation_322(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_322, cps_322 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_322);

uint32_t cps_323[] = {
0x1b0c6, 0x1b0c7, 0x1b0c8, 0x1b0c9, 0x1b0ca, 0x1b0cb, 0x1b0cc, 0x1b0cd, 0x1b0ce, 0x1b0cf, 0x1b0d0, 0x1b0d1, 0x1b0d2, 0x1b0d3, 0x1b0d4, 0x1b0d5, 0x1b0d6, 0x1b0d7, 0x1b0d8, 0x1b0d9, 0x1b0da, 0x1b0db, 0x1b0dc, 0x1b0dd, 0x1b0de, 0x1b0df, 0x1b0e0, 0x1b0e1, 0x1b0e2, 0x1b0e3, 0x1b0e4, 0x1b0e5, 0x1b0e6, 0x1b0e7, 0x1b0e8, 0x1b0e9, 0x1b0ea, 0x1b0eb, 0x1b0ec, 0x1b0ed, 0x1b0ee, 0x1b0ef, 0x1b0f0, 0x1b0f1, 0x1b0f2, 0x1b0f3, 0x1b0f4, 0x1b0f5, 0x1b0f6, 0x1b0f7, 0x1b0f8, 0x1b0f9, 0x1b0fa, 0x1b0fb, 0x1b0fc, 0x1b0fd, 0x1b0fe, 0x1b0ff, 0x1b100, 0x1b101, 0x1b102, 0x1b103, 0x1b104, 0x1b105, 0x1b106, 0x1b107, 0x1b108, 0x1b109, 0x1b10a, 0x1b10b, 0x1b10c, 0x1b10d, 0x1b10e, 0x1b10f, 0x1b110, 0x1b111, 0x1b112, 0x1b113, 0x1b114, 0x1b115, 0x1b116, 0x1b117, 0x1b118, 0x1b119, 0x1b11a, 0x1b11b, 0x1b11c, 0x1b11d, 0x1b11e, 0x1b170, 0x1b171, 0x1b172, 0x1b173, 0x1b174, 0x1b175, 0x1b176, 0x1b177, 0x1b178, 0x1b179, 0x1b17a
};

void BM_collation_323(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_323, cps_323 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_323);

uint32_t cps_324[] = {
0x1b17b, 0x1b17c, 0x1b17d, 0x1b17e, 0x1b17f, 0x1b180, 0x1b181, 0x1b182, 0x1b183, 0x1b184, 0x1b185, 0x1b186, 0x1b187, 0x1b188, 0x1b189, 0x1b18a, 0x1b18b, 0x1b18c, 0x1b18d, 0x1b18e, 0x1b18f, 0x1b190, 0x1b191, 0x1b192, 0x1b193, 0x1b194, 0x1b195, 0x1b196, 0x1b197, 0x1b198, 0x1b199, 0x1b19a, 0x1b19b, 0x1b19c, 0x1b19d, 0x1b19e, 0x1b19f, 0x1b1a0, 0x1b1a1, 0x1b1a2, 0x1b1a3, 0x1b1a4, 0x1b1a5, 0x1b1a6, 0x1b1a7, 0x1b1a8, 0x1b1a9, 0x1b1aa, 0x1b1ab, 0x1b1ac, 0x1b1ad, 0x1b1ae, 0x1b1af, 0x1b1b0, 0x1b1b1, 0x1b1b2, 0x1b1b3, 0x1b1b4, 0x1b1b5, 0x1b1b6, 0x1b1b7, 0x1b1b8, 0x1b1b9, 0x1b1ba, 0x1b1bb, 0x1b1bc, 0x1b1bd, 0x1b1be, 0x1b1bf, 0x1b1c0, 0x1b1c1, 0x1b1c2, 0x1b1c3, 0x1b1c4, 0x1b1c5, 0x1b1c6, 0x1b1c7, 0x1b1c8, 0x1b1c9, 0x1b1ca, 0x1b1cb, 0x1b1cc, 0x1b1cd, 0x1b1ce, 0x1b1cf, 0x1b1d0, 0x1b1d1, 0x1b1d2, 0x1b1d3, 0x1b1d4, 0x1b1d5, 0x1b1d6, 0x1b1d7, 0x1b1d8, 0x1b1d9, 0x1b1da, 0x1b1db, 0x1b1dc, 0x1b1dd, 0x1b1de
};

void BM_collation_324(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_324, cps_324 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_324);

uint32_t cps_325[] = {
0x1b1df, 0x1b1e0, 0x1b1e1, 0x1b1e2, 0x1b1e3, 0x1b1e4, 0x1b1e5, 0x1b1e6, 0x1b1e7, 0x1b1e8, 0x1b1e9, 0x1b1ea, 0x1b1eb, 0x1b1ec, 0x1b1ed, 0x1b1ee, 0x1b1ef, 0x1b1f0, 0x1b1f1, 0x1b1f2, 0x1b1f3, 0x1b1f4, 0x1b1f5, 0x1b1f6, 0x1b1f7, 0x1b1f8, 0x1b1f9, 0x1b1fa, 0x1b1fb, 0x1b1fc, 0x1b1fd, 0x1b1fe, 0x1b1ff, 0x1b200, 0x1b201, 0x1b202, 0x1b203, 0x1b204, 0x1b205, 0x1b206, 0x1b207, 0x1b208, 0x1b209, 0x1b20a, 0x1b20b, 0x1b20c, 0x1b20d, 0x1b20e, 0x1b20f, 0x1b210, 0x1b211, 0x1b212, 0x1b213, 0x1b214, 0x1b215, 0x1b216, 0x1b217, 0x1b218, 0x1b219, 0x1b21a, 0x1b21b, 0x1b21c, 0x1b21d, 0x1b21e, 0x1b21f, 0x1b220, 0x1b221, 0x1b222, 0x1b223, 0x1b224, 0x1b225, 0x1b226, 0x1b227, 0x1b228, 0x1b229, 0x1b22a, 0x1b22b, 0x1b22c, 0x1b22d, 0x1b22e, 0x1b22f, 0x1b230, 0x1b231, 0x1b232, 0x1b233, 0x1b234, 0x1b235, 0x1b236, 0x1b237, 0x1b238, 0x1b239, 0x1b23a, 0x1b23b, 0x1b23c, 0x1b23d, 0x1b23e, 0x1b23f, 0x1b240, 0x1b241, 0x1b242
};

void BM_collation_325(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_325, cps_325 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_325);

uint32_t cps_326[] = {
0x1b243, 0x1b244, 0x1b245, 0x1b246, 0x1b247, 0x1b248, 0x1b249, 0x1b24a, 0x1b24b, 0x1b24c, 0x1b24d, 0x1b24e, 0x1b24f, 0x1b250, 0x1b251, 0x1b252, 0x1b253, 0x1b254, 0x1b255, 0x1b256, 0x1b257, 0x1b258, 0x1b259, 0x1b25a, 0x1b25b, 0x1b25c, 0x1b25d, 0x1b25e, 0x1b25f, 0x1b260, 0x1b261, 0x1b262, 0x1b263, 0x1b264, 0x1b265, 0x1b266, 0x1b267, 0x1b268, 0x1b269, 0x1b26a, 0x1b26b, 0x1b26c, 0x1b26d, 0x1b26e, 0x1b26f, 0x1b270, 0x1b271, 0x1b272, 0x1b273, 0x1b274, 0x1b275, 0x1b276, 0x1b277, 0x1b278, 0x1b279, 0x1b27a, 0x1b27b, 0x1b27c, 0x1b27d, 0x1b27e, 0x1b27f, 0x1b280, 0x1b281, 0x1b282, 0x1b283, 0x1b284, 0x1b285, 0x1b286, 0x1b287, 0x1b288, 0x1b289, 0x1b28a, 0x1b28b, 0x1b28c, 0x1b28d, 0x1b28e, 0x1b28f, 0x1b290, 0x1b291, 0x1b292, 0x1b293, 0x1b294, 0x1b295, 0x1b296, 0x1b297, 0x1b298, 0x1b299, 0x1b29a, 0x1b29b, 0x1b29c, 0x1b29d, 0x1b29e, 0x1b29f, 0x1b2a0, 0x1b2a1, 0x1b2a2, 0x1b2a3, 0x1b2a4, 0x1b2a5, 0x1b2a6
};

void BM_collation_326(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_326, cps_326 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_326);

uint32_t cps_327[] = {
0x1b2a7, 0x1b2a8, 0x1b2a9, 0x1b2aa, 0x1b2ab, 0x1b2ac, 0x1b2ad, 0x1b2ae, 0x1b2af, 0x1b2b0, 0x1b2b1, 0x1b2b2, 0x1b2b3, 0x1b2b4, 0x1b2b5, 0x1b2b6, 0x1b2b7, 0x1b2b8, 0x1b2b9, 0x1b2ba, 0x1b2bb, 0x1b2bc, 0x1b2bd, 0x1b2be, 0x1b2bf, 0x1b2c0, 0x1b2c1, 0x1b2c2, 0x1b2c3, 0x1b2c4, 0x1b2c5, 0x1b2c6, 0x1b2c7, 0x1b2c8, 0x1b2c9, 0x1b2ca, 0x1b2cb, 0x1b2cc, 0x1b2cd, 0x1b2ce, 0x1b2cf, 0x1b2d0, 0x1b2d1, 0x1b2d2, 0x1b2d3, 0x1b2d4, 0x1b2d5, 0x1b2d6, 0x1b2d7, 0x1b2d8, 0x1b2d9, 0x1b2da, 0x1b2db, 0x1b2dc, 0x1b2dd, 0x1b2de, 0x1b2df, 0x1b2e0, 0x1b2e1, 0x1b2e2, 0x1b2e3, 0x1b2e4, 0x1b2e5, 0x1b2e6, 0x1b2e7, 0x1b2e8, 0x1b2e9, 0x1b2ea, 0x1b2eb, 0x1b2ec, 0x1b2ed, 0x1b2ee, 0x1b2ef, 0x1b2f0, 0x1b2f1, 0x1b2f2, 0x1b2f3, 0x1b2f4, 0x1b2f5, 0x1b2f6, 0x1b2f7, 0x1b2f8, 0x1b2f9, 0x1b2fa, 0x1b2fb, 0x1bc00, 0x1bc01, 0x1bc02, 0x1bc03, 0x1bc04, 0x1bc05, 0x1bc06, 0x1bc07, 0x1bc08, 0x1bc09, 0x1bc0a, 0x1bc0b, 0x1bc0c, 0x1bc0d, 0x1bc0e
};

void BM_collation_327(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_327, cps_327 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_327);

uint32_t cps_328[] = {
0x1bc0f, 0x1bc10, 0x1bc11, 0x1bc12, 0x1bc13, 0x1bc14, 0x1bc15, 0x1bc16, 0x1bc17, 0x1bc18, 0x1bc19, 0x1bc1a, 0x1bc1b, 0x1bc1c, 0x1bc1d, 0x1bc1e, 0x1bc1f, 0x1bc20, 0x1bc21, 0x1bc22, 0x1bc23, 0x1bc24, 0x1bc25, 0x1bc26, 0x1bc27, 0x1bc28, 0x1bc29, 0x1bc2a, 0x1bc2b, 0x1bc2c, 0x1bc2d, 0x1bc2e, 0x1bc2f, 0x1bc30, 0x1bc31, 0x1bc32, 0x1bc33, 0x1bc34, 0x1bc35, 0x1bc36, 0x1bc37, 0x1bc38, 0x1bc39, 0x1bc3a, 0x1bc3b, 0x1bc3c, 0x1bc3d, 0x1bc3e, 0x1bc3f, 0x1bc40, 0x1bc41, 0x1bc42, 0x1bc43, 0x1bc44, 0x1bc45, 0x1bc46, 0x1bc47, 0x1bc48, 0x1bc49, 0x1bc4a, 0x1bc4b, 0x1bc4c, 0x1bc4d, 0x1bc4e, 0x1bc4f, 0x1bc50, 0x1bc51, 0x1bc52, 0x1bc53, 0x1bc54, 0x1bc55, 0x1bc56, 0x1bc57, 0x1bc58, 0x1bc59, 0x1bc5a, 0x1bc5b, 0x1bc5c, 0x1bc5d, 0x1bc5e, 0x1bc5f, 0x1bc60, 0x1bc61, 0x1bc62, 0x1bc63, 0x1bc64, 0x1bc65, 0x1bc66, 0x1bc67, 0x1bc68, 0x1bc69, 0x1bc6a, 0x1bc70, 0x1bc71, 0x1bc72, 0x1bc73, 0x1bc74, 0x1bc75, 0x1bc76, 0x1bc77
};

void BM_collation_328(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_328, cps_328 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_328);

uint32_t cps_329[] = {
0x1bc78, 0x1bc79, 0x1bc7a, 0x1bc7b, 0x1bc7c, 0x1bc80, 0x1bc81, 0x1bc82, 0x1bc83, 0x1bc84, 0x1bc85, 0x1bc86, 0x1bc87, 0x1bc88, 0x1bc90, 0x1bc91, 0x1bc92, 0x1bc93, 0x1bc94, 0x1bc95, 0x1bc96, 0x1bc97, 0x1bc98, 0x1bc99, 0x1bc9c, 0x1bc9d, 0x1bc9e, 0x1bc9f, 0x1bca0, 0x1bca1, 0x1bca2, 0x1bca3, 0x1d000, 0x1d001, 0x1d002, 0x1d003, 0x1d004, 0x1d005, 0x1d006, 0x1d007, 0x1d008, 0x1d009, 0x1d00a, 0x1d00b, 0x1d00c, 0x1d00d, 0x1d00e, 0x1d00f, 0x1d010, 0x1d011, 0x1d012, 0x1d013, 0x1d014, 0x1d015, 0x1d016, 0x1d017, 0x1d018, 0x1d019, 0x1d01a, 0x1d01b, 0x1d01c, 0x1d01d, 0x1d01e, 0x1d01f, 0x1d020, 0x1d021, 0x1d022, 0x1d023, 0x1d024, 0x1d025, 0x1d026, 0x1d027, 0x1d028, 0x1d029, 0x1d02a, 0x1d02b, 0x1d02c, 0x1d02d, 0x1d02e, 0x1d02f, 0x1d030, 0x1d031, 0x1d032, 0x1d033, 0x1d034, 0x1d035, 0x1d036, 0x1d037, 0x1d038, 0x1d039, 0x1d03a, 0x1d03b, 0x1d03c, 0x1d03d, 0x1d03e, 0x1d03f, 0x1d040, 0x1d041, 0x1d042, 0x1d043
};

void BM_collation_329(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_329, cps_329 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_329);

uint32_t cps_330[] = {
0x1d044, 0x1d045, 0x1d046, 0x1d047, 0x1d048, 0x1d049, 0x1d04a, 0x1d04b, 0x1d04c, 0x1d04d, 0x1d04e, 0x1d04f, 0x1d050, 0x1d051, 0x1d052, 0x1d053, 0x1d054, 0x1d055, 0x1d056, 0x1d057, 0x1d058, 0x1d059, 0x1d05a, 0x1d05b, 0x1d05c, 0x1d05d, 0x1d05e, 0x1d05f, 0x1d060, 0x1d061, 0x1d062, 0x1d063, 0x1d064, 0x1d065, 0x1d066, 0x1d067, 0x1d068, 0x1d069, 0x1d06a, 0x1d06b, 0x1d06c, 0x1d06d, 0x1d06e, 0x1d06f, 0x1d070, 0x1d071, 0x1d072, 0x1d073, 0x1d074, 0x1d075, 0x1d076, 0x1d077, 0x1d078, 0x1d079, 0x1d07a, 0x1d07b, 0x1d07c, 0x1d07d, 0x1d07e, 0x1d07f, 0x1d080, 0x1d081, 0x1d082, 0x1d083, 0x1d084, 0x1d085, 0x1d086, 0x1d087, 0x1d088, 0x1d089, 0x1d08a, 0x1d08b, 0x1d08c, 0x1d08d, 0x1d08e, 0x1d08f, 0x1d090, 0x1d091, 0x1d092, 0x1d093, 0x1d094, 0x1d095, 0x1d096, 0x1d097, 0x1d098, 0x1d099, 0x1d09a, 0x1d09b, 0x1d09c, 0x1d09d, 0x1d09e, 0x1d09f, 0x1d0a0, 0x1d0a1, 0x1d0a2, 0x1d0a3, 0x1d0a4, 0x1d0a5, 0x1d0a6, 0x1d0a7
};

void BM_collation_330(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_330, cps_330 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_330);

uint32_t cps_331[] = {
0x1d0a8, 0x1d0a9, 0x1d0aa, 0x1d0ab, 0x1d0ac, 0x1d0ad, 0x1d0ae, 0x1d0af, 0x1d0b0, 0x1d0b1, 0x1d0b2, 0x1d0b3, 0x1d0b4, 0x1d0b5, 0x1d0b6, 0x1d0b7, 0x1d0b8, 0x1d0b9, 0x1d0ba, 0x1d0bb, 0x1d0bc, 0x1d0bd, 0x1d0be, 0x1d0bf, 0x1d0c0, 0x1d0c1, 0x1d0c2, 0x1d0c3, 0x1d0c4, 0x1d0c5, 0x1d0c6, 0x1d0c7, 0x1d0c8, 0x1d0c9, 0x1d0ca, 0x1d0cb, 0x1d0cc, 0x1d0cd, 0x1d0ce, 0x1d0cf, 0x1d0d0, 0x1d0d1, 0x1d0d2, 0x1d0d3, 0x1d0d4, 0x1d0d5, 0x1d0d6, 0x1d0d7, 0x1d0d8, 0x1d0d9, 0x1d0da, 0x1d0db, 0x1d0dc, 0x1d0dd, 0x1d0de, 0x1d0df, 0x1d0e0, 0x1d0e1, 0x1d0e2, 0x1d0e3, 0x1d0e4, 0x1d0e5, 0x1d0e6, 0x1d0e7, 0x1d0e8, 0x1d0e9, 0x1d0ea, 0x1d0eb, 0x1d0ec, 0x1d0ed, 0x1d0ee, 0x1d0ef, 0x1d0f0, 0x1d0f1, 0x1d0f2, 0x1d0f3, 0x1d0f4, 0x1d0f5, 0x1d100, 0x1d101, 0x1d102, 0x1d103, 0x1d104, 0x1d105, 0x1d106, 0x1d107, 0x1d108, 0x1d109, 0x1d10a, 0x1d10b, 0x1d10c, 0x1d10d, 0x1d10e, 0x1d10f, 0x1d110, 0x1d111, 0x1d112, 0x1d113, 0x1d114, 0x1d115
};

void BM_collation_331(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_331, cps_331 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_331);

uint32_t cps_332[] = {
0x1d116, 0x1d117, 0x1d118, 0x1d119, 0x1d11a, 0x1d11b, 0x1d11c, 0x1d11d, 0x1d11e, 0x1d11f, 0x1d120, 0x1d121, 0x1d122, 0x1d123, 0x1d124, 0x1d125, 0x1d126, 0x1d129, 0x1d12a, 0x1d12b, 0x1d12c, 0x1d12d, 0x1d12e, 0x1d12f, 0x1d130, 0x1d131, 0x1d132, 0x1d133, 0x1d134, 0x1d135, 0x1d136, 0x1d137, 0x1d138, 0x1d139, 0x1d13a, 0x1d13b, 0x1d13c, 0x1d13d, 0x1d13e, 0x1d13f, 0x1d140, 0x1d141, 0x1d142, 0x1d143, 0x1d144, 0x1d145, 0x1d146, 0x1d147, 0x1d148, 0x1d149, 0x1d14a, 0x1d14b, 0x1d14c, 0x1d14d, 0x1d14e, 0x1d14f, 0x1d150, 0x1d151, 0x1d152, 0x1d153, 0x1d154, 0x1d155, 0x1d156, 0x1d157, 0x1d158, 0x1d159, 0x1d15a, 0x1d15b, 0x1d15c, 0x1d15d, 0x1d15e, 0x1d15f, 0x1d160, 0x1d161, 0x1d162, 0x1d163, 0x1d164, 0x1d165, 0x1d166, 0x1d167, 0x1d168, 0x1d169, 0x1d16a, 0x1d16b, 0x1d16c, 0x1d16d, 0x1d16e, 0x1d16f, 0x1d170, 0x1d171, 0x1d172, 0x1d173, 0x1d174, 0x1d175, 0x1d176, 0x1d177, 0x1d178, 0x1d179, 0x1d17a, 0x1d17b
};

void BM_collation_332(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_332, cps_332 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_332);

uint32_t cps_333[] = {
0x1d17c, 0x1d17d, 0x1d17e, 0x1d17f, 0x1d180, 0x1d181, 0x1d182, 0x1d183, 0x1d184, 0x1d185, 0x1d186, 0x1d187, 0x1d188, 0x1d189, 0x1d18a, 0x1d18b, 0x1d18c, 0x1d18d, 0x1d18e, 0x1d18f, 0x1d190, 0x1d191, 0x1d192, 0x1d193, 0x1d194, 0x1d195, 0x1d196, 0x1d197, 0x1d198, 0x1d199, 0x1d19a, 0x1d19b, 0x1d19c, 0x1d19d, 0x1d19e, 0x1d19f, 0x1d1a0, 0x1d1a1, 0x1d1a2, 0x1d1a3, 0x1d1a4, 0x1d1a5, 0x1d1a6, 0x1d1a7, 0x1d1a8, 0x1d1a9, 0x1d1aa, 0x1d1ab, 0x1d1ac, 0x1d1ad, 0x1d1ae, 0x1d1af, 0x1d1b0, 0x1d1b1, 0x1d1b2, 0x1d1b3, 0x1d1b4, 0x1d1b5, 0x1d1b6, 0x1d1b7, 0x1d1b8, 0x1d1b9, 0x1d1ba, 0x1d1bb, 0x1d1bc, 0x1d1bd, 0x1d1be, 0x1d1bf, 0x1d1c0, 0x1d1c1, 0x1d1c2, 0x1d1c3, 0x1d1c4, 0x1d1c5, 0x1d1c6, 0x1d1c7, 0x1d1c8, 0x1d1c9, 0x1d1ca, 0x1d1cb, 0x1d1cc, 0x1d1cd, 0x1d1ce, 0x1d1cf, 0x1d1d0, 0x1d1d1, 0x1d1d2, 0x1d1d3, 0x1d1d4, 0x1d1d5, 0x1d1d6, 0x1d1d7, 0x1d1d8, 0x1d1d9, 0x1d1da, 0x1d1db, 0x1d1dc, 0x1d1dd, 0x1d1de, 0x1d1df
};

void BM_collation_333(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_333, cps_333 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_333);

uint32_t cps_334[] = {
0x1d1e0, 0x1d1e1, 0x1d1e2, 0x1d1e3, 0x1d1e4, 0x1d1e5, 0x1d1e6, 0x1d1e7, 0x1d1e8, 0x1d200, 0x1d201, 0x1d202, 0x1d203, 0x1d204, 0x1d205, 0x1d206, 0x1d207, 0x1d208, 0x1d209, 0x1d20a, 0x1d20b, 0x1d20c, 0x1d20d, 0x1d20e, 0x1d20f, 0x1d210, 0x1d211, 0x1d212, 0x1d213, 0x1d214, 0x1d215, 0x1d216, 0x1d217, 0x1d218, 0x1d219, 0x1d21a, 0x1d21b, 0x1d21c, 0x1d21d, 0x1d21e, 0x1d21f, 0x1d220, 0x1d221, 0x1d222, 0x1d223, 0x1d224, 0x1d225, 0x1d226, 0x1d227, 0x1d228, 0x1d229, 0x1d22a, 0x1d22b, 0x1d22c, 0x1d22d, 0x1d22e, 0x1d22f, 0x1d230, 0x1d231, 0x1d232, 0x1d233, 0x1d234, 0x1d235, 0x1d236, 0x1d237, 0x1d238, 0x1d239, 0x1d23a, 0x1d23b, 0x1d23c, 0x1d23d, 0x1d23e, 0x1d23f, 0x1d240, 0x1d241, 0x1d242, 0x1d243, 0x1d244, 0x1d245, 0x1d300, 0x1d301, 0x1d302, 0x1d303, 0x1d304, 0x1d305, 0x1d306, 0x1d307, 0x1d308, 0x1d309, 0x1d30a, 0x1d30b, 0x1d30c, 0x1d30d, 0x1d30e, 0x1d30f, 0x1d310, 0x1d311, 0x1d312, 0x1d313, 0x1d314
};

void BM_collation_334(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_334, cps_334 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_334);

uint32_t cps_335[] = {
0x1d315, 0x1d316, 0x1d317, 0x1d318, 0x1d319, 0x1d31a, 0x1d31b, 0x1d31c, 0x1d31d, 0x1d31e, 0x1d31f, 0x1d320, 0x1d321, 0x1d322, 0x1d323, 0x1d324, 0x1d325, 0x1d326, 0x1d327, 0x1d328, 0x1d329, 0x1d32a, 0x1d32b, 0x1d32c, 0x1d32d, 0x1d32e, 0x1d32f, 0x1d330, 0x1d331, 0x1d332, 0x1d333, 0x1d334, 0x1d335, 0x1d336, 0x1d337, 0x1d338, 0x1d339, 0x1d33a, 0x1d33b, 0x1d33c, 0x1d33d, 0x1d33e, 0x1d33f, 0x1d340, 0x1d341, 0x1d342, 0x1d343, 0x1d344, 0x1d345, 0x1d346, 0x1d347, 0x1d348, 0x1d349, 0x1d34a, 0x1d34b, 0x1d34c, 0x1d34d, 0x1d34e, 0x1d34f, 0x1d350, 0x1d351, 0x1d352, 0x1d353, 0x1d354, 0x1d355, 0x1d356, 0x1d360, 0x1d361, 0x1d362, 0x1d363, 0x1d364, 0x1d365, 0x1d366, 0x1d367, 0x1d368, 0x1d369, 0x1d36a, 0x1d36b, 0x1d36c, 0x1d36d, 0x1d36e, 0x1d36f, 0x1d370, 0x1d371, 0x1d400, 0x1d401, 0x1d402, 0x1d403, 0x1d404, 0x1d405, 0x1d406, 0x1d407, 0x1d408, 0x1d409, 0x1d40a, 0x1d40b, 0x1d40c, 0x1d40d, 0x1d40e, 0x1d40f
};

void BM_collation_335(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_335, cps_335 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_335);

uint32_t cps_336[] = {
0x1d410, 0x1d411, 0x1d412, 0x1d413, 0x1d414, 0x1d415, 0x1d416, 0x1d417, 0x1d418, 0x1d419, 0x1d41a, 0x1d41b, 0x1d41c, 0x1d41d, 0x1d41e, 0x1d41f, 0x1d420, 0x1d421, 0x1d422, 0x1d423, 0x1d424, 0x1d425, 0x1d426, 0x1d427, 0x1d428, 0x1d429, 0x1d42a, 0x1d42b, 0x1d42c, 0x1d42d, 0x1d42e, 0x1d42f, 0x1d430, 0x1d431, 0x1d432, 0x1d433, 0x1d434, 0x1d435, 0x1d436, 0x1d437, 0x1d438, 0x1d439, 0x1d43a, 0x1d43b, 0x1d43c, 0x1d43d, 0x1d43e, 0x1d43f, 0x1d440, 0x1d441, 0x1d442, 0x1d443, 0x1d444, 0x1d445, 0x1d446, 0x1d447, 0x1d448, 0x1d449, 0x1d44a, 0x1d44b, 0x1d44c, 0x1d44d, 0x1d44e, 0x1d44f, 0x1d450, 0x1d451, 0x1d452, 0x1d453, 0x1d454, 0x1d456, 0x1d457, 0x1d458, 0x1d459, 0x1d45a, 0x1d45b, 0x1d45c, 0x1d45d, 0x1d45e, 0x1d45f, 0x1d460, 0x1d461, 0x1d462, 0x1d463, 0x1d464, 0x1d465, 0x1d466, 0x1d467, 0x1d468, 0x1d469, 0x1d46a, 0x1d46b, 0x1d46c, 0x1d46d, 0x1d46e, 0x1d46f, 0x1d470, 0x1d471, 0x1d472, 0x1d473, 0x1d474
};

void BM_collation_336(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_336, cps_336 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_336);

uint32_t cps_337[] = {
0x1d475, 0x1d476, 0x1d477, 0x1d478, 0x1d479, 0x1d47a, 0x1d47b, 0x1d47c, 0x1d47d, 0x1d47e, 0x1d47f, 0x1d480, 0x1d481, 0x1d482, 0x1d483, 0x1d484, 0x1d485, 0x1d486, 0x1d487, 0x1d488, 0x1d489, 0x1d48a, 0x1d48b, 0x1d48c, 0x1d48d, 0x1d48e, 0x1d48f, 0x1d490, 0x1d491, 0x1d492, 0x1d493, 0x1d494, 0x1d495, 0x1d496, 0x1d497, 0x1d498, 0x1d499, 0x1d49a, 0x1d49b, 0x1d49c, 0x1d49e, 0x1d49f, 0x1d4a2, 0x1d4a5, 0x1d4a6, 0x1d4a9, 0x1d4aa, 0x1d4ab, 0x1d4ac, 0x1d4ae, 0x1d4af, 0x1d4b0, 0x1d4b1, 0x1d4b2, 0x1d4b3, 0x1d4b4, 0x1d4b5, 0x1d4b6, 0x1d4b7, 0x1d4b8, 0x1d4b9, 0x1d4bb, 0x1d4bd, 0x1d4be, 0x1d4bf, 0x1d4c0, 0x1d4c1, 0x1d4c2, 0x1d4c3, 0x1d4c5, 0x1d4c6, 0x1d4c7, 0x1d4c8, 0x1d4c9, 0x1d4ca, 0x1d4cb, 0x1d4cc, 0x1d4cd, 0x1d4ce, 0x1d4cf, 0x1d4d0, 0x1d4d1, 0x1d4d2, 0x1d4d3, 0x1d4d4, 0x1d4d5, 0x1d4d6, 0x1d4d7, 0x1d4d8, 0x1d4d9, 0x1d4da, 0x1d4db, 0x1d4dc, 0x1d4dd, 0x1d4de, 0x1d4df, 0x1d4e0, 0x1d4e1, 0x1d4e2, 0x1d4e3
};

void BM_collation_337(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_337, cps_337 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_337);

uint32_t cps_338[] = {
0x1d4e4, 0x1d4e5, 0x1d4e6, 0x1d4e7, 0x1d4e8, 0x1d4e9, 0x1d4ea, 0x1d4eb, 0x1d4ec, 0x1d4ed, 0x1d4ee, 0x1d4ef, 0x1d4f0, 0x1d4f1, 0x1d4f2, 0x1d4f3, 0x1d4f4, 0x1d4f5, 0x1d4f6, 0x1d4f7, 0x1d4f8, 0x1d4f9, 0x1d4fa, 0x1d4fb, 0x1d4fc, 0x1d4fd, 0x1d4fe, 0x1d4ff, 0x1d500, 0x1d501, 0x1d502, 0x1d503, 0x1d504, 0x1d505, 0x1d507, 0x1d508, 0x1d509, 0x1d50a, 0x1d50d, 0x1d50e, 0x1d50f, 0x1d510, 0x1d511, 0x1d512, 0x1d513, 0x1d514, 0x1d516, 0x1d517, 0x1d518, 0x1d519, 0x1d51a, 0x1d51b, 0x1d51c, 0x1d51e, 0x1d51f, 0x1d520, 0x1d521, 0x1d522, 0x1d523, 0x1d524, 0x1d525, 0x1d526, 0x1d527, 0x1d528, 0x1d529, 0x1d52a, 0x1d52b, 0x1d52c, 0x1d52d, 0x1d52e, 0x1d52f, 0x1d530, 0x1d531, 0x1d532, 0x1d533, 0x1d534, 0x1d535, 0x1d536, 0x1d537, 0x1d538, 0x1d539, 0x1d53b, 0x1d53c, 0x1d53d, 0x1d53e, 0x1d540, 0x1d541, 0x1d542, 0x1d543, 0x1d544, 0x1d546, 0x1d54a, 0x1d54b, 0x1d54c, 0x1d54d, 0x1d54e, 0x1d54f, 0x1d550, 0x1d552, 0x1d553
};

void BM_collation_338(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_338, cps_338 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_338);

uint32_t cps_339[] = {
0x1d554, 0x1d555, 0x1d556, 0x1d557, 0x1d558, 0x1d559, 0x1d55a, 0x1d55b, 0x1d55c, 0x1d55d, 0x1d55e, 0x1d55f, 0x1d560, 0x1d561, 0x1d562, 0x1d563, 0x1d564, 0x1d565, 0x1d566, 0x1d567, 0x1d568, 0x1d569, 0x1d56a, 0x1d56b, 0x1d56c, 0x1d56d, 0x1d56e, 0x1d56f, 0x1d570, 0x1d571, 0x1d572, 0x1d573, 0x1d574, 0x1d575, 0x1d576, 0x1d577, 0x1d578, 0x1d579, 0x1d57a, 0x1d57b, 0x1d57c, 0x1d57d, 0x1d57e, 0x1d57f, 0x1d580, 0x1d581, 0x1d582, 0x1d583, 0x1d584, 0x1d585, 0x1d586, 0x1d587, 0x1d588, 0x1d589, 0x1d58a, 0x1d58b, 0x1d58c, 0x1d58d, 0x1d58e, 0x1d58f, 0x1d590, 0x1d591, 0x1d592, 0x1d593, 0x1d594, 0x1d595, 0x1d596, 0x1d597, 0x1d598, 0x1d599, 0x1d59a, 0x1d59b, 0x1d59c, 0x1d59d, 0x1d59e, 0x1d59f, 0x1d5a0, 0x1d5a1, 0x1d5a2, 0x1d5a3, 0x1d5a4, 0x1d5a5, 0x1d5a6, 0x1d5a7, 0x1d5a8, 0x1d5a9, 0x1d5aa, 0x1d5ab, 0x1d5ac, 0x1d5ad, 0x1d5ae, 0x1d5af, 0x1d5b0, 0x1d5b1, 0x1d5b2, 0x1d5b3, 0x1d5b4, 0x1d5b5, 0x1d5b6, 0x1d5b7
};

void BM_collation_339(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_339, cps_339 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_339);

uint32_t cps_340[] = {
0x1d5b8, 0x1d5b9, 0x1d5ba, 0x1d5bb, 0x1d5bc, 0x1d5bd, 0x1d5be, 0x1d5bf, 0x1d5c0, 0x1d5c1, 0x1d5c2, 0x1d5c3, 0x1d5c4, 0x1d5c5, 0x1d5c6, 0x1d5c7, 0x1d5c8, 0x1d5c9, 0x1d5ca, 0x1d5cb, 0x1d5cc, 0x1d5cd, 0x1d5ce, 0x1d5cf, 0x1d5d0, 0x1d5d1, 0x1d5d2, 0x1d5d3, 0x1d5d4, 0x1d5d5, 0x1d5d6, 0x1d5d7, 0x1d5d8, 0x1d5d9, 0x1d5da, 0x1d5db, 0x1d5dc, 0x1d5dd, 0x1d5de, 0x1d5df, 0x1d5e0, 0x1d5e1, 0x1d5e2, 0x1d5e3, 0x1d5e4, 0x1d5e5, 0x1d5e6, 0x1d5e7, 0x1d5e8, 0x1d5e9, 0x1d5ea, 0x1d5eb, 0x1d5ec, 0x1d5ed, 0x1d5ee, 0x1d5ef, 0x1d5f0, 0x1d5f1, 0x1d5f2, 0x1d5f3, 0x1d5f4, 0x1d5f5, 0x1d5f6, 0x1d5f7, 0x1d5f8, 0x1d5f9, 0x1d5fa, 0x1d5fb, 0x1d5fc, 0x1d5fd, 0x1d5fe, 0x1d5ff, 0x1d600, 0x1d601, 0x1d602, 0x1d603, 0x1d604, 0x1d605, 0x1d606, 0x1d607, 0x1d608, 0x1d609, 0x1d60a, 0x1d60b, 0x1d60c, 0x1d60d, 0x1d60e, 0x1d60f, 0x1d610, 0x1d611, 0x1d612, 0x1d613, 0x1d614, 0x1d615, 0x1d616, 0x1d617, 0x1d618, 0x1d619, 0x1d61a, 0x1d61b
};

void BM_collation_340(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_340, cps_340 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_340);

uint32_t cps_341[] = {
0x1d61c, 0x1d61d, 0x1d61e, 0x1d61f, 0x1d620, 0x1d621, 0x1d622, 0x1d623, 0x1d624, 0x1d625, 0x1d626, 0x1d627, 0x1d628, 0x1d629, 0x1d62a, 0x1d62b, 0x1d62c, 0x1d62d, 0x1d62e, 0x1d62f, 0x1d630, 0x1d631, 0x1d632, 0x1d633, 0x1d634, 0x1d635, 0x1d636, 0x1d637, 0x1d638, 0x1d639, 0x1d63a, 0x1d63b, 0x1d63c, 0x1d63d, 0x1d63e, 0x1d63f, 0x1d640, 0x1d641, 0x1d642, 0x1d643, 0x1d644, 0x1d645, 0x1d646, 0x1d647, 0x1d648, 0x1d649, 0x1d64a, 0x1d64b, 0x1d64c, 0x1d64d, 0x1d64e, 0x1d64f, 0x1d650, 0x1d651, 0x1d652, 0x1d653, 0x1d654, 0x1d655, 0x1d656, 0x1d657, 0x1d658, 0x1d659, 0x1d65a, 0x1d65b, 0x1d65c, 0x1d65d, 0x1d65e, 0x1d65f, 0x1d660, 0x1d661, 0x1d662, 0x1d663, 0x1d664, 0x1d665, 0x1d666, 0x1d667, 0x1d668, 0x1d669, 0x1d66a, 0x1d66b, 0x1d66c, 0x1d66d, 0x1d66e, 0x1d66f, 0x1d670, 0x1d671, 0x1d672, 0x1d673, 0x1d674, 0x1d675, 0x1d676, 0x1d677, 0x1d678, 0x1d679, 0x1d67a, 0x1d67b, 0x1d67c, 0x1d67d, 0x1d67e, 0x1d67f
};

void BM_collation_341(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_341, cps_341 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_341);

uint32_t cps_342[] = {
0x1d680, 0x1d681, 0x1d682, 0x1d683, 0x1d684, 0x1d685, 0x1d686, 0x1d687, 0x1d688, 0x1d689, 0x1d68a, 0x1d68b, 0x1d68c, 0x1d68d, 0x1d68e, 0x1d68f, 0x1d690, 0x1d691, 0x1d692, 0x1d693, 0x1d694, 0x1d695, 0x1d696, 0x1d697, 0x1d698, 0x1d699, 0x1d69a, 0x1d69b, 0x1d69c, 0x1d69d, 0x1d69e, 0x1d69f, 0x1d6a0, 0x1d6a1, 0x1d6a2, 0x1d6a3, 0x1d6a4, 0x1d6a5, 0x1d6a8, 0x1d6a9, 0x1d6aa, 0x1d6ab, 0x1d6ac, 0x1d6ad, 0x1d6ae, 0x1d6af, 0x1d6b0, 0x1d6b1, 0x1d6b2, 0x1d6b3, 0x1d6b4, 0x1d6b5, 0x1d6b6, 0x1d6b7, 0x1d6b8, 0x1d6b9, 0x1d6ba, 0x1d6bb, 0x1d6bc, 0x1d6bd, 0x1d6be, 0x1d6bf, 0x1d6c0, 0x1d6c1, 0x1d6c2, 0x1d6c3, 0x1d6c4, 0x1d6c5, 0x1d6c6, 0x1d6c7, 0x1d6c8, 0x1d6c9, 0x1d6ca, 0x1d6cb, 0x1d6cc, 0x1d6cd, 0x1d6ce, 0x1d6cf, 0x1d6d0, 0x1d6d1, 0x1d6d2, 0x1d6d3, 0x1d6d4, 0x1d6d5, 0x1d6d6, 0x1d6d7, 0x1d6d8, 0x1d6d9, 0x1d6da, 0x1d6db, 0x1d6dc, 0x1d6dd, 0x1d6de, 0x1d6df, 0x1d6e0, 0x1d6e1, 0x1d6e2, 0x1d6e3, 0x1d6e4, 0x1d6e5
};

void BM_collation_342(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_342, cps_342 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_342);

uint32_t cps_343[] = {
0x1d6e6, 0x1d6e7, 0x1d6e8, 0x1d6e9, 0x1d6ea, 0x1d6eb, 0x1d6ec, 0x1d6ed, 0x1d6ee, 0x1d6ef, 0x1d6f0, 0x1d6f1, 0x1d6f2, 0x1d6f3, 0x1d6f4, 0x1d6f5, 0x1d6f6, 0x1d6f7, 0x1d6f8, 0x1d6f9, 0x1d6fa, 0x1d6fb, 0x1d6fc, 0x1d6fd, 0x1d6fe, 0x1d6ff, 0x1d700, 0x1d701, 0x1d702, 0x1d703, 0x1d704, 0x1d705, 0x1d706, 0x1d707, 0x1d708, 0x1d709, 0x1d70a, 0x1d70b, 0x1d70c, 0x1d70d, 0x1d70e, 0x1d70f, 0x1d710, 0x1d711, 0x1d712, 0x1d713, 0x1d714, 0x1d715, 0x1d716, 0x1d717, 0x1d718, 0x1d719, 0x1d71a, 0x1d71b, 0x1d71c, 0x1d71d, 0x1d71e, 0x1d71f, 0x1d720, 0x1d721, 0x1d722, 0x1d723, 0x1d724, 0x1d725, 0x1d726, 0x1d727, 0x1d728, 0x1d729, 0x1d72a, 0x1d72b, 0x1d72c, 0x1d72d, 0x1d72e, 0x1d72f, 0x1d730, 0x1d731, 0x1d732, 0x1d733, 0x1d734, 0x1d735, 0x1d736, 0x1d737, 0x1d738, 0x1d739, 0x1d73a, 0x1d73b, 0x1d73c, 0x1d73d, 0x1d73e, 0x1d73f, 0x1d740, 0x1d741, 0x1d742, 0x1d743, 0x1d744, 0x1d745, 0x1d746, 0x1d747, 0x1d748, 0x1d749
};

void BM_collation_343(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_343, cps_343 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_343);

uint32_t cps_344[] = {
0x1d74a, 0x1d74b, 0x1d74c, 0x1d74d, 0x1d74e, 0x1d74f, 0x1d750, 0x1d751, 0x1d752, 0x1d753, 0x1d754, 0x1d755, 0x1d756, 0x1d757, 0x1d758, 0x1d759, 0x1d75a, 0x1d75b, 0x1d75c, 0x1d75d, 0x1d75e, 0x1d75f, 0x1d760, 0x1d761, 0x1d762, 0x1d763, 0x1d764, 0x1d765, 0x1d766, 0x1d767, 0x1d768, 0x1d769, 0x1d76a, 0x1d76b, 0x1d76c, 0x1d76d, 0x1d76e, 0x1d76f, 0x1d770, 0x1d771, 0x1d772, 0x1d773, 0x1d774, 0x1d775, 0x1d776, 0x1d777, 0x1d778, 0x1d779, 0x1d77a, 0x1d77b, 0x1d77c, 0x1d77d, 0x1d77e, 0x1d77f, 0x1d780, 0x1d781, 0x1d782, 0x1d783, 0x1d784, 0x1d785, 0x1d786, 0x1d787, 0x1d788, 0x1d789, 0x1d78a, 0x1d78b, 0x1d78c, 0x1d78d, 0x1d78e, 0x1d78f, 0x1d790, 0x1d791, 0x1d792, 0x1d793, 0x1d794, 0x1d795, 0x1d796, 0x1d797, 0x1d798, 0x1d799, 0x1d79a, 0x1d79b, 0x1d79c, 0x1d79d, 0x1d79e, 0x1d79f, 0x1d7a0, 0x1d7a1, 0x1d7a2, 0x1d7a3, 0x1d7a4, 0x1d7a5, 0x1d7a6, 0x1d7a7, 0x1d7a8, 0x1d7a9, 0x1d7aa, 0x1d7ab, 0x1d7ac, 0x1d7ad
};

void BM_collation_344(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_344, cps_344 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_344);

uint32_t cps_345[] = {
0x1d7ae, 0x1d7af, 0x1d7b0, 0x1d7b1, 0x1d7b2, 0x1d7b3, 0x1d7b4, 0x1d7b5, 0x1d7b6, 0x1d7b7, 0x1d7b8, 0x1d7b9, 0x1d7ba, 0x1d7bb, 0x1d7bc, 0x1d7bd, 0x1d7be, 0x1d7bf, 0x1d7c0, 0x1d7c1, 0x1d7c2, 0x1d7c3, 0x1d7c4, 0x1d7c5, 0x1d7c6, 0x1d7c7, 0x1d7c8, 0x1d7c9, 0x1d7ca, 0x1d7cb, 0x1d7ce, 0x1d7cf, 0x1d7d0, 0x1d7d1, 0x1d7d2, 0x1d7d3, 0x1d7d4, 0x1d7d5, 0x1d7d6, 0x1d7d7, 0x1d7d8, 0x1d7d9, 0x1d7da, 0x1d7db, 0x1d7dc, 0x1d7dd, 0x1d7de, 0x1d7df, 0x1d7e0, 0x1d7e1, 0x1d7e2, 0x1d7e3, 0x1d7e4, 0x1d7e5, 0x1d7e6, 0x1d7e7, 0x1d7e8, 0x1d7e9, 0x1d7ea, 0x1d7eb, 0x1d7ec, 0x1d7ed, 0x1d7ee, 0x1d7ef, 0x1d7f0, 0x1d7f1, 0x1d7f2, 0x1d7f3, 0x1d7f4, 0x1d7f5, 0x1d7f6, 0x1d7f7, 0x1d7f8, 0x1d7f9, 0x1d7fa, 0x1d7fb, 0x1d7fc, 0x1d7fd, 0x1d7fe, 0x1d7ff, 0x1d800, 0x1d801, 0x1d802, 0x1d803, 0x1d804, 0x1d805, 0x1d806, 0x1d807, 0x1d808, 0x1d809, 0x1d80a, 0x1d80b, 0x1d80c, 0x1d80d, 0x1d80e, 0x1d80f, 0x1d810, 0x1d811, 0x1d812, 0x1d813
};

void BM_collation_345(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_345, cps_345 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_345);

uint32_t cps_346[] = {
0x1d814, 0x1d815, 0x1d816, 0x1d817, 0x1d818, 0x1d819, 0x1d81a, 0x1d81b, 0x1d81c, 0x1d81d, 0x1d81e, 0x1d81f, 0x1d820, 0x1d821, 0x1d822, 0x1d823, 0x1d824, 0x1d825, 0x1d826, 0x1d827, 0x1d828, 0x1d829, 0x1d82a, 0x1d82b, 0x1d82c, 0x1d82d, 0x1d82e, 0x1d82f, 0x1d830, 0x1d831, 0x1d832, 0x1d833, 0x1d834, 0x1d835, 0x1d836, 0x1d837, 0x1d838, 0x1d839, 0x1d83a, 0x1d83b, 0x1d83c, 0x1d83d, 0x1d83e, 0x1d83f, 0x1d840, 0x1d841, 0x1d842, 0x1d843, 0x1d844, 0x1d845, 0x1d846, 0x1d847, 0x1d848, 0x1d849, 0x1d84a, 0x1d84b, 0x1d84c, 0x1d84d, 0x1d84e, 0x1d84f, 0x1d850, 0x1d851, 0x1d852, 0x1d853, 0x1d854, 0x1d855, 0x1d856, 0x1d857, 0x1d858, 0x1d859, 0x1d85a, 0x1d85b, 0x1d85c, 0x1d85d, 0x1d85e, 0x1d85f, 0x1d860, 0x1d861, 0x1d862, 0x1d863, 0x1d864, 0x1d865, 0x1d866, 0x1d867, 0x1d868, 0x1d869, 0x1d86a, 0x1d86b, 0x1d86c, 0x1d86d, 0x1d86e, 0x1d86f, 0x1d870, 0x1d871, 0x1d872, 0x1d873, 0x1d874, 0x1d875, 0x1d876, 0x1d877
};

void BM_collation_346(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_346, cps_346 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_346);

uint32_t cps_347[] = {
0x1d878, 0x1d879, 0x1d87a, 0x1d87b, 0x1d87c, 0x1d87d, 0x1d87e, 0x1d87f, 0x1d880, 0x1d881, 0x1d882, 0x1d883, 0x1d884, 0x1d885, 0x1d886, 0x1d887, 0x1d888, 0x1d889, 0x1d88a, 0x1d88b, 0x1d88c, 0x1d88d, 0x1d88e, 0x1d88f, 0x1d890, 0x1d891, 0x1d892, 0x1d893, 0x1d894, 0x1d895, 0x1d896, 0x1d897, 0x1d898, 0x1d899, 0x1d89a, 0x1d89b, 0x1d89c, 0x1d89d, 0x1d89e, 0x1d89f, 0x1d8a0, 0x1d8a1, 0x1d8a2, 0x1d8a3, 0x1d8a4, 0x1d8a5, 0x1d8a6, 0x1d8a7, 0x1d8a8, 0x1d8a9, 0x1d8aa, 0x1d8ab, 0x1d8ac, 0x1d8ad, 0x1d8ae, 0x1d8af, 0x1d8b0, 0x1d8b1, 0x1d8b2, 0x1d8b3, 0x1d8b4, 0x1d8b5, 0x1d8b6, 0x1d8b7, 0x1d8b8, 0x1d8b9, 0x1d8ba, 0x1d8bb, 0x1d8bc, 0x1d8bd, 0x1d8be, 0x1d8bf, 0x1d8c0, 0x1d8c1, 0x1d8c2, 0x1d8c3, 0x1d8c4, 0x1d8c5, 0x1d8c6, 0x1d8c7, 0x1d8c8, 0x1d8c9, 0x1d8ca, 0x1d8cb, 0x1d8cc, 0x1d8cd, 0x1d8ce, 0x1d8cf, 0x1d8d0, 0x1d8d1, 0x1d8d2, 0x1d8d3, 0x1d8d4, 0x1d8d5, 0x1d8d6, 0x1d8d7, 0x1d8d8, 0x1d8d9, 0x1d8da, 0x1d8db
};

void BM_collation_347(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_347, cps_347 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_347);

uint32_t cps_348[] = {
0x1d8dc, 0x1d8dd, 0x1d8de, 0x1d8df, 0x1d8e0, 0x1d8e1, 0x1d8e2, 0x1d8e3, 0x1d8e4, 0x1d8e5, 0x1d8e6, 0x1d8e7, 0x1d8e8, 0x1d8e9, 0x1d8ea, 0x1d8eb, 0x1d8ec, 0x1d8ed, 0x1d8ee, 0x1d8ef, 0x1d8f0, 0x1d8f1, 0x1d8f2, 0x1d8f3, 0x1d8f4, 0x1d8f5, 0x1d8f6, 0x1d8f7, 0x1d8f8, 0x1d8f9, 0x1d8fa, 0x1d8fb, 0x1d8fc, 0x1d8fd, 0x1d8fe, 0x1d8ff, 0x1d900, 0x1d901, 0x1d902, 0x1d903, 0x1d904, 0x1d905, 0x1d906, 0x1d907, 0x1d908, 0x1d909, 0x1d90a, 0x1d90b, 0x1d90c, 0x1d90d, 0x1d90e, 0x1d90f, 0x1d910, 0x1d911, 0x1d912, 0x1d913, 0x1d914, 0x1d915, 0x1d916, 0x1d917, 0x1d918, 0x1d919, 0x1d91a, 0x1d91b, 0x1d91c, 0x1d91d, 0x1d91e, 0x1d91f, 0x1d920, 0x1d921, 0x1d922, 0x1d923, 0x1d924, 0x1d925, 0x1d926, 0x1d927, 0x1d928, 0x1d929, 0x1d92a, 0x1d92b, 0x1d92c, 0x1d92d, 0x1d92e, 0x1d92f, 0x1d930, 0x1d931, 0x1d932, 0x1d933, 0x1d934, 0x1d935, 0x1d936, 0x1d937, 0x1d938, 0x1d939, 0x1d93a, 0x1d93b, 0x1d93c, 0x1d93d, 0x1d93e, 0x1d93f
};

void BM_collation_348(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_348, cps_348 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_348);

uint32_t cps_349[] = {
0x1d940, 0x1d941, 0x1d942, 0x1d943, 0x1d944, 0x1d945, 0x1d946, 0x1d947, 0x1d948, 0x1d949, 0x1d94a, 0x1d94b, 0x1d94c, 0x1d94d, 0x1d94e, 0x1d94f, 0x1d950, 0x1d951, 0x1d952, 0x1d953, 0x1d954, 0x1d955, 0x1d956, 0x1d957, 0x1d958, 0x1d959, 0x1d95a, 0x1d95b, 0x1d95c, 0x1d95d, 0x1d95e, 0x1d95f, 0x1d960, 0x1d961, 0x1d962, 0x1d963, 0x1d964, 0x1d965, 0x1d966, 0x1d967, 0x1d968, 0x1d969, 0x1d96a, 0x1d96b, 0x1d96c, 0x1d96d, 0x1d96e, 0x1d96f, 0x1d970, 0x1d971, 0x1d972, 0x1d973, 0x1d974, 0x1d975, 0x1d976, 0x1d977, 0x1d978, 0x1d979, 0x1d97a, 0x1d97b, 0x1d97c, 0x1d97d, 0x1d97e, 0x1d97f, 0x1d980, 0x1d981, 0x1d982, 0x1d983, 0x1d984, 0x1d985, 0x1d986, 0x1d987, 0x1d988, 0x1d989, 0x1d98a, 0x1d98b, 0x1d98c, 0x1d98d, 0x1d98e, 0x1d98f, 0x1d990, 0x1d991, 0x1d992, 0x1d993, 0x1d994, 0x1d995, 0x1d996, 0x1d997, 0x1d998, 0x1d999, 0x1d99a, 0x1d99b, 0x1d99c, 0x1d99d, 0x1d99e, 0x1d99f, 0x1d9a0, 0x1d9a1, 0x1d9a2, 0x1d9a3
};

void BM_collation_349(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_349, cps_349 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_349);

uint32_t cps_350[] = {
0x1d9a4, 0x1d9a5, 0x1d9a6, 0x1d9a7, 0x1d9a8, 0x1d9a9, 0x1d9aa, 0x1d9ab, 0x1d9ac, 0x1d9ad, 0x1d9ae, 0x1d9af, 0x1d9b0, 0x1d9b1, 0x1d9b2, 0x1d9b3, 0x1d9b4, 0x1d9b5, 0x1d9b6, 0x1d9b7, 0x1d9b8, 0x1d9b9, 0x1d9ba, 0x1d9bb, 0x1d9bc, 0x1d9bd, 0x1d9be, 0x1d9bf, 0x1d9c0, 0x1d9c1, 0x1d9c2, 0x1d9c3, 0x1d9c4, 0x1d9c5, 0x1d9c6, 0x1d9c7, 0x1d9c8, 0x1d9c9, 0x1d9ca, 0x1d9cb, 0x1d9cc, 0x1d9cd, 0x1d9ce, 0x1d9cf, 0x1d9d0, 0x1d9d1, 0x1d9d2, 0x1d9d3, 0x1d9d4, 0x1d9d5, 0x1d9d6, 0x1d9d7, 0x1d9d8, 0x1d9d9, 0x1d9da, 0x1d9db, 0x1d9dc, 0x1d9dd, 0x1d9de, 0x1d9df, 0x1d9e0, 0x1d9e1, 0x1d9e2, 0x1d9e3, 0x1d9e4, 0x1d9e5, 0x1d9e6, 0x1d9e7, 0x1d9e8, 0x1d9e9, 0x1d9ea, 0x1d9eb, 0x1d9ec, 0x1d9ed, 0x1d9ee, 0x1d9ef, 0x1d9f0, 0x1d9f1, 0x1d9f2, 0x1d9f3, 0x1d9f4, 0x1d9f5, 0x1d9f6, 0x1d9f7, 0x1d9f8, 0x1d9f9, 0x1d9fa, 0x1d9fb, 0x1d9fc, 0x1d9fd, 0x1d9fe, 0x1d9ff, 0x1da00, 0x1da01, 0x1da02, 0x1da03, 0x1da04, 0x1da05, 0x1da06, 0x1da07
};

void BM_collation_350(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_350, cps_350 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_350);

uint32_t cps_351[] = {
0x1da08, 0x1da09, 0x1da0a, 0x1da0b, 0x1da0c, 0x1da0d, 0x1da0e, 0x1da0f, 0x1da10, 0x1da11, 0x1da12, 0x1da13, 0x1da14, 0x1da15, 0x1da16, 0x1da17, 0x1da18, 0x1da19, 0x1da1a, 0x1da1b, 0x1da1c, 0x1da1d, 0x1da1e, 0x1da1f, 0x1da20, 0x1da21, 0x1da22, 0x1da23, 0x1da24, 0x1da25, 0x1da26, 0x1da27, 0x1da28, 0x1da29, 0x1da2a, 0x1da2b, 0x1da2c, 0x1da2d, 0x1da2e, 0x1da2f, 0x1da30, 0x1da31, 0x1da32, 0x1da33, 0x1da34, 0x1da35, 0x1da36, 0x1da37, 0x1da38, 0x1da39, 0x1da3a, 0x1da3b, 0x1da3c, 0x1da3d, 0x1da3e, 0x1da3f, 0x1da40, 0x1da41, 0x1da42, 0x1da43, 0x1da44, 0x1da45, 0x1da46, 0x1da47, 0x1da48, 0x1da49, 0x1da4a, 0x1da4b, 0x1da4c, 0x1da4d, 0x1da4e, 0x1da4f, 0x1da50, 0x1da51, 0x1da52, 0x1da53, 0x1da54, 0x1da55, 0x1da56, 0x1da57, 0x1da58, 0x1da59, 0x1da5a, 0x1da5b, 0x1da5c, 0x1da5d, 0x1da5e, 0x1da5f, 0x1da60, 0x1da61, 0x1da62, 0x1da63, 0x1da64, 0x1da65, 0x1da66, 0x1da67, 0x1da68, 0x1da69, 0x1da6a, 0x1da6b
};

void BM_collation_351(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_351, cps_351 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_351);

uint32_t cps_352[] = {
0x1da6c, 0x1da6d, 0x1da6e, 0x1da6f, 0x1da70, 0x1da71, 0x1da72, 0x1da73, 0x1da74, 0x1da75, 0x1da76, 0x1da77, 0x1da78, 0x1da79, 0x1da7a, 0x1da7b, 0x1da7c, 0x1da7d, 0x1da7e, 0x1da7f, 0x1da80, 0x1da81, 0x1da82, 0x1da83, 0x1da84, 0x1da85, 0x1da86, 0x1da87, 0x1da88, 0x1da89, 0x1da8a, 0x1da8b, 0x1da9b, 0x1da9c, 0x1da9d, 0x1da9e, 0x1da9f, 0x1daa1, 0x1daa2, 0x1daa3, 0x1daa4, 0x1daa5, 0x1daa6, 0x1daa7, 0x1daa8, 0x1daa9, 0x1daaa, 0x1daab, 0x1daac, 0x1daad, 0x1daae, 0x1daaf, 0x1e000, 0x1e001, 0x1e002, 0x1e003, 0x1e004, 0x1e005, 0x1e006, 0x1e008, 0x1e009, 0x1e00a, 0x1e00b, 0x1e00c, 0x1e00d, 0x1e00e, 0x1e00f, 0x1e010, 0x1e011, 0x1e012, 0x1e013, 0x1e014, 0x1e015, 0x1e016, 0x1e017, 0x1e018, 0x1e01b, 0x1e01c, 0x1e01d, 0x1e01e, 0x1e01f, 0x1e020, 0x1e021, 0x1e023, 0x1e024, 0x1e026, 0x1e027, 0x1e028, 0x1e029, 0x1e02a, 0x1e800, 0x1e801, 0x1e802, 0x1e803, 0x1e804, 0x1e805, 0x1e806, 0x1e807, 0x1e808, 0x1e809
};

void BM_collation_352(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_352, cps_352 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_352);

uint32_t cps_353[] = {
0x1e80a, 0x1e80b, 0x1e80c, 0x1e80d, 0x1e80e, 0x1e80f, 0x1e810, 0x1e811, 0x1e812, 0x1e813, 0x1e814, 0x1e815, 0x1e816, 0x1e817, 0x1e818, 0x1e819, 0x1e81a, 0x1e81b, 0x1e81c, 0x1e81d, 0x1e81e, 0x1e81f, 0x1e820, 0x1e821, 0x1e822, 0x1e823, 0x1e824, 0x1e825, 0x1e826, 0x1e827, 0x1e828, 0x1e829, 0x1e82a, 0x1e82b, 0x1e82c, 0x1e82d, 0x1e82e, 0x1e82f, 0x1e830, 0x1e831, 0x1e832, 0x1e833, 0x1e834, 0x1e835, 0x1e836, 0x1e837, 0x1e838, 0x1e839, 0x1e83a, 0x1e83b, 0x1e83c, 0x1e83d, 0x1e83e, 0x1e83f, 0x1e840, 0x1e841, 0x1e842, 0x1e843, 0x1e844, 0x1e845, 0x1e846, 0x1e847, 0x1e848, 0x1e849, 0x1e84a, 0x1e84b, 0x1e84c, 0x1e84d, 0x1e84e, 0x1e84f, 0x1e850, 0x1e851, 0x1e852, 0x1e853, 0x1e854, 0x1e855, 0x1e856, 0x1e857, 0x1e858, 0x1e859, 0x1e85a, 0x1e85b, 0x1e85c, 0x1e85d, 0x1e85e, 0x1e85f, 0x1e860, 0x1e861, 0x1e862, 0x1e863, 0x1e864, 0x1e865, 0x1e866, 0x1e867, 0x1e868, 0x1e869, 0x1e86a, 0x1e86b, 0x1e86c, 0x1e86d
};

void BM_collation_353(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_353, cps_353 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_353);

uint32_t cps_354[] = {
0x1e86e, 0x1e86f, 0x1e870, 0x1e871, 0x1e872, 0x1e873, 0x1e874, 0x1e875, 0x1e876, 0x1e877, 0x1e878, 0x1e879, 0x1e87a, 0x1e87b, 0x1e87c, 0x1e87d, 0x1e87e, 0x1e87f, 0x1e880, 0x1e881, 0x1e882, 0x1e883, 0x1e884, 0x1e885, 0x1e886, 0x1e887, 0x1e888, 0x1e889, 0x1e88a, 0x1e88b, 0x1e88c, 0x1e88d, 0x1e88e, 0x1e88f, 0x1e890, 0x1e891, 0x1e892, 0x1e893, 0x1e894, 0x1e895, 0x1e896, 0x1e897, 0x1e898, 0x1e899, 0x1e89a, 0x1e89b, 0x1e89c, 0x1e89d, 0x1e89e, 0x1e89f, 0x1e8a0, 0x1e8a1, 0x1e8a2, 0x1e8a3, 0x1e8a4, 0x1e8a5, 0x1e8a6, 0x1e8a7, 0x1e8a8, 0x1e8a9, 0x1e8aa, 0x1e8ab, 0x1e8ac, 0x1e8ad, 0x1e8ae, 0x1e8af, 0x1e8b0, 0x1e8b1, 0x1e8b2, 0x1e8b3, 0x1e8b4, 0x1e8b5, 0x1e8b6, 0x1e8b7, 0x1e8b8, 0x1e8b9, 0x1e8ba, 0x1e8bb, 0x1e8bc, 0x1e8bd, 0x1e8be, 0x1e8bf, 0x1e8c0, 0x1e8c1, 0x1e8c2, 0x1e8c3, 0x1e8c4, 0x1e8c7, 0x1e8c8, 0x1e8c9, 0x1e8ca, 0x1e8cb, 0x1e8cc, 0x1e8cd, 0x1e8ce, 0x1e8cf, 0x1e8d0, 0x1e8d1, 0x1e8d2, 0x1e8d3
};

void BM_collation_354(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_354, cps_354 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_354);

uint32_t cps_355[] = {
0x1e8d4, 0x1e8d5, 0x1e8d6, 0x1e900, 0x1e901, 0x1e902, 0x1e903, 0x1e904, 0x1e905, 0x1e906, 0x1e907, 0x1e908, 0x1e909, 0x1e90a, 0x1e90b, 0x1e90c, 0x1e90d, 0x1e90e, 0x1e90f, 0x1e910, 0x1e911, 0x1e912, 0x1e913, 0x1e914, 0x1e915, 0x1e916, 0x1e917, 0x1e918, 0x1e919, 0x1e91a, 0x1e91b, 0x1e91c, 0x1e91d, 0x1e91e, 0x1e91f, 0x1e920, 0x1e921, 0x1e922, 0x1e923, 0x1e924, 0x1e925, 0x1e926, 0x1e927, 0x1e928, 0x1e929, 0x1e92a, 0x1e92b, 0x1e92c, 0x1e92d, 0x1e92e, 0x1e92f, 0x1e930, 0x1e931, 0x1e932, 0x1e933, 0x1e934, 0x1e935, 0x1e936, 0x1e937, 0x1e938, 0x1e939, 0x1e93a, 0x1e93b, 0x1e93c, 0x1e93d, 0x1e93e, 0x1e93f, 0x1e940, 0x1e941, 0x1e942, 0x1e943, 0x1e944, 0x1e945, 0x1e946, 0x1e947, 0x1e948, 0x1e949, 0x1e94a, 0x1e950, 0x1e951, 0x1e952, 0x1e953, 0x1e954, 0x1e955, 0x1e956, 0x1e957, 0x1e958, 0x1e959, 0x1e95e, 0x1e95f, 0x1ee00, 0x1ee01, 0x1ee02, 0x1ee03, 0x1ee05, 0x1ee06, 0x1ee07, 0x1ee08, 0x1ee09, 0x1ee0a
};

void BM_collation_355(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_355, cps_355 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_355);

uint32_t cps_356[] = {
0x1ee0b, 0x1ee0c, 0x1ee0d, 0x1ee0e, 0x1ee0f, 0x1ee10, 0x1ee11, 0x1ee12, 0x1ee13, 0x1ee14, 0x1ee15, 0x1ee16, 0x1ee17, 0x1ee18, 0x1ee19, 0x1ee1a, 0x1ee1b, 0x1ee1c, 0x1ee1d, 0x1ee1e, 0x1ee1f, 0x1ee21, 0x1ee22, 0x1ee24, 0x1ee27, 0x1ee29, 0x1ee2a, 0x1ee2b, 0x1ee2c, 0x1ee2d, 0x1ee2e, 0x1ee2f, 0x1ee30, 0x1ee31, 0x1ee32, 0x1ee34, 0x1ee35, 0x1ee36, 0x1ee37, 0x1ee39, 0x1ee3b, 0x1ee42, 0x1ee47, 0x1ee49, 0x1ee4b, 0x1ee4d, 0x1ee4e, 0x1ee4f, 0x1ee51, 0x1ee52, 0x1ee54, 0x1ee57, 0x1ee59, 0x1ee5b, 0x1ee5d, 0x1ee5f, 0x1ee61, 0x1ee62, 0x1ee64, 0x1ee67, 0x1ee68, 0x1ee69, 0x1ee6a, 0x1ee6c, 0x1ee6d, 0x1ee6e, 0x1ee6f, 0x1ee70, 0x1ee71, 0x1ee72, 0x1ee74, 0x1ee75, 0x1ee76, 0x1ee77, 0x1ee79, 0x1ee7a, 0x1ee7b, 0x1ee7c, 0x1ee7e, 0x1ee80, 0x1ee81, 0x1ee82, 0x1ee83, 0x1ee84, 0x1ee85, 0x1ee86, 0x1ee87, 0x1ee88, 0x1ee89, 0x1ee8b, 0x1ee8c, 0x1ee8d, 0x1ee8e, 0x1ee8f, 0x1ee90, 0x1ee91, 0x1ee92, 0x1ee93, 0x1ee94, 0x1ee95
};

void BM_collation_356(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_356, cps_356 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_356);

uint32_t cps_357[] = {
0x1ee96, 0x1ee97, 0x1ee98, 0x1ee99, 0x1ee9a, 0x1ee9b, 0x1eea1, 0x1eea2, 0x1eea3, 0x1eea5, 0x1eea6, 0x1eea7, 0x1eea8, 0x1eea9, 0x1eeab, 0x1eeac, 0x1eead, 0x1eeae, 0x1eeaf, 0x1eeb0, 0x1eeb1, 0x1eeb2, 0x1eeb3, 0x1eeb4, 0x1eeb5, 0x1eeb6, 0x1eeb7, 0x1eeb8, 0x1eeb9, 0x1eeba, 0x1eebb, 0x1eef0, 0x1eef1, 0x1f000, 0x1f001, 0x1f002, 0x1f003, 0x1f004, 0x1f005, 0x1f006, 0x1f007, 0x1f008, 0x1f009, 0x1f00a, 0x1f00b, 0x1f00c, 0x1f00d, 0x1f00e, 0x1f00f, 0x1f010, 0x1f011, 0x1f012, 0x1f013, 0x1f014, 0x1f015, 0x1f016, 0x1f017, 0x1f018, 0x1f019, 0x1f01a, 0x1f01b, 0x1f01c, 0x1f01d, 0x1f01e, 0x1f01f, 0x1f020, 0x1f021, 0x1f022, 0x1f023, 0x1f024, 0x1f025, 0x1f026, 0x1f027, 0x1f028, 0x1f029, 0x1f02a, 0x1f02b, 0x1f030, 0x1f031, 0x1f032, 0x1f033, 0x1f034, 0x1f035, 0x1f036, 0x1f037, 0x1f038, 0x1f039, 0x1f03a, 0x1f03b, 0x1f03c, 0x1f03d, 0x1f03e, 0x1f03f, 0x1f040, 0x1f041, 0x1f042, 0x1f043, 0x1f044, 0x1f045, 0x1f046
};

void BM_collation_357(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_357, cps_357 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_357);

uint32_t cps_358[] = {
0x1f047, 0x1f048, 0x1f049, 0x1f04a, 0x1f04b, 0x1f04c, 0x1f04d, 0x1f04e, 0x1f04f, 0x1f050, 0x1f051, 0x1f052, 0x1f053, 0x1f054, 0x1f055, 0x1f056, 0x1f057, 0x1f058, 0x1f059, 0x1f05a, 0x1f05b, 0x1f05c, 0x1f05d, 0x1f05e, 0x1f05f, 0x1f060, 0x1f061, 0x1f062, 0x1f063, 0x1f064, 0x1f065, 0x1f066, 0x1f067, 0x1f068, 0x1f069, 0x1f06a, 0x1f06b, 0x1f06c, 0x1f06d, 0x1f06e, 0x1f06f, 0x1f070, 0x1f071, 0x1f072, 0x1f073, 0x1f074, 0x1f075, 0x1f076, 0x1f077, 0x1f078, 0x1f079, 0x1f07a, 0x1f07b, 0x1f07c, 0x1f07d, 0x1f07e, 0x1f07f, 0x1f080, 0x1f081, 0x1f082, 0x1f083, 0x1f084, 0x1f085, 0x1f086, 0x1f087, 0x1f088, 0x1f089, 0x1f08a, 0x1f08b, 0x1f08c, 0x1f08d, 0x1f08e, 0x1f08f, 0x1f090, 0x1f091, 0x1f092, 0x1f093, 0x1f0a0, 0x1f0a1, 0x1f0a2, 0x1f0a3, 0x1f0a4, 0x1f0a5, 0x1f0a6, 0x1f0a7, 0x1f0a8, 0x1f0a9, 0x1f0aa, 0x1f0ab, 0x1f0ac, 0x1f0ad, 0x1f0ae, 0x1f0b1, 0x1f0b2, 0x1f0b3, 0x1f0b4, 0x1f0b5, 0x1f0b6, 0x1f0b7, 0x1f0b8
};

void BM_collation_358(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_358, cps_358 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_358);

uint32_t cps_359[] = {
0x1f0b9, 0x1f0ba, 0x1f0bb, 0x1f0bc, 0x1f0bd, 0x1f0be, 0x1f0bf, 0x1f0c1, 0x1f0c2, 0x1f0c3, 0x1f0c4, 0x1f0c5, 0x1f0c6, 0x1f0c7, 0x1f0c8, 0x1f0c9, 0x1f0ca, 0x1f0cb, 0x1f0cc, 0x1f0cd, 0x1f0ce, 0x1f0cf, 0x1f0d1, 0x1f0d2, 0x1f0d3, 0x1f0d4, 0x1f0d5, 0x1f0d6, 0x1f0d7, 0x1f0d8, 0x1f0d9, 0x1f0da, 0x1f0db, 0x1f0dc, 0x1f0dd, 0x1f0de, 0x1f0df, 0x1f0e0, 0x1f0e1, 0x1f0e2, 0x1f0e3, 0x1f0e4, 0x1f0e5, 0x1f0e6, 0x1f0e7, 0x1f0e8, 0x1f0e9, 0x1f0ea, 0x1f0eb, 0x1f0ec, 0x1f0ed, 0x1f0ee, 0x1f0ef, 0x1f0f0, 0x1f0f1, 0x1f0f2, 0x1f0f3, 0x1f0f4, 0x1f0f5, 0x1f100, 0x1f101, 0x1f102, 0x1f103, 0x1f104, 0x1f105, 0x1f106, 0x1f107, 0x1f108, 0x1f109, 0x1f10a, 0x1f10b, 0x1f10c, 0x1f110, 0x1f111, 0x1f112, 0x1f113, 0x1f114, 0x1f115, 0x1f116, 0x1f117, 0x1f118, 0x1f119, 0x1f11a, 0x1f11b, 0x1f11c, 0x1f11d, 0x1f11e, 0x1f11f, 0x1f120, 0x1f121, 0x1f122, 0x1f123, 0x1f124, 0x1f125, 0x1f126, 0x1f127, 0x1f128, 0x1f129, 0x1f12a, 0x1f12b
};

void BM_collation_359(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_359, cps_359 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_359);

uint32_t cps_360[] = {
0x1f12c, 0x1f12d, 0x1f12e, 0x1f130, 0x1f131, 0x1f132, 0x1f133, 0x1f134, 0x1f135, 0x1f136, 0x1f137, 0x1f138, 0x1f139, 0x1f13a, 0x1f13b, 0x1f13c, 0x1f13d, 0x1f13e, 0x1f13f, 0x1f140, 0x1f141, 0x1f142, 0x1f143, 0x1f144, 0x1f145, 0x1f146, 0x1f147, 0x1f148, 0x1f149, 0x1f14a, 0x1f14b, 0x1f14c, 0x1f14d, 0x1f14e, 0x1f14f, 0x1f150, 0x1f151, 0x1f152, 0x1f153, 0x1f154, 0x1f155, 0x1f156, 0x1f157, 0x1f158, 0x1f159, 0x1f15a, 0x1f15b, 0x1f15c, 0x1f15d, 0x1f15e, 0x1f15f, 0x1f160, 0x1f161, 0x1f162, 0x1f163, 0x1f164, 0x1f165, 0x1f166, 0x1f167, 0x1f168, 0x1f169, 0x1f16a, 0x1f16b, 0x1f170, 0x1f171, 0x1f172, 0x1f173, 0x1f174, 0x1f175, 0x1f176, 0x1f177, 0x1f178, 0x1f179, 0x1f17a, 0x1f17b, 0x1f17c, 0x1f17d, 0x1f17e, 0x1f17f, 0x1f180, 0x1f181, 0x1f182, 0x1f183, 0x1f184, 0x1f185, 0x1f186, 0x1f187, 0x1f188, 0x1f189, 0x1f18a, 0x1f18b, 0x1f18c, 0x1f18d, 0x1f18e, 0x1f18f, 0x1f190, 0x1f191, 0x1f192, 0x1f193, 0x1f194
};

void BM_collation_360(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_360, cps_360 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_360);

uint32_t cps_361[] = {
0x1f195, 0x1f196, 0x1f197, 0x1f198, 0x1f199, 0x1f19a, 0x1f19b, 0x1f19c, 0x1f19d, 0x1f19e, 0x1f19f, 0x1f1a0, 0x1f1a1, 0x1f1a2, 0x1f1a3, 0x1f1a4, 0x1f1a5, 0x1f1a6, 0x1f1a7, 0x1f1a8, 0x1f1a9, 0x1f1aa, 0x1f1ab, 0x1f1ac, 0x1f1e6, 0x1f1e7, 0x1f1e8, 0x1f1e9, 0x1f1ea, 0x1f1eb, 0x1f1ec, 0x1f1ed, 0x1f1ee, 0x1f1ef, 0x1f1f0, 0x1f1f1, 0x1f1f2, 0x1f1f3, 0x1f1f4, 0x1f1f5, 0x1f1f6, 0x1f1f7, 0x1f1f8, 0x1f1f9, 0x1f1fa, 0x1f1fb, 0x1f1fc, 0x1f1fd, 0x1f1fe, 0x1f1ff, 0x1f200, 0x1f201, 0x1f202, 0x1f210, 0x1f211, 0x1f212, 0x1f213, 0x1f214, 0x1f215, 0x1f216, 0x1f217, 0x1f218, 0x1f219, 0x1f21a, 0x1f21b, 0x1f21c, 0x1f21d, 0x1f21e, 0x1f21f, 0x1f220, 0x1f221, 0x1f222, 0x1f223, 0x1f224, 0x1f225, 0x1f226, 0x1f227, 0x1f228, 0x1f229, 0x1f22a, 0x1f22b, 0x1f22c, 0x1f22d, 0x1f22e, 0x1f22f, 0x1f230, 0x1f231, 0x1f232, 0x1f233, 0x1f234, 0x1f235, 0x1f236, 0x1f237, 0x1f238, 0x1f239, 0x1f23a, 0x1f23b, 0x1f240, 0x1f241, 0x1f242
};

void BM_collation_361(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_361, cps_361 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_361);

uint32_t cps_362[] = {
0x1f243, 0x1f244, 0x1f245, 0x1f246, 0x1f247, 0x1f248, 0x1f250, 0x1f251, 0x1f260, 0x1f261, 0x1f262, 0x1f263, 0x1f264, 0x1f265, 0x1f300, 0x1f301, 0x1f302, 0x1f303, 0x1f304, 0x1f305, 0x1f306, 0x1f307, 0x1f308, 0x1f309, 0x1f30a, 0x1f30b, 0x1f30c, 0x1f30d, 0x1f30e, 0x1f30f, 0x1f310, 0x1f311, 0x1f312, 0x1f313, 0x1f314, 0x1f315, 0x1f316, 0x1f317, 0x1f318, 0x1f319, 0x1f31a, 0x1f31b, 0x1f31c, 0x1f31d, 0x1f31e, 0x1f31f, 0x1f320, 0x1f321, 0x1f322, 0x1f323, 0x1f324, 0x1f325, 0x1f326, 0x1f327, 0x1f328, 0x1f329, 0x1f32a, 0x1f32b, 0x1f32c, 0x1f32d, 0x1f32e, 0x1f32f, 0x1f330, 0x1f331, 0x1f332, 0x1f333, 0x1f334, 0x1f335, 0x1f336, 0x1f337, 0x1f338, 0x1f339, 0x1f33a, 0x1f33b, 0x1f33c, 0x1f33d, 0x1f33e, 0x1f33f, 0x1f340, 0x1f341, 0x1f342, 0x1f343, 0x1f344, 0x1f345, 0x1f346, 0x1f347, 0x1f348, 0x1f349, 0x1f34a, 0x1f34b, 0x1f34c, 0x1f34d, 0x1f34e, 0x1f34f, 0x1f350, 0x1f351, 0x1f352, 0x1f353, 0x1f354, 0x1f355
};

void BM_collation_362(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_362, cps_362 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_362);

uint32_t cps_363[] = {
0x1f356, 0x1f357, 0x1f358, 0x1f359, 0x1f35a, 0x1f35b, 0x1f35c, 0x1f35d, 0x1f35e, 0x1f35f, 0x1f360, 0x1f361, 0x1f362, 0x1f363, 0x1f364, 0x1f365, 0x1f366, 0x1f367, 0x1f368, 0x1f369, 0x1f36a, 0x1f36b, 0x1f36c, 0x1f36d, 0x1f36e, 0x1f36f, 0x1f370, 0x1f371, 0x1f372, 0x1f373, 0x1f374, 0x1f375, 0x1f376, 0x1f377, 0x1f378, 0x1f379, 0x1f37a, 0x1f37b, 0x1f37c, 0x1f37d, 0x1f37e, 0x1f37f, 0x1f380, 0x1f381, 0x1f382, 0x1f383, 0x1f384, 0x1f385, 0x1f386, 0x1f387, 0x1f388, 0x1f389, 0x1f38a, 0x1f38b, 0x1f38c, 0x1f38d, 0x1f38e, 0x1f38f, 0x1f390, 0x1f391, 0x1f392, 0x1f393, 0x1f394, 0x1f395, 0x1f396, 0x1f397, 0x1f398, 0x1f399, 0x1f39a, 0x1f39b, 0x1f39c, 0x1f39d, 0x1f39e, 0x1f39f, 0x1f3a0, 0x1f3a1, 0x1f3a2, 0x1f3a3, 0x1f3a4, 0x1f3a5, 0x1f3a6, 0x1f3a7, 0x1f3a8, 0x1f3a9, 0x1f3aa, 0x1f3ab, 0x1f3ac, 0x1f3ad, 0x1f3ae, 0x1f3af, 0x1f3b0, 0x1f3b1, 0x1f3b2, 0x1f3b3, 0x1f3b4, 0x1f3b5, 0x1f3b6, 0x1f3b7, 0x1f3b8, 0x1f3b9
};

void BM_collation_363(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_363, cps_363 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_363);

uint32_t cps_364[] = {
0x1f3ba, 0x1f3bb, 0x1f3bc, 0x1f3bd, 0x1f3be, 0x1f3bf, 0x1f3c0, 0x1f3c1, 0x1f3c2, 0x1f3c3, 0x1f3c4, 0x1f3c5, 0x1f3c6, 0x1f3c7, 0x1f3c8, 0x1f3c9, 0x1f3ca, 0x1f3cb, 0x1f3cc, 0x1f3cd, 0x1f3ce, 0x1f3cf, 0x1f3d0, 0x1f3d1, 0x1f3d2, 0x1f3d3, 0x1f3d4, 0x1f3d5, 0x1f3d6, 0x1f3d7, 0x1f3d8, 0x1f3d9, 0x1f3da, 0x1f3db, 0x1f3dc, 0x1f3dd, 0x1f3de, 0x1f3df, 0x1f3e0, 0x1f3e1, 0x1f3e2, 0x1f3e3, 0x1f3e4, 0x1f3e5, 0x1f3e6, 0x1f3e7, 0x1f3e8, 0x1f3e9, 0x1f3ea, 0x1f3eb, 0x1f3ec, 0x1f3ed, 0x1f3ee, 0x1f3ef, 0x1f3f0, 0x1f3f1, 0x1f3f2, 0x1f3f3, 0x1f3f4, 0x1f3f5, 0x1f3f6, 0x1f3f7, 0x1f3f8, 0x1f3f9, 0x1f3fa, 0x1f3fb, 0x1f3fc, 0x1f3fd, 0x1f3fe, 0x1f3ff, 0x1f400, 0x1f401, 0x1f402, 0x1f403, 0x1f404, 0x1f405, 0x1f406, 0x1f407, 0x1f408, 0x1f409, 0x1f40a, 0x1f40b, 0x1f40c, 0x1f40d, 0x1f40e, 0x1f40f, 0x1f410, 0x1f411, 0x1f412, 0x1f413, 0x1f414, 0x1f415, 0x1f416, 0x1f417, 0x1f418, 0x1f419, 0x1f41a, 0x1f41b, 0x1f41c, 0x1f41d
};

void BM_collation_364(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_364, cps_364 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_364);

uint32_t cps_365[] = {
0x1f41e, 0x1f41f, 0x1f420, 0x1f421, 0x1f422, 0x1f423, 0x1f424, 0x1f425, 0x1f426, 0x1f427, 0x1f428, 0x1f429, 0x1f42a, 0x1f42b, 0x1f42c, 0x1f42d, 0x1f42e, 0x1f42f, 0x1f430, 0x1f431, 0x1f432, 0x1f433, 0x1f434, 0x1f435, 0x1f436, 0x1f437, 0x1f438, 0x1f439, 0x1f43a, 0x1f43b, 0x1f43c, 0x1f43d, 0x1f43e, 0x1f43f, 0x1f440, 0x1f441, 0x1f442, 0x1f443, 0x1f444, 0x1f445, 0x1f446, 0x1f447, 0x1f448, 0x1f449, 0x1f44a, 0x1f44b, 0x1f44c, 0x1f44d, 0x1f44e, 0x1f44f, 0x1f450, 0x1f451, 0x1f452, 0x1f453, 0x1f454, 0x1f455, 0x1f456, 0x1f457, 0x1f458, 0x1f459, 0x1f45a, 0x1f45b, 0x1f45c, 0x1f45d, 0x1f45e, 0x1f45f, 0x1f460, 0x1f461, 0x1f462, 0x1f463, 0x1f464, 0x1f465, 0x1f466, 0x1f467, 0x1f468, 0x1f469, 0x1f46a, 0x1f46b, 0x1f46c, 0x1f46d, 0x1f46e, 0x1f46f, 0x1f470, 0x1f471, 0x1f472, 0x1f473, 0x1f474, 0x1f475, 0x1f476, 0x1f477, 0x1f478, 0x1f479, 0x1f47a, 0x1f47b, 0x1f47c, 0x1f47d, 0x1f47e, 0x1f47f, 0x1f480, 0x1f481
};

void BM_collation_365(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_365, cps_365 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_365);

uint32_t cps_366[] = {
0x1f482, 0x1f483, 0x1f484, 0x1f485, 0x1f486, 0x1f487, 0x1f488, 0x1f489, 0x1f48a, 0x1f48b, 0x1f48c, 0x1f48d, 0x1f48e, 0x1f48f, 0x1f490, 0x1f491, 0x1f492, 0x1f493, 0x1f494, 0x1f495, 0x1f496, 0x1f497, 0x1f498, 0x1f499, 0x1f49a, 0x1f49b, 0x1f49c, 0x1f49d, 0x1f49e, 0x1f49f, 0x1f4a0, 0x1f4a1, 0x1f4a2, 0x1f4a3, 0x1f4a4, 0x1f4a5, 0x1f4a6, 0x1f4a7, 0x1f4a8, 0x1f4a9, 0x1f4aa, 0x1f4ab, 0x1f4ac, 0x1f4ad, 0x1f4ae, 0x1f4af, 0x1f4b0, 0x1f4b1, 0x1f4b2, 0x1f4b3, 0x1f4b4, 0x1f4b5, 0x1f4b6, 0x1f4b7, 0x1f4b8, 0x1f4b9, 0x1f4ba, 0x1f4bb, 0x1f4bc, 0x1f4bd, 0x1f4be, 0x1f4bf, 0x1f4c0, 0x1f4c1, 0x1f4c2, 0x1f4c3, 0x1f4c4, 0x1f4c5, 0x1f4c6, 0x1f4c7, 0x1f4c8, 0x1f4c9, 0x1f4ca, 0x1f4cb, 0x1f4cc, 0x1f4cd, 0x1f4ce, 0x1f4cf, 0x1f4d0, 0x1f4d1, 0x1f4d2, 0x1f4d3, 0x1f4d4, 0x1f4d5, 0x1f4d6, 0x1f4d7, 0x1f4d8, 0x1f4d9, 0x1f4da, 0x1f4db, 0x1f4dc, 0x1f4dd, 0x1f4de, 0x1f4df, 0x1f4e0, 0x1f4e1, 0x1f4e2, 0x1f4e3, 0x1f4e4, 0x1f4e5
};

void BM_collation_366(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_366, cps_366 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_366);

uint32_t cps_367[] = {
0x1f4e6, 0x1f4e7, 0x1f4e8, 0x1f4e9, 0x1f4ea, 0x1f4eb, 0x1f4ec, 0x1f4ed, 0x1f4ee, 0x1f4ef, 0x1f4f0, 0x1f4f1, 0x1f4f2, 0x1f4f3, 0x1f4f4, 0x1f4f5, 0x1f4f6, 0x1f4f7, 0x1f4f8, 0x1f4f9, 0x1f4fa, 0x1f4fb, 0x1f4fc, 0x1f4fd, 0x1f4fe, 0x1f4ff, 0x1f500, 0x1f501, 0x1f502, 0x1f503, 0x1f504, 0x1f505, 0x1f506, 0x1f507, 0x1f508, 0x1f509, 0x1f50a, 0x1f50b, 0x1f50c, 0x1f50d, 0x1f50e, 0x1f50f, 0x1f510, 0x1f511, 0x1f512, 0x1f513, 0x1f514, 0x1f515, 0x1f516, 0x1f517, 0x1f518, 0x1f519, 0x1f51a, 0x1f51b, 0x1f51c, 0x1f51d, 0x1f51e, 0x1f51f, 0x1f520, 0x1f521, 0x1f522, 0x1f523, 0x1f524, 0x1f525, 0x1f526, 0x1f527, 0x1f528, 0x1f529, 0x1f52a, 0x1f52b, 0x1f52c, 0x1f52d, 0x1f52e, 0x1f52f, 0x1f530, 0x1f531, 0x1f532, 0x1f533, 0x1f534, 0x1f535, 0x1f536, 0x1f537, 0x1f538, 0x1f539, 0x1f53a, 0x1f53b, 0x1f53c, 0x1f53d, 0x1f53e, 0x1f53f, 0x1f540, 0x1f541, 0x1f542, 0x1f543, 0x1f544, 0x1f545, 0x1f546, 0x1f547, 0x1f548, 0x1f549
};

void BM_collation_367(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_367, cps_367 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_367);

uint32_t cps_368[] = {
0x1f54a, 0x1f54b, 0x1f54c, 0x1f54d, 0x1f54e, 0x1f54f, 0x1f550, 0x1f551, 0x1f552, 0x1f553, 0x1f554, 0x1f555, 0x1f556, 0x1f557, 0x1f558, 0x1f559, 0x1f55a, 0x1f55b, 0x1f55c, 0x1f55d, 0x1f55e, 0x1f55f, 0x1f560, 0x1f561, 0x1f562, 0x1f563, 0x1f564, 0x1f565, 0x1f566, 0x1f567, 0x1f568, 0x1f569, 0x1f56a, 0x1f56b, 0x1f56c, 0x1f56d, 0x1f56e, 0x1f56f, 0x1f570, 0x1f571, 0x1f572, 0x1f573, 0x1f574, 0x1f575, 0x1f576, 0x1f577, 0x1f578, 0x1f579, 0x1f57a, 0x1f57b, 0x1f57c, 0x1f57d, 0x1f57e, 0x1f57f, 0x1f580, 0x1f581, 0x1f582, 0x1f583, 0x1f584, 0x1f585, 0x1f586, 0x1f587, 0x1f588, 0x1f589, 0x1f58a, 0x1f58b, 0x1f58c, 0x1f58d, 0x1f58e, 0x1f58f, 0x1f590, 0x1f591, 0x1f592, 0x1f593, 0x1f594, 0x1f595, 0x1f596, 0x1f597, 0x1f598, 0x1f599, 0x1f59a, 0x1f59b, 0x1f59c, 0x1f59d, 0x1f59e, 0x1f59f, 0x1f5a0, 0x1f5a1, 0x1f5a2, 0x1f5a3, 0x1f5a4, 0x1f5a5, 0x1f5a6, 0x1f5a7, 0x1f5a8, 0x1f5a9, 0x1f5aa, 0x1f5ab, 0x1f5ac, 0x1f5ad
};

void BM_collation_368(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_368, cps_368 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_368);

uint32_t cps_369[] = {
0x1f5ae, 0x1f5af, 0x1f5b0, 0x1f5b1, 0x1f5b2, 0x1f5b3, 0x1f5b4, 0x1f5b5, 0x1f5b6, 0x1f5b7, 0x1f5b8, 0x1f5b9, 0x1f5ba, 0x1f5bb, 0x1f5bc, 0x1f5bd, 0x1f5be, 0x1f5bf, 0x1f5c0, 0x1f5c1, 0x1f5c2, 0x1f5c3, 0x1f5c4, 0x1f5c5, 0x1f5c6, 0x1f5c7, 0x1f5c8, 0x1f5c9, 0x1f5ca, 0x1f5cb, 0x1f5cc, 0x1f5cd, 0x1f5ce, 0x1f5cf, 0x1f5d0, 0x1f5d1, 0x1f5d2, 0x1f5d3, 0x1f5d4, 0x1f5d5, 0x1f5d6, 0x1f5d7, 0x1f5d8, 0x1f5d9, 0x1f5da, 0x1f5db, 0x1f5dc, 0x1f5dd, 0x1f5de, 0x1f5df, 0x1f5e0, 0x1f5e1, 0x1f5e2, 0x1f5e3, 0x1f5e4, 0x1f5e5, 0x1f5e6, 0x1f5e7, 0x1f5e8, 0x1f5e9, 0x1f5ea, 0x1f5eb, 0x1f5ec, 0x1f5ed, 0x1f5ee, 0x1f5ef, 0x1f5f0, 0x1f5f1, 0x1f5f2, 0x1f5f3, 0x1f5f4, 0x1f5f5, 0x1f5f6, 0x1f5f7, 0x1f5f8, 0x1f5f9, 0x1f5fa, 0x1f5fb, 0x1f5fc, 0x1f5fd, 0x1f5fe, 0x1f5ff, 0x1f600, 0x1f601, 0x1f602, 0x1f603, 0x1f604, 0x1f605, 0x1f606, 0x1f607, 0x1f608, 0x1f609, 0x1f60a, 0x1f60b, 0x1f60c, 0x1f60d, 0x1f60e, 0x1f60f, 0x1f610, 0x1f611
};

void BM_collation_369(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_369, cps_369 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_369);

uint32_t cps_370[] = {
0x1f612, 0x1f613, 0x1f614, 0x1f615, 0x1f616, 0x1f617, 0x1f618, 0x1f619, 0x1f61a, 0x1f61b, 0x1f61c, 0x1f61d, 0x1f61e, 0x1f61f, 0x1f620, 0x1f621, 0x1f622, 0x1f623, 0x1f624, 0x1f625, 0x1f626, 0x1f627, 0x1f628, 0x1f629, 0x1f62a, 0x1f62b, 0x1f62c, 0x1f62d, 0x1f62e, 0x1f62f, 0x1f630, 0x1f631, 0x1f632, 0x1f633, 0x1f634, 0x1f635, 0x1f636, 0x1f637, 0x1f638, 0x1f639, 0x1f63a, 0x1f63b, 0x1f63c, 0x1f63d, 0x1f63e, 0x1f63f, 0x1f640, 0x1f641, 0x1f642, 0x1f643, 0x1f644, 0x1f645, 0x1f646, 0x1f647, 0x1f648, 0x1f649, 0x1f64a, 0x1f64b, 0x1f64c, 0x1f64d, 0x1f64e, 0x1f64f, 0x1f650, 0x1f651, 0x1f652, 0x1f653, 0x1f654, 0x1f655, 0x1f656, 0x1f657, 0x1f658, 0x1f659, 0x1f65a, 0x1f65b, 0x1f65c, 0x1f65d, 0x1f65e, 0x1f65f, 0x1f660, 0x1f661, 0x1f662, 0x1f663, 0x1f664, 0x1f665, 0x1f666, 0x1f667, 0x1f668, 0x1f669, 0x1f66a, 0x1f66b, 0x1f66c, 0x1f66d, 0x1f66e, 0x1f66f, 0x1f670, 0x1f671, 0x1f672, 0x1f673, 0x1f674, 0x1f675
};

void BM_collation_370(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_370, cps_370 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_370);

uint32_t cps_371[] = {
0x1f676, 0x1f677, 0x1f678, 0x1f679, 0x1f67a, 0x1f67b, 0x1f67c, 0x1f67d, 0x1f67e, 0x1f67f, 0x1f680, 0x1f681, 0x1f682, 0x1f683, 0x1f684, 0x1f685, 0x1f686, 0x1f687, 0x1f688, 0x1f689, 0x1f68a, 0x1f68b, 0x1f68c, 0x1f68d, 0x1f68e, 0x1f68f, 0x1f690, 0x1f691, 0x1f692, 0x1f693, 0x1f694, 0x1f695, 0x1f696, 0x1f697, 0x1f698, 0x1f699, 0x1f69a, 0x1f69b, 0x1f69c, 0x1f69d, 0x1f69e, 0x1f69f, 0x1f6a0, 0x1f6a1, 0x1f6a2, 0x1f6a3, 0x1f6a4, 0x1f6a5, 0x1f6a6, 0x1f6a7, 0x1f6a8, 0x1f6a9, 0x1f6aa, 0x1f6ab, 0x1f6ac, 0x1f6ad, 0x1f6ae, 0x1f6af, 0x1f6b0, 0x1f6b1, 0x1f6b2, 0x1f6b3, 0x1f6b4, 0x1f6b5, 0x1f6b6, 0x1f6b7, 0x1f6b8, 0x1f6b9, 0x1f6ba, 0x1f6bb, 0x1f6bc, 0x1f6bd, 0x1f6be, 0x1f6bf, 0x1f6c0, 0x1f6c1, 0x1f6c2, 0x1f6c3, 0x1f6c4, 0x1f6c5, 0x1f6c6, 0x1f6c7, 0x1f6c8, 0x1f6c9, 0x1f6ca, 0x1f6cb, 0x1f6cc, 0x1f6cd, 0x1f6ce, 0x1f6cf, 0x1f6d0, 0x1f6d1, 0x1f6d2, 0x1f6d3, 0x1f6d4, 0x1f6e0, 0x1f6e1, 0x1f6e2, 0x1f6e3, 0x1f6e4
};

void BM_collation_371(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_371, cps_371 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_371);

uint32_t cps_372[] = {
0x1f6e5, 0x1f6e6, 0x1f6e7, 0x1f6e8, 0x1f6e9, 0x1f6ea, 0x1f6eb, 0x1f6ec, 0x1f6f0, 0x1f6f1, 0x1f6f2, 0x1f6f3, 0x1f6f4, 0x1f6f5, 0x1f6f6, 0x1f6f7, 0x1f6f8, 0x1f700, 0x1f701, 0x1f702, 0x1f703, 0x1f704, 0x1f705, 0x1f706, 0x1f707, 0x1f708, 0x1f709, 0x1f70a, 0x1f70b, 0x1f70c, 0x1f70d, 0x1f70e, 0x1f70f, 0x1f710, 0x1f711, 0x1f712, 0x1f713, 0x1f714, 0x1f715, 0x1f716, 0x1f717, 0x1f718, 0x1f719, 0x1f71a, 0x1f71b, 0x1f71c, 0x1f71d, 0x1f71e, 0x1f71f, 0x1f720, 0x1f721, 0x1f722, 0x1f723, 0x1f724, 0x1f725, 0x1f726, 0x1f727, 0x1f728, 0x1f729, 0x1f72a, 0x1f72b, 0x1f72c, 0x1f72d, 0x1f72e, 0x1f72f, 0x1f730, 0x1f731, 0x1f732, 0x1f733, 0x1f734, 0x1f735, 0x1f736, 0x1f737, 0x1f738, 0x1f739, 0x1f73a, 0x1f73b, 0x1f73c, 0x1f73d, 0x1f73e, 0x1f73f, 0x1f740, 0x1f741, 0x1f742, 0x1f743, 0x1f744, 0x1f745, 0x1f746, 0x1f747, 0x1f748, 0x1f749, 0x1f74a, 0x1f74b, 0x1f74c, 0x1f74d, 0x1f74e, 0x1f74f, 0x1f750, 0x1f751, 0x1f752
};

void BM_collation_372(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_372, cps_372 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_372);

uint32_t cps_373[] = {
0x1f753, 0x1f754, 0x1f755, 0x1f756, 0x1f757, 0x1f758, 0x1f759, 0x1f75a, 0x1f75b, 0x1f75c, 0x1f75d, 0x1f75e, 0x1f75f, 0x1f760, 0x1f761, 0x1f762, 0x1f763, 0x1f764, 0x1f765, 0x1f766, 0x1f767, 0x1f768, 0x1f769, 0x1f76a, 0x1f76b, 0x1f76c, 0x1f76d, 0x1f76e, 0x1f76f, 0x1f770, 0x1f771, 0x1f772, 0x1f773, 0x1f780, 0x1f781, 0x1f782, 0x1f783, 0x1f784, 0x1f785, 0x1f786, 0x1f787, 0x1f788, 0x1f789, 0x1f78a, 0x1f78b, 0x1f78c, 0x1f78d, 0x1f78e, 0x1f78f, 0x1f790, 0x1f791, 0x1f792, 0x1f793, 0x1f794, 0x1f795, 0x1f796, 0x1f797, 0x1f798, 0x1f799, 0x1f79a, 0x1f79b, 0x1f79c, 0x1f79d, 0x1f79e, 0x1f79f, 0x1f7a0, 0x1f7a1, 0x1f7a2, 0x1f7a3, 0x1f7a4, 0x1f7a5, 0x1f7a6, 0x1f7a7, 0x1f7a8, 0x1f7a9, 0x1f7aa, 0x1f7ab, 0x1f7ac, 0x1f7ad, 0x1f7ae, 0x1f7af, 0x1f7b0, 0x1f7b1, 0x1f7b2, 0x1f7b3, 0x1f7b4, 0x1f7b5, 0x1f7b6, 0x1f7b7, 0x1f7b8, 0x1f7b9, 0x1f7ba, 0x1f7bb, 0x1f7bc, 0x1f7bd, 0x1f7be, 0x1f7bf, 0x1f7c0, 0x1f7c1, 0x1f7c2
};

void BM_collation_373(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_373, cps_373 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_373);

uint32_t cps_374[] = {
0x1f7c3, 0x1f7c4, 0x1f7c5, 0x1f7c6, 0x1f7c7, 0x1f7c8, 0x1f7c9, 0x1f7ca, 0x1f7cb, 0x1f7cc, 0x1f7cd, 0x1f7ce, 0x1f7cf, 0x1f7d0, 0x1f7d1, 0x1f7d2, 0x1f7d3, 0x1f7d4, 0x1f800, 0x1f801, 0x1f802, 0x1f803, 0x1f804, 0x1f805, 0x1f806, 0x1f807, 0x1f808, 0x1f809, 0x1f80a, 0x1f80b, 0x1f810, 0x1f811, 0x1f812, 0x1f813, 0x1f814, 0x1f815, 0x1f816, 0x1f817, 0x1f818, 0x1f819, 0x1f81a, 0x1f81b, 0x1f81c, 0x1f81d, 0x1f81e, 0x1f81f, 0x1f820, 0x1f821, 0x1f822, 0x1f823, 0x1f824, 0x1f825, 0x1f826, 0x1f827, 0x1f828, 0x1f829, 0x1f82a, 0x1f82b, 0x1f82c, 0x1f82d, 0x1f82e, 0x1f82f, 0x1f830, 0x1f831, 0x1f832, 0x1f833, 0x1f834, 0x1f835, 0x1f836, 0x1f837, 0x1f838, 0x1f839, 0x1f83a, 0x1f83b, 0x1f83c, 0x1f83d, 0x1f83e, 0x1f83f, 0x1f840, 0x1f841, 0x1f842, 0x1f843, 0x1f844, 0x1f845, 0x1f846, 0x1f847, 0x1f850, 0x1f851, 0x1f852, 0x1f853, 0x1f854, 0x1f855, 0x1f856, 0x1f857, 0x1f858, 0x1f859, 0x1f860, 0x1f861, 0x1f862, 0x1f863
};

void BM_collation_374(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_374, cps_374 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_374);

uint32_t cps_375[] = {
0x1f864, 0x1f865, 0x1f866, 0x1f867, 0x1f868, 0x1f869, 0x1f86a, 0x1f86b, 0x1f86c, 0x1f86d, 0x1f86e, 0x1f86f, 0x1f870, 0x1f871, 0x1f872, 0x1f873, 0x1f874, 0x1f875, 0x1f876, 0x1f877, 0x1f878, 0x1f879, 0x1f87a, 0x1f87b, 0x1f87c, 0x1f87d, 0x1f87e, 0x1f87f, 0x1f880, 0x1f881, 0x1f882, 0x1f883, 0x1f884, 0x1f885, 0x1f886, 0x1f887, 0x1f890, 0x1f891, 0x1f892, 0x1f893, 0x1f894, 0x1f895, 0x1f896, 0x1f897, 0x1f898, 0x1f899, 0x1f89a, 0x1f89b, 0x1f89c, 0x1f89d, 0x1f89e, 0x1f89f, 0x1f8a0, 0x1f8a1, 0x1f8a2, 0x1f8a3, 0x1f8a4, 0x1f8a5, 0x1f8a6, 0x1f8a7, 0x1f8a8, 0x1f8a9, 0x1f8aa, 0x1f8ab, 0x1f8ac, 0x1f8ad, 0x1f900, 0x1f901, 0x1f902, 0x1f903, 0x1f904, 0x1f905, 0x1f906, 0x1f907, 0x1f908, 0x1f909, 0x1f90a, 0x1f90b, 0x1f910, 0x1f911, 0x1f912, 0x1f913, 0x1f914, 0x1f915, 0x1f916, 0x1f917, 0x1f918, 0x1f919, 0x1f91a, 0x1f91b, 0x1f91c, 0x1f91d, 0x1f91e, 0x1f91f, 0x1f920, 0x1f921, 0x1f922, 0x1f923, 0x1f924, 0x1f925
};

void BM_collation_375(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_375, cps_375 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_375);

uint32_t cps_376[] = {
0x1f926, 0x1f927, 0x1f928, 0x1f929, 0x1f92a, 0x1f92b, 0x1f92c, 0x1f92d, 0x1f92e, 0x1f92f, 0x1f930, 0x1f931, 0x1f932, 0x1f933, 0x1f934, 0x1f935, 0x1f936, 0x1f937, 0x1f938, 0x1f939, 0x1f93a, 0x1f93b, 0x1f93c, 0x1f93d, 0x1f93e, 0x1f940, 0x1f941, 0x1f942, 0x1f943, 0x1f944, 0x1f945, 0x1f946, 0x1f947, 0x1f948, 0x1f949, 0x1f94a, 0x1f94b, 0x1f94c, 0x1f950, 0x1f951, 0x1f952, 0x1f953, 0x1f954, 0x1f955, 0x1f956, 0x1f957, 0x1f958, 0x1f959, 0x1f95a, 0x1f95b, 0x1f95c, 0x1f95d, 0x1f95e, 0x1f95f, 0x1f960, 0x1f961, 0x1f962, 0x1f963, 0x1f964, 0x1f965, 0x1f966, 0x1f967, 0x1f968, 0x1f969, 0x1f96a, 0x1f96b, 0x1f980, 0x1f981, 0x1f982, 0x1f983, 0x1f984, 0x1f985, 0x1f986, 0x1f987, 0x1f988, 0x1f989, 0x1f98a, 0x1f98b, 0x1f98c, 0x1f98d, 0x1f98e, 0x1f98f, 0x1f990, 0x1f991, 0x1f992, 0x1f993, 0x1f994, 0x1f995, 0x1f996, 0x1f997, 0x1f9c0, 0x1f9d0, 0x1f9d1, 0x1f9d2, 0x1f9d3, 0x1f9d4, 0x1f9d5, 0x1f9d6, 0x1f9d7, 0x1f9d8
};

void BM_collation_376(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_376, cps_376 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_376);

uint32_t cps_377[] = {
0x1f9d9, 0x1f9da, 0x1f9db, 0x1f9dc, 0x1f9dd, 0x1f9de, 0x1f9df, 0x1f9e0, 0x1f9e1, 0x1f9e2, 0x1f9e3, 0x1f9e4, 0x1f9e5, 0x1f9e6, 0x2f800, 0x2f801, 0x2f802, 0x2f803, 0x2f804, 0x2f805, 0x2f806, 0x2f807, 0x2f808, 0x2f809, 0x2f80a, 0x2f80b, 0x2f80c, 0x2f80d, 0x2f80e, 0x2f80f, 0x2f810, 0x2f811, 0x2f812, 0x2f813, 0x2f814, 0x2f815, 0x2f816, 0x2f817, 0x2f818, 0x2f819, 0x2f81a, 0x2f81b, 0x2f81c, 0x2f81d, 0x2f81e, 0x2f81f, 0x2f820, 0x2f821, 0x2f822, 0x2f823, 0x2f824, 0x2f825, 0x2f826, 0x2f827, 0x2f828, 0x2f829, 0x2f82a, 0x2f82b, 0x2f82c, 0x2f82d, 0x2f82e, 0x2f82f, 0x2f830, 0x2f831, 0x2f832, 0x2f833, 0x2f834, 0x2f835, 0x2f836, 0x2f837, 0x2f838, 0x2f839, 0x2f83a, 0x2f83b, 0x2f83c, 0x2f83d, 0x2f83e, 0x2f83f, 0x2f840, 0x2f841, 0x2f842, 0x2f843, 0x2f844, 0x2f845, 0x2f846, 0x2f847, 0x2f848, 0x2f849, 0x2f84a, 0x2f84b, 0x2f84c, 0x2f84d, 0x2f84e, 0x2f84f, 0x2f850, 0x2f851, 0x2f852, 0x2f853, 0x2f854, 0x2f855
};

void BM_collation_377(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_377, cps_377 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_377);

uint32_t cps_378[] = {
0x2f856, 0x2f857, 0x2f858, 0x2f859, 0x2f85a, 0x2f85b, 0x2f85c, 0x2f85d, 0x2f85e, 0x2f85f, 0x2f860, 0x2f861, 0x2f862, 0x2f863, 0x2f864, 0x2f865, 0x2f866, 0x2f867, 0x2f868, 0x2f869, 0x2f86a, 0x2f86b, 0x2f86c, 0x2f86d, 0x2f86e, 0x2f86f, 0x2f870, 0x2f871, 0x2f872, 0x2f873, 0x2f874, 0x2f875, 0x2f876, 0x2f877, 0x2f878, 0x2f879, 0x2f87a, 0x2f87b, 0x2f87c, 0x2f87d, 0x2f87e, 0x2f87f, 0x2f880, 0x2f881, 0x2f882, 0x2f883, 0x2f884, 0x2f885, 0x2f886, 0x2f887, 0x2f888, 0x2f889, 0x2f88a, 0x2f88b, 0x2f88c, 0x2f88d, 0x2f88e, 0x2f88f, 0x2f890, 0x2f891, 0x2f892, 0x2f893, 0x2f894, 0x2f895, 0x2f896, 0x2f897, 0x2f898, 0x2f899, 0x2f89a, 0x2f89b, 0x2f89c, 0x2f89d, 0x2f89e, 0x2f89f, 0x2f8a0, 0x2f8a1, 0x2f8a2, 0x2f8a3, 0x2f8a4, 0x2f8a5, 0x2f8a6, 0x2f8a7, 0x2f8a8, 0x2f8a9, 0x2f8aa, 0x2f8ab, 0x2f8ac, 0x2f8ad, 0x2f8ae, 0x2f8af, 0x2f8b0, 0x2f8b1, 0x2f8b2, 0x2f8b3, 0x2f8b4, 0x2f8b5, 0x2f8b6, 0x2f8b7, 0x2f8b8, 0x2f8b9
};

void BM_collation_378(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_378, cps_378 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_378);

uint32_t cps_379[] = {
0x2f8ba, 0x2f8bb, 0x2f8bc, 0x2f8bd, 0x2f8be, 0x2f8bf, 0x2f8c0, 0x2f8c1, 0x2f8c2, 0x2f8c3, 0x2f8c4, 0x2f8c5, 0x2f8c6, 0x2f8c7, 0x2f8c8, 0x2f8c9, 0x2f8ca, 0x2f8cb, 0x2f8cc, 0x2f8cd, 0x2f8ce, 0x2f8cf, 0x2f8d0, 0x2f8d1, 0x2f8d2, 0x2f8d3, 0x2f8d4, 0x2f8d5, 0x2f8d6, 0x2f8d7, 0x2f8d8, 0x2f8d9, 0x2f8da, 0x2f8db, 0x2f8dc, 0x2f8dd, 0x2f8de, 0x2f8df, 0x2f8e0, 0x2f8e1, 0x2f8e2, 0x2f8e3, 0x2f8e4, 0x2f8e5, 0x2f8e6, 0x2f8e7, 0x2f8e8, 0x2f8e9, 0x2f8ea, 0x2f8eb, 0x2f8ec, 0x2f8ed, 0x2f8ee, 0x2f8ef, 0x2f8f0, 0x2f8f1, 0x2f8f2, 0x2f8f3, 0x2f8f4, 0x2f8f5, 0x2f8f6, 0x2f8f7, 0x2f8f8, 0x2f8f9, 0x2f8fa, 0x2f8fb, 0x2f8fc, 0x2f8fd, 0x2f8fe, 0x2f8ff, 0x2f900, 0x2f901, 0x2f902, 0x2f903, 0x2f904, 0x2f905, 0x2f906, 0x2f907, 0x2f908, 0x2f909, 0x2f90a, 0x2f90b, 0x2f90c, 0x2f90d, 0x2f90e, 0x2f90f, 0x2f910, 0x2f911, 0x2f912, 0x2f913, 0x2f914, 0x2f915, 0x2f916, 0x2f917, 0x2f918, 0x2f919, 0x2f91a, 0x2f91b, 0x2f91c, 0x2f91d
};

void BM_collation_379(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_379, cps_379 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_379);

uint32_t cps_380[] = {
0x2f91e, 0x2f91f, 0x2f920, 0x2f921, 0x2f922, 0x2f923, 0x2f924, 0x2f925, 0x2f926, 0x2f927, 0x2f928, 0x2f929, 0x2f92a, 0x2f92b, 0x2f92c, 0x2f92d, 0x2f92e, 0x2f92f, 0x2f930, 0x2f931, 0x2f932, 0x2f933, 0x2f934, 0x2f935, 0x2f936, 0x2f937, 0x2f938, 0x2f939, 0x2f93a, 0x2f93b, 0x2f93c, 0x2f93d, 0x2f93e, 0x2f93f, 0x2f940, 0x2f941, 0x2f942, 0x2f943, 0x2f944, 0x2f945, 0x2f946, 0x2f947, 0x2f948, 0x2f949, 0x2f94a, 0x2f94b, 0x2f94c, 0x2f94d, 0x2f94e, 0x2f94f, 0x2f950, 0x2f951, 0x2f952, 0x2f953, 0x2f954, 0x2f955, 0x2f956, 0x2f957, 0x2f958, 0x2f959, 0x2f95a, 0x2f95b, 0x2f95c, 0x2f95d, 0x2f95e, 0x2f95f, 0x2f960, 0x2f961, 0x2f962, 0x2f963, 0x2f964, 0x2f965, 0x2f966, 0x2f967, 0x2f968, 0x2f969, 0x2f96a, 0x2f96b, 0x2f96c, 0x2f96d, 0x2f96e, 0x2f96f, 0x2f970, 0x2f971, 0x2f972, 0x2f973, 0x2f974, 0x2f975, 0x2f976, 0x2f977, 0x2f978, 0x2f979, 0x2f97a, 0x2f97b, 0x2f97c, 0x2f97d, 0x2f97e, 0x2f97f, 0x2f980, 0x2f981
};

void BM_collation_380(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_380, cps_380 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_380);

uint32_t cps_381[] = {
0x2f982, 0x2f983, 0x2f984, 0x2f985, 0x2f986, 0x2f987, 0x2f988, 0x2f989, 0x2f98a, 0x2f98b, 0x2f98c, 0x2f98d, 0x2f98e, 0x2f98f, 0x2f990, 0x2f991, 0x2f992, 0x2f993, 0x2f994, 0x2f995, 0x2f996, 0x2f997, 0x2f998, 0x2f999, 0x2f99a, 0x2f99b, 0x2f99c, 0x2f99d, 0x2f99e, 0x2f99f, 0x2f9a0, 0x2f9a1, 0x2f9a2, 0x2f9a3, 0x2f9a4, 0x2f9a5, 0x2f9a6, 0x2f9a7, 0x2f9a8, 0x2f9a9, 0x2f9aa, 0x2f9ab, 0x2f9ac, 0x2f9ad, 0x2f9ae, 0x2f9af, 0x2f9b0, 0x2f9b1, 0x2f9b2, 0x2f9b3, 0x2f9b4, 0x2f9b5, 0x2f9b6, 0x2f9b7, 0x2f9b8, 0x2f9b9, 0x2f9ba, 0x2f9bb, 0x2f9bc, 0x2f9bd, 0x2f9be, 0x2f9bf, 0x2f9c0, 0x2f9c1, 0x2f9c2, 0x2f9c3, 0x2f9c4, 0x2f9c5, 0x2f9c6, 0x2f9c7, 0x2f9c8, 0x2f9c9, 0x2f9ca, 0x2f9cb, 0x2f9cc, 0x2f9cd, 0x2f9ce, 0x2f9cf, 0x2f9d0, 0x2f9d1, 0x2f9d2, 0x2f9d3, 0x2f9d4, 0x2f9d5, 0x2f9d6, 0x2f9d7, 0x2f9d8, 0x2f9d9, 0x2f9da, 0x2f9db, 0x2f9dc, 0x2f9dd, 0x2f9de, 0x2f9df, 0x2f9e0, 0x2f9e1, 0x2f9e2, 0x2f9e3, 0x2f9e4, 0x2f9e5
};

void BM_collation_381(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_381, cps_381 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_381);

uint32_t cps_382[] = {
0x2f9e6, 0x2f9e7, 0x2f9e8, 0x2f9e9, 0x2f9ea, 0x2f9eb, 0x2f9ec, 0x2f9ed, 0x2f9ee, 0x2f9ef, 0x2f9f0, 0x2f9f1, 0x2f9f2, 0x2f9f3, 0x2f9f4, 0x2f9f5, 0x2f9f6, 0x2f9f7, 0x2f9f8, 0x2f9f9, 0x2f9fa, 0x2f9fb, 0x2f9fc, 0x2f9fd, 0x2f9fe, 0x2f9ff, 0x2fa00, 0x2fa01, 0x2fa02, 0x2fa03, 0x2fa04, 0x2fa05, 0x2fa06, 0x2fa07, 0x2fa08, 0x2fa09, 0x2fa0a, 0x2fa0b, 0x2fa0c, 0x2fa0d, 0x2fa0e, 0x2fa0f, 0x2fa10, 0x2fa11, 0x2fa12, 0x2fa13, 0x2fa14, 0x2fa15, 0x2fa16, 0x2fa17, 0x2fa18, 0x2fa19, 0x2fa1a, 0x2fa1b, 0x2fa1c, 0x2fa1d, 0xe0001, 0xe0020, 0xe0021, 0xe0022, 0xe0023, 0xe0024, 0xe0025, 0xe0026, 0xe0027, 0xe0028, 0xe0029, 0xe002a, 0xe002b, 0xe002c, 0xe002d, 0xe002e, 0xe002f, 0xe0030, 0xe0031, 0xe0032, 0xe0033, 0xe0034, 0xe0035, 0xe0036, 0xe0037, 0xe0038, 0xe0039, 0xe003a, 0xe003b, 0xe003c, 0xe003d, 0xe003e, 0xe003f, 0xe0040, 0xe0041, 0xe0042, 0xe0043, 0xe0044, 0xe0045, 0xe0046, 0xe0047, 0xe0048, 0xe0049, 0xe004a
};

void BM_collation_382(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_382, cps_382 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_382);

uint32_t cps_383[] = {
0xe004b, 0xe004c, 0xe004d, 0xe004e, 0xe004f, 0xe0050, 0xe0051, 0xe0052, 0xe0053, 0xe0054, 0xe0055, 0xe0056, 0xe0057, 0xe0058, 0xe0059, 0xe005a, 0xe005b, 0xe005c, 0xe005d, 0xe005e, 0xe005f, 0xe0060, 0xe0061, 0xe0062, 0xe0063, 0xe0064, 0xe0065, 0xe0066, 0xe0067, 0xe0068, 0xe0069, 0xe006a, 0xe006b, 0xe006c, 0xe006d, 0xe006e, 0xe006f, 0xe0070, 0xe0071, 0xe0072, 0xe0073, 0xe0074, 0xe0075, 0xe0076, 0xe0077, 0xe0078, 0xe0079, 0xe007a, 0xe007b, 0xe007c, 0xe007d, 0xe007e, 0xe007f, 0xe0100, 0xe0101, 0xe0102, 0xe0103, 0xe0104, 0xe0105, 0xe0106, 0xe0107, 0xe0108, 0xe0109, 0xe010a, 0xe010b, 0xe010c, 0xe010d, 0xe010e, 0xe010f, 0xe0110, 0xe0111, 0xe0112, 0xe0113, 0xe0114, 0xe0115, 0xe0116, 0xe0117, 0xe0118, 0xe0119, 0xe011a, 0xe011b, 0xe011c, 0xe011d, 0xe011e, 0xe011f, 0xe0120, 0xe0121, 0xe0122, 0xe0123, 0xe0124, 0xe0125, 0xe0126, 0xe0127, 0xe0128, 0xe0129, 0xe012a, 0xe012b, 0xe012c, 0xe012d, 0xe012e
};

void BM_collation_383(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_383, cps_383 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_383);

uint32_t cps_384[] = {
0xe012f, 0xe0130, 0xe0131, 0xe0132, 0xe0133, 0xe0134, 0xe0135, 0xe0136, 0xe0137, 0xe0138, 0xe0139, 0xe013a, 0xe013b, 0xe013c, 0xe013d, 0xe013e, 0xe013f, 0xe0140, 0xe0141, 0xe0142, 0xe0143, 0xe0144, 0xe0145, 0xe0146, 0xe0147, 0xe0148, 0xe0149, 0xe014a, 0xe014b, 0xe014c, 0xe014d, 0xe014e, 0xe014f, 0xe0150, 0xe0151, 0xe0152, 0xe0153, 0xe0154, 0xe0155, 0xe0156, 0xe0157, 0xe0158, 0xe0159, 0xe015a, 0xe015b, 0xe015c, 0xe015d, 0xe015e, 0xe015f, 0xe0160, 0xe0161, 0xe0162, 0xe0163, 0xe0164, 0xe0165, 0xe0166, 0xe0167, 0xe0168, 0xe0169, 0xe016a, 0xe016b, 0xe016c, 0xe016d, 0xe016e, 0xe016f, 0xe0170, 0xe0171, 0xe0172, 0xe0173, 0xe0174, 0xe0175, 0xe0176, 0xe0177, 0xe0178, 0xe0179, 0xe017a, 0xe017b, 0xe017c, 0xe017d, 0xe017e, 0xe017f, 0xe0180, 0xe0181, 0xe0182, 0xe0183, 0xe0184, 0xe0185, 0xe0186, 0xe0187, 0xe0188, 0xe0189, 0xe018a, 0xe018b, 0xe018c, 0xe018d, 0xe018e, 0xe018f, 0xe0190, 0xe0191, 0xe0192
};

void BM_collation_384(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_384, cps_384 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_384);



BENCHMARK_MAIN()
