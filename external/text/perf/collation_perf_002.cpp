// Copyright (C) 2020 T. Zachary Laine
//
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// Warning! This file is autogenerated.
#include <boost/text/collate.hpp>
#include <boost/text/collation_table.hpp>

#include <benchmark/benchmark.h>

boost::text::detail::collation_trie_t const & trie()
{
    static auto const retval = boost::text::detail::make_default_trie();
    return retval;
}

boost::text::collation_table const & table()
{
    static auto const retval = boost::text::default_collation_table();
    return retval;
}

uint32_t cps_200[] = {
0x11154, 0x11155, 0x11156, 0x11157, 0x11158, 0x11159, 0x1115a, 0x1115b, 0x1115c, 0x1115d, 0x1115e, 0x1115f, 0x11160, 0x11161, 0x11162, 0x11163, 0x11164, 0x11165, 0x11166, 0x11167, 0x11168, 0x11169, 0x1116a, 0x1116b, 0x1116c, 0x1116d, 0x1116e, 0x1116f, 0x11170, 0x11171, 0x11172, 0x11173, 0x11174, 0x11175, 0x11176, 0x11180, 0x11181, 0x11182, 0x11183, 0x11184, 0x11185, 0x11186, 0x11187, 0x11188, 0x11189, 0x1118a, 0x1118b, 0x1118c, 0x1118d, 0x1118e, 0x1118f, 0x11190, 0x11191, 0x11192, 0x11193, 0x11194, 0x11195, 0x11196, 0x11197, 0x11198, 0x11199, 0x1119a, 0x1119b, 0x1119c, 0x1119d, 0x1119e, 0x1119f, 0x111a0, 0x111a1, 0x111a2, 0x111a3, 0x111a4, 0x111a5, 0x111a6, 0x111a7, 0x111a8, 0x111a9, 0x111aa, 0x111ab, 0x111ac, 0x111ad, 0x111ae, 0x111af, 0x111b0, 0x111b1, 0x111b2, 0x111b3, 0x111b4, 0x111b5, 0x111b6, 0x111b7, 0x111b8, 0x111b9, 0x111ba, 0x111bb, 0x111bc, 0x111bd, 0x111be, 0x111bf, 0x111c0
};

void BM_collation_200(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_200, cps_200 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_200);

uint32_t cps_201[] = {
0x111c1, 0x111c2, 0x111c3, 0x111c4, 0x111c5, 0x111c6, 0x111c7, 0x111c8, 0x111c9, 0x111ca, 0x111cb, 0x111cc, 0x111cd, 0x111d0, 0x111d1, 0x111d2, 0x111d3, 0x111d4, 0x111d5, 0x111d6, 0x111d7, 0x111d8, 0x111d9, 0x111da, 0x111db, 0x111dc, 0x111dd, 0x111de, 0x111df, 0x111e1, 0x111e2, 0x111e3, 0x111e4, 0x111e5, 0x111e6, 0x111e7, 0x111e8, 0x111e9, 0x111ea, 0x111eb, 0x111ec, 0x111ed, 0x111ee, 0x111ef, 0x111f0, 0x111f1, 0x111f2, 0x111f3, 0x111f4, 0x11200, 0x11201, 0x11202, 0x11203, 0x11204, 0x11205, 0x11206, 0x11207, 0x11208, 0x11209, 0x1120a, 0x1120b, 0x1120c, 0x1120d, 0x1120e, 0x1120f, 0x11210, 0x11211, 0x11213, 0x11214, 0x11215, 0x11216, 0x11217, 0x11218, 0x11219, 0x1121a, 0x1121b, 0x1121c, 0x1121d, 0x1121e, 0x1121f, 0x11220, 0x11221, 0x11222, 0x11223, 0x11224, 0x11225, 0x11226, 0x11227, 0x11228, 0x11229, 0x1122a, 0x1122b, 0x1122c, 0x1122d, 0x1122e, 0x1122f, 0x11230, 0x11231, 0x11232, 0x11233
};

void BM_collation_201(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_201, cps_201 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_201);

uint32_t cps_202[] = {
0x11234, 0x11235, 0x11236, 0x11237, 0x11238, 0x11239, 0x1123a, 0x1123b, 0x1123c, 0x1123d, 0x1123e, 0x11280, 0x11281, 0x11282, 0x11283, 0x11284, 0x11285, 0x11286, 0x11288, 0x1128a, 0x1128b, 0x1128c, 0x1128d, 0x1128f, 0x11290, 0x11291, 0x11292, 0x11293, 0x11294, 0x11295, 0x11296, 0x11297, 0x11298, 0x11299, 0x1129a, 0x1129b, 0x1129c, 0x1129d, 0x1129f, 0x112a0, 0x112a1, 0x112a2, 0x112a3, 0x112a4, 0x112a5, 0x112a6, 0x112a7, 0x112a8, 0x112a9, 0x112b0, 0x112b1, 0x112b2, 0x112b3, 0x112b4, 0x112b5, 0x112b6, 0x112b7, 0x112b8, 0x112b9, 0x112ba, 0x112bb, 0x112bc, 0x112bd, 0x112be, 0x112bf, 0x112c0, 0x112c1, 0x112c2, 0x112c3, 0x112c4, 0x112c5, 0x112c6, 0x112c7, 0x112c8, 0x112c9, 0x112ca, 0x112cb, 0x112cc, 0x112cd, 0x112ce, 0x112cf, 0x112d0, 0x112d1, 0x112d2, 0x112d3, 0x112d4, 0x112d5, 0x112d6, 0x112d7, 0x112d8, 0x112d9, 0x112da, 0x112db, 0x112dc, 0x112dd, 0x112de, 0x112df, 0x112e0, 0x112e1, 0x112e2
};

void BM_collation_202(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_202, cps_202 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_202);

uint32_t cps_203[] = {
0x112e3, 0x112e4, 0x112e5, 0x112e6, 0x112e7, 0x112e8, 0x112e9, 0x112ea, 0x112f0, 0x112f1, 0x112f2, 0x112f3, 0x112f4, 0x112f5, 0x112f6, 0x112f7, 0x112f8, 0x112f9, 0x11300, 0x11301, 0x11302, 0x11303, 0x11305, 0x11306, 0x11307, 0x11308, 0x11309, 0x1130a, 0x1130b, 0x1130c, 0x1130f, 0x11310, 0x11313, 0x11314, 0x11315, 0x11316, 0x11317, 0x11318, 0x11319, 0x1131a, 0x1131b, 0x1131c, 0x1131d, 0x1131e, 0x1131f, 0x11320, 0x11321, 0x11322, 0x11323, 0x11324, 0x11325, 0x11326, 0x11327, 0x11328, 0x1132a, 0x1132b, 0x1132c, 0x1132d, 0x1132e, 0x1132f, 0x11330, 0x11332, 0x11333, 0x11335, 0x11336, 0x11337, 0x11338, 0x11339, 0x1133c, 0x1133d, 0x1133e, 0x1133f, 0x11340, 0x11341, 0x11342, 0x11343, 0x11344, 0x11347, 0x11347, 0x1133e, 0x11347, 0x11357, 0x11348, 0x1134b, 0x1134c, 0x1134d, 0x11350, 0x11357, 0x1135d, 0x1135e, 0x1135f, 0x11360, 0x11361, 0x11362, 0x11363, 0x11366, 0x11367, 0x11368, 0x11369, 0x1136a, 0x1136b, 0x1136c
};

void BM_collation_203(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_203, cps_203 + 102, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_203);

uint32_t cps_204[] = {
0x11370, 0x11371, 0x11372, 0x11373, 0x11374, 0x11400, 0x11401, 0x11402, 0x11403, 0x11404, 0x11405, 0x11406, 0x11407, 0x11408, 0x11409, 0x1140a, 0x1140b, 0x1140c, 0x1140d, 0x1140e, 0x1140f, 0x11410, 0x11411, 0x11412, 0x11413, 0x11414, 0x11415, 0x11416, 0x11417, 0x11418, 0x11419, 0x1141a, 0x1141b, 0x1141c, 0x1141d, 0x1141e, 0x1141f, 0x11420, 0x11421, 0x11422, 0x11423, 0x11424, 0x11425, 0x11426, 0x11427, 0x11428, 0x11429, 0x1142a, 0x1142b, 0x1142c, 0x1142d, 0x1142e, 0x1142f, 0x11430, 0x11431, 0x11432, 0x11433, 0x11434, 0x11435, 0x11436, 0x11437, 0x11438, 0x11439, 0x1143a, 0x1143b, 0x1143c, 0x1143d, 0x1143e, 0x1143f, 0x11440, 0x11441, 0x11442, 0x11443, 0x11444, 0x11445, 0x11446, 0x11447, 0x11448, 0x11449, 0x1144a, 0x1144b, 0x1144c, 0x1144d, 0x1144e, 0x1144f, 0x11450, 0x11451, 0x11452, 0x11453, 0x11454, 0x11455, 0x11456, 0x11457, 0x11458, 0x11459, 0x1145b, 0x1145d, 0x11480, 0x11481, 0x11482
};

void BM_collation_204(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_204, cps_204 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_204);

uint32_t cps_205[] = {
0x11483, 0x11484, 0x11485, 0x11486, 0x11487, 0x11488, 0x11489, 0x1148a, 0x1148b, 0x1148c, 0x1148d, 0x1148e, 0x1148f, 0x11490, 0x11491, 0x11492, 0x11493, 0x11494, 0x11495, 0x11496, 0x11497, 0x11498, 0x11499, 0x1149a, 0x1149b, 0x1149c, 0x1149d, 0x1149e, 0x1149f, 0x114a0, 0x114a1, 0x114a2, 0x114a3, 0x114a4, 0x114a5, 0x114a6, 0x114a7, 0x114a8, 0x114a9, 0x114aa, 0x114ab, 0x114ac, 0x114ad, 0x114ae, 0x114af, 0x114b0, 0x114b1, 0x114b2, 0x114b3, 0x114b4, 0x114b5, 0x114b6, 0x114b7, 0x114b8, 0x114b9, 0x114b9, 0x114b0, 0x114b9, 0x114ba, 0x114b9, 0x114bd, 0x114ba, 0x114bb, 0x114bc, 0x114bd, 0x114be, 0x114bf, 0x114c0, 0x114c1, 0x114c2, 0x114c3, 0x114c4, 0x114c5, 0x114c6, 0x114c7, 0x114d0, 0x114d1, 0x114d2, 0x114d3, 0x114d4, 0x114d5, 0x114d6, 0x114d7, 0x114d8, 0x114d9, 0x11580, 0x11581, 0x11582, 0x11583, 0x11584, 0x11585, 0x11586, 0x11587, 0x11588, 0x11589, 0x1158a, 0x1158b, 0x1158c, 0x1158d, 0x1158e, 0x1158f, 0x11590, 0x11591
};

void BM_collation_205(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_205, cps_205 + 103, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_205);

uint32_t cps_206[] = {
0x11592, 0x11593, 0x11594, 0x11595, 0x11596, 0x11597, 0x11598, 0x11599, 0x1159a, 0x1159b, 0x1159c, 0x1159d, 0x1159e, 0x1159f, 0x115a0, 0x115a1, 0x115a2, 0x115a3, 0x115a4, 0x115a5, 0x115a6, 0x115a7, 0x115a8, 0x115a9, 0x115aa, 0x115ab, 0x115ac, 0x115ad, 0x115ae, 0x115af, 0x115b0, 0x115b1, 0x115b2, 0x115b3, 0x115b4, 0x115b5, 0x115b8, 0x115b8, 0x115af, 0x115b9, 0x115b9, 0x115af, 0x115ba, 0x115bb, 0x115bc, 0x115bd, 0x115be, 0x115bf, 0x115c0, 0x115c1, 0x115c2, 0x115c3, 0x115c4, 0x115c5, 0x115c6, 0x115c7, 0x115c8, 0x115c9, 0x115ca, 0x115cb, 0x115cc, 0x115cd, 0x115ce, 0x115cf, 0x115d0, 0x115d1, 0x115d2, 0x115d3, 0x115d4, 0x115d5, 0x115d6, 0x115d7, 0x115d8, 0x115d9, 0x115da, 0x115db, 0x115dc, 0x115dd, 0x11600, 0x11601, 0x11602, 0x11603, 0x11604, 0x11605, 0x11606, 0x11607, 0x11608, 0x11609, 0x1160a, 0x1160b, 0x1160c, 0x1160d, 0x1160e, 0x1160f, 0x11610, 0x11611, 0x11612, 0x11613, 0x11614, 0x11615, 0x11616, 0x11617
};

void BM_collation_206(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_206, cps_206 + 102, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_206);

uint32_t cps_207[] = {
0x11618, 0x11619, 0x1161a, 0x1161b, 0x1161c, 0x1161d, 0x1161e, 0x1161f, 0x11620, 0x11621, 0x11622, 0x11623, 0x11624, 0x11625, 0x11626, 0x11627, 0x11628, 0x11629, 0x1162a, 0x1162b, 0x1162c, 0x1162d, 0x1162e, 0x1162f, 0x11630, 0x11631, 0x11632, 0x11633, 0x11634, 0x11635, 0x11636, 0x11637, 0x11638, 0x11639, 0x1163a, 0x1163b, 0x1163c, 0x1163d, 0x1163e, 0x1163f, 0x11640, 0x11641, 0x11642, 0x11643, 0x11644, 0x11650, 0x11651, 0x11652, 0x11653, 0x11654, 0x11655, 0x11656, 0x11657, 0x11658, 0x11659, 0x11660, 0x11661, 0x11662, 0x11663, 0x11664, 0x11665, 0x11666, 0x11667, 0x11668, 0x11669, 0x1166a, 0x1166b, 0x1166c, 0x11680, 0x11681, 0x11682, 0x11683, 0x11684, 0x11685, 0x11686, 0x11687, 0x11688, 0x11689, 0x1168a, 0x1168b, 0x1168c, 0x1168d, 0x1168e, 0x1168f, 0x11690, 0x11691, 0x11692, 0x11693, 0x11694, 0x11695, 0x11696, 0x11697, 0x11698, 0x11699, 0x1169a, 0x1169b, 0x1169c, 0x1169d, 0x1169e, 0x1169f
};

void BM_collation_207(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_207, cps_207 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_207);

uint32_t cps_208[] = {
0x116a0, 0x116a1, 0x116a2, 0x116a3, 0x116a4, 0x116a5, 0x116a6, 0x116a7, 0x116a8, 0x116a9, 0x116aa, 0x116ab, 0x116ac, 0x116ad, 0x116ae, 0x116af, 0x116b0, 0x116b1, 0x116b2, 0x116b3, 0x116b4, 0x116b5, 0x116b6, 0x116b7, 0x116c0, 0x116c1, 0x116c2, 0x116c3, 0x116c4, 0x116c5, 0x116c6, 0x116c7, 0x116c8, 0x116c9, 0x11700, 0x11701, 0x11702, 0x11703, 0x11704, 0x11705, 0x11706, 0x11707, 0x11708, 0x11709, 0x1170a, 0x1170b, 0x1170c, 0x1170d, 0x1170e, 0x1170f, 0x11710, 0x11711, 0x11712, 0x11713, 0x11714, 0x11715, 0x11716, 0x11717, 0x11718, 0x11719, 0x1171d, 0x1171e, 0x1171f, 0x11720, 0x11721, 0x11722, 0x11723, 0x11724, 0x11725, 0x11726, 0x11727, 0x11728, 0x11729, 0x1172a, 0x1172b, 0x11730, 0x11731, 0x11732, 0x11733, 0x11734, 0x11735, 0x11736, 0x11737, 0x11738, 0x11739, 0x1173a, 0x1173b, 0x1173c, 0x1173d, 0x1173e, 0x1173f, 0x118a0, 0x118a1, 0x118a2, 0x118a3, 0x118a4, 0x118a5, 0x118a6, 0x118a7, 0x118a8
};

void BM_collation_208(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_208, cps_208 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_208);

uint32_t cps_209[] = {
0x118a9, 0x118aa, 0x118ab, 0x118ac, 0x118ad, 0x118ae, 0x118af, 0x118b0, 0x118b1, 0x118b2, 0x118b3, 0x118b4, 0x118b5, 0x118b6, 0x118b7, 0x118b8, 0x118b9, 0x118ba, 0x118bb, 0x118bc, 0x118bd, 0x118be, 0x118bf, 0x118c0, 0x118c1, 0x118c2, 0x118c3, 0x118c4, 0x118c5, 0x118c6, 0x118c7, 0x118c8, 0x118c9, 0x118ca, 0x118cb, 0x118cc, 0x118cd, 0x118ce, 0x118cf, 0x118d0, 0x118d1, 0x118d2, 0x118d3, 0x118d4, 0x118d5, 0x118d6, 0x118d7, 0x118d8, 0x118d9, 0x118da, 0x118db, 0x118dc, 0x118dd, 0x118de, 0x118df, 0x118e0, 0x118e1, 0x118e2, 0x118e3, 0x118e4, 0x118e5, 0x118e6, 0x118e7, 0x118e8, 0x118e9, 0x118ea, 0x118eb, 0x118ec, 0x118ed, 0x118ee, 0x118ef, 0x118f0, 0x118f1, 0x118f2, 0x118ff, 0x11a00, 0x11a01, 0x11a02, 0x11a03, 0x11a04, 0x11a05, 0x11a06, 0x11a07, 0x11a08, 0x11a09, 0x11a0a, 0x11a0b, 0x11a0c, 0x11a0d, 0x11a0e, 0x11a0f, 0x11a10, 0x11a11, 0x11a12, 0x11a13, 0x11a14, 0x11a15, 0x11a16, 0x11a17, 0x11a18
};

void BM_collation_209(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_209, cps_209 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_209);

uint32_t cps_210[] = {
0x11a19, 0x11a1a, 0x11a1b, 0x11a1c, 0x11a1d, 0x11a1e, 0x11a1f, 0x11a20, 0x11a21, 0x11a22, 0x11a23, 0x11a24, 0x11a25, 0x11a26, 0x11a27, 0x11a28, 0x11a29, 0x11a2a, 0x11a2b, 0x11a2c, 0x11a2d, 0x11a2e, 0x11a2f, 0x11a30, 0x11a31, 0x11a32, 0x11a33, 0x11a34, 0x11a35, 0x11a36, 0x11a37, 0x11a38, 0x11a39, 0x11a3a, 0x11a3b, 0x11a3c, 0x11a3d, 0x11a3e, 0x11a3f, 0x11a40, 0x11a41, 0x11a42, 0x11a43, 0x11a44, 0x11a45, 0x11a46, 0x11a47, 0x11a50, 0x11a51, 0x11a52, 0x11a53, 0x11a54, 0x11a55, 0x11a56, 0x11a57, 0x11a58, 0x11a59, 0x11a5a, 0x11a5b, 0x11a5c, 0x11a5d, 0x11a5e, 0x11a5f, 0x11a60, 0x11a61, 0x11a62, 0x11a63, 0x11a64, 0x11a65, 0x11a66, 0x11a67, 0x11a68, 0x11a69, 0x11a6a, 0x11a6b, 0x11a6c, 0x11a6d, 0x11a6e, 0x11a6f, 0x11a70, 0x11a71, 0x11a72, 0x11a73, 0x11a74, 0x11a75, 0x11a76, 0x11a77, 0x11a78, 0x11a79, 0x11a7a, 0x11a7b, 0x11a7c, 0x11a7d, 0x11a7e, 0x11a7f, 0x11a80, 0x11a81, 0x11a82, 0x11a83, 0x11a86
};

void BM_collation_210(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_210, cps_210 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_210);

uint32_t cps_211[] = {
0x11a87, 0x11a88, 0x11a89, 0x11a8a, 0x11a8b, 0x11a8c, 0x11a8d, 0x11a8e, 0x11a8f, 0x11a90, 0x11a91, 0x11a92, 0x11a93, 0x11a94, 0x11a95, 0x11a96, 0x11a97, 0x11a98, 0x11a99, 0x11a9a, 0x11a9b, 0x11a9c, 0x11a9e, 0x11a9f, 0x11aa0, 0x11aa1, 0x11aa2, 0x11ac0, 0x11ac1, 0x11ac2, 0x11ac3, 0x11ac4, 0x11ac5, 0x11ac6, 0x11ac7, 0x11ac8, 0x11ac9, 0x11aca, 0x11acb, 0x11acc, 0x11acd, 0x11ace, 0x11acf, 0x11ad0, 0x11ad1, 0x11ad2, 0x11ad3, 0x11ad4, 0x11ad5, 0x11ad6, 0x11ad7, 0x11ad8, 0x11ad9, 0x11ada, 0x11adb, 0x11adc, 0x11add, 0x11ade, 0x11adf, 0x11ae0, 0x11ae1, 0x11ae2, 0x11ae3, 0x11ae4, 0x11ae5, 0x11ae6, 0x11ae7, 0x11ae8, 0x11ae9, 0x11aea, 0x11aeb, 0x11aec, 0x11aed, 0x11aee, 0x11aef, 0x11af0, 0x11af1, 0x11af2, 0x11af3, 0x11af4, 0x11af5, 0x11af6, 0x11af7, 0x11af8, 0x11c00, 0x11c01, 0x11c02, 0x11c03, 0x11c04, 0x11c05, 0x11c06, 0x11c07, 0x11c08, 0x11c0a, 0x11c0b, 0x11c0c, 0x11c0d, 0x11c0e, 0x11c0f, 0x11c10
};

void BM_collation_211(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_211, cps_211 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_211);

uint32_t cps_212[] = {
0x11c11, 0x11c12, 0x11c13, 0x11c14, 0x11c15, 0x11c16, 0x11c17, 0x11c18, 0x11c19, 0x11c1a, 0x11c1b, 0x11c1c, 0x11c1d, 0x11c1e, 0x11c1f, 0x11c20, 0x11c21, 0x11c22, 0x11c23, 0x11c24, 0x11c25, 0x11c26, 0x11c27, 0x11c28, 0x11c29, 0x11c2a, 0x11c2b, 0x11c2c, 0x11c2d, 0x11c2e, 0x11c2f, 0x11c30, 0x11c31, 0x11c32, 0x11c33, 0x11c34, 0x11c35, 0x11c36, 0x11c38, 0x11c39, 0x11c3a, 0x11c3b, 0x11c3c, 0x11c3d, 0x11c3e, 0x11c3f, 0x11c40, 0x11c41, 0x11c42, 0x11c43, 0x11c44, 0x11c45, 0x11c50, 0x11c51, 0x11c52, 0x11c53, 0x11c54, 0x11c55, 0x11c56, 0x11c57, 0x11c58, 0x11c59, 0x11c5a, 0x11c5b, 0x11c5c, 0x11c5d, 0x11c5e, 0x11c5f, 0x11c60, 0x11c61, 0x11c62, 0x11c63, 0x11c64, 0x11c65, 0x11c66, 0x11c67, 0x11c68, 0x11c69, 0x11c6a, 0x11c6b, 0x11c6c, 0x11c70, 0x11c71, 0x11c72, 0x11c73, 0x11c74, 0x11c75, 0x11c76, 0x11c77, 0x11c78, 0x11c79, 0x11c7a, 0x11c7b, 0x11c7c, 0x11c7d, 0x11c7e, 0x11c7f, 0x11c80, 0x11c81, 0x11c82
};

void BM_collation_212(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_212, cps_212 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_212);

uint32_t cps_213[] = {
0x11c83, 0x11c84, 0x11c85, 0x11c86, 0x11c87, 0x11c88, 0x11c89, 0x11c8a, 0x11c8b, 0x11c8c, 0x11c8d, 0x11c8e, 0x11c8f, 0x11c92, 0x11c93, 0x11c94, 0x11c95, 0x11c96, 0x11c97, 0x11c98, 0x11c99, 0x11c9a, 0x11c9b, 0x11c9c, 0x11c9d, 0x11c9e, 0x11c9f, 0x11ca0, 0x11ca1, 0x11ca2, 0x11ca3, 0x11ca4, 0x11ca5, 0x11ca6, 0x11ca7, 0x11ca9, 0x11caa, 0x11cab, 0x11cac, 0x11cad, 0x11cae, 0x11caf, 0x11cb0, 0x11cb1, 0x11cb2, 0x11cb3, 0x11cb4, 0x11cb5, 0x11cb6, 0x11d00, 0x11d01, 0x11d02, 0x11d03, 0x11d04, 0x11d05, 0x11d06, 0x11d08, 0x11d09, 0x11d0b, 0x11d0c, 0x11d0d, 0x11d0e, 0x11d0f, 0x11d10, 0x11d11, 0x11d12, 0x11d13, 0x11d14, 0x11d15, 0x11d16, 0x11d17, 0x11d18, 0x11d19, 0x11d1a, 0x11d1b, 0x11d1c, 0x11d1d, 0x11d1e, 0x11d1f, 0x11d20, 0x11d21, 0x11d22, 0x11d23, 0x11d24, 0x11d25, 0x11d26, 0x11d27, 0x11d28, 0x11d29, 0x11d2a, 0x11d2b, 0x11d2c, 0x11d2d, 0x11d2e, 0x11d2f, 0x11d30, 0x11d31, 0x11d32, 0x11d33, 0x11d34
};

void BM_collation_213(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_213, cps_213 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_213);

uint32_t cps_214[] = {
0x11d35, 0x11d36, 0x11d3a, 0x11d3c, 0x11d3d, 0x11d3f, 0x11d40, 0x11d41, 0x11d42, 0x11d43, 0x11d44, 0x11d45, 0x11d46, 0x11d47, 0x11d50, 0x11d51, 0x11d52, 0x11d53, 0x11d54, 0x11d55, 0x11d56, 0x11d57, 0x11d58, 0x11d59, 0x12000, 0x12001, 0x12002, 0x12003, 0x12004, 0x12005, 0x12006, 0x12007, 0x12008, 0x12009, 0x1200a, 0x1200b, 0x1200c, 0x1200d, 0x1200e, 0x1200f, 0x12010, 0x12011, 0x12012, 0x12013, 0x12014, 0x12015, 0x12016, 0x12017, 0x12018, 0x12019, 0x1201a, 0x1201b, 0x1201c, 0x1201d, 0x1201e, 0x1201f, 0x12020, 0x12021, 0x12022, 0x12023, 0x12024, 0x12025, 0x12026, 0x12027, 0x12028, 0x12029, 0x1202a, 0x1202b, 0x1202c, 0x1202d, 0x1202e, 0x1202f, 0x12030, 0x12031, 0x12032, 0x12033, 0x12034, 0x12035, 0x12036, 0x12037, 0x12038, 0x12039, 0x1203a, 0x1203b, 0x1203c, 0x1203d, 0x1203e, 0x1203f, 0x12040, 0x12041, 0x12042, 0x12043, 0x12044, 0x12045, 0x12046, 0x12047, 0x12048, 0x12049, 0x1204a, 0x1204b
};

void BM_collation_214(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_214, cps_214 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_214);

uint32_t cps_215[] = {
0x1204c, 0x1204d, 0x1204e, 0x1204f, 0x12050, 0x12051, 0x12052, 0x12053, 0x12054, 0x12055, 0x12056, 0x12057, 0x12058, 0x12059, 0x1205a, 0x1205b, 0x1205c, 0x1205d, 0x1205e, 0x1205f, 0x12060, 0x12061, 0x12062, 0x12063, 0x12064, 0x12065, 0x12066, 0x12067, 0x12068, 0x12069, 0x1206a, 0x1206b, 0x1206c, 0x1206d, 0x1206e, 0x1206f, 0x12070, 0x12071, 0x12072, 0x12073, 0x12074, 0x12075, 0x12076, 0x12077, 0x12078, 0x12079, 0x1207a, 0x1207b, 0x1207c, 0x1207d, 0x1207e, 0x1207f, 0x12080, 0x12081, 0x12082, 0x12083, 0x12084, 0x12085, 0x12086, 0x12087, 0x12088, 0x12089, 0x1208a, 0x1208b, 0x1208c, 0x1208d, 0x1208e, 0x1208f, 0x12090, 0x12091, 0x12092, 0x12093, 0x12094, 0x12095, 0x12096, 0x12097, 0x12098, 0x12099, 0x1209a, 0x1209b, 0x1209c, 0x1209d, 0x1209e, 0x1209f, 0x120a0, 0x120a1, 0x120a2, 0x120a3, 0x120a4, 0x120a5, 0x120a6, 0x120a7, 0x120a8, 0x120a9, 0x120aa, 0x120ab, 0x120ac, 0x120ad, 0x120ae, 0x120af
};

void BM_collation_215(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_215, cps_215 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_215);

uint32_t cps_216[] = {
0x120b0, 0x120b1, 0x120b2, 0x120b3, 0x120b4, 0x120b5, 0x120b6, 0x120b7, 0x120b8, 0x120b9, 0x120ba, 0x120bb, 0x120bc, 0x120bd, 0x120be, 0x120bf, 0x120c0, 0x120c1, 0x120c2, 0x120c3, 0x120c4, 0x120c5, 0x120c6, 0x120c7, 0x120c8, 0x120c9, 0x120ca, 0x120cb, 0x120cc, 0x120cd, 0x120ce, 0x120cf, 0x120d0, 0x120d1, 0x120d2, 0x120d3, 0x120d4, 0x120d5, 0x120d6, 0x120d7, 0x120d8, 0x120d9, 0x120da, 0x120db, 0x120dc, 0x120dd, 0x120de, 0x120df, 0x120e0, 0x120e1, 0x120e2, 0x120e3, 0x120e4, 0x120e5, 0x120e6, 0x120e7, 0x120e8, 0x120e9, 0x120ea, 0x120eb, 0x120ec, 0x120ed, 0x120ee, 0x120ef, 0x120f0, 0x120f1, 0x120f2, 0x120f3, 0x120f4, 0x120f5, 0x120f6, 0x120f7, 0x120f8, 0x120f9, 0x120fa, 0x120fb, 0x120fc, 0x120fd, 0x120fe, 0x120ff, 0x12100, 0x12101, 0x12102, 0x12103, 0x12104, 0x12105, 0x12106, 0x12107, 0x12108, 0x12109, 0x1210a, 0x1210b, 0x1210c, 0x1210d, 0x1210e, 0x1210f, 0x12110, 0x12111, 0x12112, 0x12113
};

void BM_collation_216(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_216, cps_216 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_216);

uint32_t cps_217[] = {
0x12114, 0x12115, 0x12116, 0x12117, 0x12118, 0x12119, 0x1211a, 0x1211b, 0x1211c, 0x1211d, 0x1211e, 0x1211f, 0x12120, 0x12121, 0x12122, 0x12123, 0x12124, 0x12125, 0x12126, 0x12127, 0x12128, 0x12129, 0x1212a, 0x1212b, 0x1212c, 0x1212d, 0x1212e, 0x1212f, 0x12130, 0x12131, 0x12132, 0x12133, 0x12134, 0x12135, 0x12136, 0x12137, 0x12138, 0x12139, 0x1213a, 0x1213b, 0x1213c, 0x1213d, 0x1213e, 0x1213f, 0x12140, 0x12141, 0x12142, 0x12143, 0x12144, 0x12145, 0x12146, 0x12147, 0x12148, 0x12149, 0x1214a, 0x1214b, 0x1214c, 0x1214d, 0x1214e, 0x1214f, 0x12150, 0x12151, 0x12152, 0x12153, 0x12154, 0x12155, 0x12156, 0x12157, 0x12158, 0x12159, 0x1215a, 0x1215b, 0x1215c, 0x1215d, 0x1215e, 0x1215f, 0x12160, 0x12161, 0x12162, 0x12163, 0x12164, 0x12165, 0x12166, 0x12167, 0x12168, 0x12169, 0x1216a, 0x1216b, 0x1216c, 0x1216d, 0x1216e, 0x1216f, 0x12170, 0x12171, 0x12172, 0x12173, 0x12174, 0x12175, 0x12176, 0x12177
};

void BM_collation_217(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_217, cps_217 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_217);

uint32_t cps_218[] = {
0x12178, 0x12179, 0x1217a, 0x1217b, 0x1217c, 0x1217d, 0x1217e, 0x1217f, 0x12180, 0x12181, 0x12182, 0x12183, 0x12184, 0x12185, 0x12186, 0x12187, 0x12188, 0x12189, 0x1218a, 0x1218b, 0x1218c, 0x1218d, 0x1218e, 0x1218f, 0x12190, 0x12191, 0x12192, 0x12193, 0x12194, 0x12195, 0x12196, 0x12197, 0x12198, 0x12199, 0x1219a, 0x1219b, 0x1219c, 0x1219d, 0x1219e, 0x1219f, 0x121a0, 0x121a1, 0x121a2, 0x121a3, 0x121a4, 0x121a5, 0x121a6, 0x121a7, 0x121a8, 0x121a9, 0x121aa, 0x121ab, 0x121ac, 0x121ad, 0x121ae, 0x121af, 0x121b0, 0x121b1, 0x121b2, 0x121b3, 0x121b4, 0x121b5, 0x121b6, 0x121b7, 0x121b8, 0x121b9, 0x121ba, 0x121bb, 0x121bc, 0x121bd, 0x121be, 0x121bf, 0x121c0, 0x121c1, 0x121c2, 0x121c3, 0x121c4, 0x121c5, 0x121c6, 0x121c7, 0x121c8, 0x121c9, 0x121ca, 0x121cb, 0x121cc, 0x121cd, 0x121ce, 0x121cf, 0x121d0, 0x121d1, 0x121d2, 0x121d3, 0x121d4, 0x121d5, 0x121d6, 0x121d7, 0x121d8, 0x121d9, 0x121da, 0x121db
};

void BM_collation_218(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_218, cps_218 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_218);

uint32_t cps_219[] = {
0x121dc, 0x121dd, 0x121de, 0x121df, 0x121e0, 0x121e1, 0x121e2, 0x121e3, 0x121e4, 0x121e5, 0x121e6, 0x121e7, 0x121e8, 0x121e9, 0x121ea, 0x121eb, 0x121ec, 0x121ed, 0x121ee, 0x121ef, 0x121f0, 0x121f1, 0x121f2, 0x121f3, 0x121f4, 0x121f5, 0x121f6, 0x121f7, 0x121f8, 0x121f9, 0x121fa, 0x121fb, 0x121fc, 0x121fd, 0x121fe, 0x121ff, 0x12200, 0x12201, 0x12202, 0x12203, 0x12204, 0x12205, 0x12206, 0x12207, 0x12208, 0x12209, 0x1220a, 0x1220b, 0x1220c, 0x1220d, 0x1220e, 0x1220f, 0x12210, 0x12211, 0x12212, 0x12213, 0x12214, 0x12215, 0x12216, 0x12217, 0x12218, 0x12219, 0x1221a, 0x1221b, 0x1221c, 0x1221d, 0x1221e, 0x1221f, 0x12220, 0x12221, 0x12222, 0x12223, 0x12224, 0x12225, 0x12226, 0x12227, 0x12228, 0x12229, 0x1222a, 0x1222b, 0x1222c, 0x1222d, 0x1222e, 0x1222f, 0x12230, 0x12231, 0x12232, 0x12233, 0x12234, 0x12235, 0x12236, 0x12237, 0x12238, 0x12239, 0x1223a, 0x1223b, 0x1223c, 0x1223d, 0x1223e, 0x1223f
};

void BM_collation_219(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_219, cps_219 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_219);

uint32_t cps_220[] = {
0x12240, 0x12241, 0x12242, 0x12243, 0x12244, 0x12245, 0x12246, 0x12247, 0x12248, 0x12249, 0x1224a, 0x1224b, 0x1224c, 0x1224d, 0x1224e, 0x1224f, 0x12250, 0x12251, 0x12252, 0x12253, 0x12254, 0x12255, 0x12256, 0x12257, 0x12258, 0x12259, 0x1225a, 0x1225b, 0x1225c, 0x1225d, 0x1225e, 0x1225f, 0x12260, 0x12261, 0x12262, 0x12263, 0x12264, 0x12265, 0x12266, 0x12267, 0x12268, 0x12269, 0x1226a, 0x1226b, 0x1226c, 0x1226d, 0x1226e, 0x1226f, 0x12270, 0x12271, 0x12272, 0x12273, 0x12274, 0x12275, 0x12276, 0x12277, 0x12278, 0x12279, 0x1227a, 0x1227b, 0x1227c, 0x1227d, 0x1227e, 0x1227f, 0x12280, 0x12281, 0x12282, 0x12283, 0x12284, 0x12285, 0x12286, 0x12287, 0x12288, 0x12289, 0x1228a, 0x1228b, 0x1228c, 0x1228d, 0x1228e, 0x1228f, 0x12290, 0x12291, 0x12292, 0x12293, 0x12294, 0x12295, 0x12296, 0x12297, 0x12298, 0x12299, 0x1229a, 0x1229b, 0x1229c, 0x1229d, 0x1229e, 0x1229f, 0x122a0, 0x122a1, 0x122a2, 0x122a3
};

void BM_collation_220(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_220, cps_220 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_220);

uint32_t cps_221[] = {
0x122a4, 0x122a5, 0x122a6, 0x122a7, 0x122a8, 0x122a9, 0x122aa, 0x122ab, 0x122ac, 0x122ad, 0x122ae, 0x122af, 0x122b0, 0x122b1, 0x122b2, 0x122b3, 0x122b4, 0x122b5, 0x122b6, 0x122b7, 0x122b8, 0x122b9, 0x122ba, 0x122bb, 0x122bc, 0x122bd, 0x122be, 0x122bf, 0x122c0, 0x122c1, 0x122c2, 0x122c3, 0x122c4, 0x122c5, 0x122c6, 0x122c7, 0x122c8, 0x122c9, 0x122ca, 0x122cb, 0x122cc, 0x122cd, 0x122ce, 0x122cf, 0x122d0, 0x122d1, 0x122d2, 0x122d3, 0x122d4, 0x122d5, 0x122d6, 0x122d7, 0x122d8, 0x122d9, 0x122da, 0x122db, 0x122dc, 0x122dd, 0x122de, 0x122df, 0x122e0, 0x122e1, 0x122e2, 0x122e3, 0x122e4, 0x122e5, 0x122e6, 0x122e7, 0x122e8, 0x122e9, 0x122ea, 0x122eb, 0x122ec, 0x122ed, 0x122ee, 0x122ef, 0x122f0, 0x122f1, 0x122f2, 0x122f3, 0x122f4, 0x122f5, 0x122f6, 0x122f7, 0x122f8, 0x122f9, 0x122fa, 0x122fb, 0x122fc, 0x122fd, 0x122fe, 0x122ff, 0x12300, 0x12301, 0x12302, 0x12303, 0x12304, 0x12305, 0x12306, 0x12307
};

void BM_collation_221(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_221, cps_221 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_221);

uint32_t cps_222[] = {
0x12308, 0x12309, 0x1230a, 0x1230b, 0x1230c, 0x1230d, 0x1230e, 0x1230f, 0x12310, 0x12311, 0x12312, 0x12313, 0x12314, 0x12315, 0x12316, 0x12317, 0x12318, 0x12319, 0x1231a, 0x1231b, 0x1231c, 0x1231d, 0x1231e, 0x1231f, 0x12320, 0x12321, 0x12322, 0x12323, 0x12324, 0x12325, 0x12326, 0x12327, 0x12328, 0x12329, 0x1232a, 0x1232b, 0x1232c, 0x1232d, 0x1232e, 0x1232f, 0x12330, 0x12331, 0x12332, 0x12333, 0x12334, 0x12335, 0x12336, 0x12337, 0x12338, 0x12339, 0x1233a, 0x1233b, 0x1233c, 0x1233d, 0x1233e, 0x1233f, 0x12340, 0x12341, 0x12342, 0x12343, 0x12344, 0x12345, 0x12346, 0x12347, 0x12348, 0x12349, 0x1234a, 0x1234b, 0x1234c, 0x1234d, 0x1234e, 0x1234f, 0x12350, 0x12351, 0x12352, 0x12353, 0x12354, 0x12355, 0x12356, 0x12357, 0x12358, 0x12359, 0x1235a, 0x1235b, 0x1235c, 0x1235d, 0x1235e, 0x1235f, 0x12360, 0x12361, 0x12362, 0x12363, 0x12364, 0x12365, 0x12366, 0x12367, 0x12368, 0x12369, 0x1236a, 0x1236b
};

void BM_collation_222(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_222, cps_222 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_222);

uint32_t cps_223[] = {
0x1236c, 0x1236d, 0x1236e, 0x1236f, 0x12370, 0x12371, 0x12372, 0x12373, 0x12374, 0x12375, 0x12376, 0x12377, 0x12378, 0x12379, 0x1237a, 0x1237b, 0x1237c, 0x1237d, 0x1237e, 0x1237f, 0x12380, 0x12381, 0x12382, 0x12383, 0x12384, 0x12385, 0x12386, 0x12387, 0x12388, 0x12389, 0x1238a, 0x1238b, 0x1238c, 0x1238d, 0x1238e, 0x1238f, 0x12390, 0x12391, 0x12392, 0x12393, 0x12394, 0x12395, 0x12396, 0x12397, 0x12398, 0x12399, 0x12400, 0x12401, 0x12402, 0x12403, 0x12404, 0x12405, 0x12406, 0x12407, 0x12408, 0x12409, 0x1240a, 0x1240b, 0x1240c, 0x1240d, 0x1240e, 0x1240f, 0x12410, 0x12411, 0x12412, 0x12413, 0x12414, 0x12415, 0x12416, 0x12417, 0x12418, 0x12419, 0x1241a, 0x1241b, 0x1241c, 0x1241d, 0x1241e, 0x1241f, 0x12420, 0x12421, 0x12422, 0x12423, 0x12424, 0x12425, 0x12426, 0x12427, 0x12428, 0x12429, 0x1242a, 0x1242b, 0x1242c, 0x1242d, 0x1242e, 0x1242f, 0x12430, 0x12431, 0x12432, 0x12433, 0x12434, 0x12435
};

void BM_collation_223(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_223, cps_223 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_223);

uint32_t cps_224[] = {
0x12436, 0x12437, 0x12438, 0x12439, 0x1243a, 0x1243b, 0x1243c, 0x1243d, 0x1243e, 0x1243f, 0x12440, 0x12441, 0x12442, 0x12443, 0x12444, 0x12445, 0x12446, 0x12447, 0x12448, 0x12449, 0x1244a, 0x1244b, 0x1244c, 0x1244d, 0x1244e, 0x1244f, 0x12450, 0x12451, 0x12452, 0x12453, 0x12454, 0x12455, 0x12456, 0x12457, 0x12458, 0x12459, 0x1245a, 0x1245b, 0x1245c, 0x1245d, 0x1245e, 0x1245f, 0x12460, 0x12461, 0x12462, 0x12463, 0x12464, 0x12465, 0x12466, 0x12467, 0x12468, 0x12469, 0x1246a, 0x1246b, 0x1246c, 0x1246d, 0x1246e, 0x12470, 0x12471, 0x12472, 0x12473, 0x12474, 0x12480, 0x12481, 0x12482, 0x12483, 0x12484, 0x12485, 0x12486, 0x12487, 0x12488, 0x12489, 0x1248a, 0x1248b, 0x1248c, 0x1248d, 0x1248e, 0x1248f, 0x12490, 0x12491, 0x12492, 0x12493, 0x12494, 0x12495, 0x12496, 0x12497, 0x12498, 0x12499, 0x1249a, 0x1249b, 0x1249c, 0x1249d, 0x1249e, 0x1249f, 0x124a0, 0x124a1, 0x124a2, 0x124a3, 0x124a4, 0x124a5
};

void BM_collation_224(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_224, cps_224 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_224);

uint32_t cps_225[] = {
0x124a6, 0x124a7, 0x124a8, 0x124a9, 0x124aa, 0x124ab, 0x124ac, 0x124ad, 0x124ae, 0x124af, 0x124b0, 0x124b1, 0x124b2, 0x124b3, 0x124b4, 0x124b5, 0x124b6, 0x124b7, 0x124b8, 0x124b9, 0x124ba, 0x124bb, 0x124bc, 0x124bd, 0x124be, 0x124bf, 0x124c0, 0x124c1, 0x124c2, 0x124c3, 0x124c4, 0x124c5, 0x124c6, 0x124c7, 0x124c8, 0x124c9, 0x124ca, 0x124cb, 0x124cc, 0x124cd, 0x124ce, 0x124cf, 0x124d0, 0x124d1, 0x124d2, 0x124d3, 0x124d4, 0x124d5, 0x124d6, 0x124d7, 0x124d8, 0x124d9, 0x124da, 0x124db, 0x124dc, 0x124dd, 0x124de, 0x124df, 0x124e0, 0x124e1, 0x124e2, 0x124e3, 0x124e4, 0x124e5, 0x124e6, 0x124e7, 0x124e8, 0x124e9, 0x124ea, 0x124eb, 0x124ec, 0x124ed, 0x124ee, 0x124ef, 0x124f0, 0x124f1, 0x124f2, 0x124f3, 0x124f4, 0x124f5, 0x124f6, 0x124f7, 0x124f8, 0x124f9, 0x124fa, 0x124fb, 0x124fc, 0x124fd, 0x124fe, 0x124ff, 0x12500, 0x12501, 0x12502, 0x12503, 0x12504, 0x12505, 0x12506, 0x12507, 0x12508, 0x12509
};

void BM_collation_225(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_225, cps_225 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_225);

uint32_t cps_226[] = {
0x1250a, 0x1250b, 0x1250c, 0x1250d, 0x1250e, 0x1250f, 0x12510, 0x12511, 0x12512, 0x12513, 0x12514, 0x12515, 0x12516, 0x12517, 0x12518, 0x12519, 0x1251a, 0x1251b, 0x1251c, 0x1251d, 0x1251e, 0x1251f, 0x12520, 0x12521, 0x12522, 0x12523, 0x12524, 0x12525, 0x12526, 0x12527, 0x12528, 0x12529, 0x1252a, 0x1252b, 0x1252c, 0x1252d, 0x1252e, 0x1252f, 0x12530, 0x12531, 0x12532, 0x12533, 0x12534, 0x12535, 0x12536, 0x12537, 0x12538, 0x12539, 0x1253a, 0x1253b, 0x1253c, 0x1253d, 0x1253e, 0x1253f, 0x12540, 0x12541, 0x12542, 0x12543, 0x13000, 0x13001, 0x13002, 0x13003, 0x13004, 0x13005, 0x13006, 0x13007, 0x13008, 0x13009, 0x1300a, 0x1300b, 0x1300c, 0x1300d, 0x1300e, 0x1300f, 0x13010, 0x13011, 0x13012, 0x13013, 0x13014, 0x13015, 0x13016, 0x13017, 0x13018, 0x13019, 0x1301a, 0x1301b, 0x1301c, 0x1301d, 0x1301e, 0x1301f, 0x13020, 0x13021, 0x13022, 0x13023, 0x13024, 0x13025, 0x13026, 0x13027, 0x13028, 0x13029
};

void BM_collation_226(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_226, cps_226 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_226);

uint32_t cps_227[] = {
0x1302a, 0x1302b, 0x1302c, 0x1302d, 0x1302e, 0x1302f, 0x13030, 0x13031, 0x13032, 0x13033, 0x13034, 0x13035, 0x13036, 0x13037, 0x13038, 0x13039, 0x1303a, 0x1303b, 0x1303c, 0x1303d, 0x1303e, 0x1303f, 0x13040, 0x13041, 0x13042, 0x13043, 0x13044, 0x13045, 0x13046, 0x13047, 0x13048, 0x13049, 0x1304a, 0x1304b, 0x1304c, 0x1304d, 0x1304e, 0x1304f, 0x13050, 0x13051, 0x13052, 0x13053, 0x13054, 0x13055, 0x13056, 0x13057, 0x13058, 0x13059, 0x1305a, 0x1305b, 0x1305c, 0x1305d, 0x1305e, 0x1305f, 0x13060, 0x13061, 0x13062, 0x13063, 0x13064, 0x13065, 0x13066, 0x13067, 0x13068, 0x13069, 0x1306a, 0x1306b, 0x1306c, 0x1306d, 0x1306e, 0x1306f, 0x13070, 0x13071, 0x13072, 0x13073, 0x13074, 0x13075, 0x13076, 0x13077, 0x13078, 0x13079, 0x1307a, 0x1307b, 0x1307c, 0x1307d, 0x1307e, 0x1307f, 0x13080, 0x13081, 0x13082, 0x13083, 0x13084, 0x13085, 0x13086, 0x13087, 0x13088, 0x13089, 0x1308a, 0x1308b, 0x1308c, 0x1308d
};

void BM_collation_227(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_227, cps_227 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_227);

uint32_t cps_228[] = {
0x1308e, 0x1308f, 0x13090, 0x13091, 0x13092, 0x13093, 0x13094, 0x13095, 0x13096, 0x13097, 0x13098, 0x13099, 0x1309a, 0x1309b, 0x1309c, 0x1309d, 0x1309e, 0x1309f, 0x130a0, 0x130a1, 0x130a2, 0x130a3, 0x130a4, 0x130a5, 0x130a6, 0x130a7, 0x130a8, 0x130a9, 0x130aa, 0x130ab, 0x130ac, 0x130ad, 0x130ae, 0x130af, 0x130b0, 0x130b1, 0x130b2, 0x130b3, 0x130b4, 0x130b5, 0x130b6, 0x130b7, 0x130b8, 0x130b9, 0x130ba, 0x130bb, 0x130bc, 0x130bd, 0x130be, 0x130bf, 0x130c0, 0x130c1, 0x130c2, 0x130c3, 0x130c4, 0x130c5, 0x130c6, 0x130c7, 0x130c8, 0x130c9, 0x130ca, 0x130cb, 0x130cc, 0x130cd, 0x130ce, 0x130cf, 0x130d0, 0x130d1, 0x130d2, 0x130d3, 0x130d4, 0x130d5, 0x130d6, 0x130d7, 0x130d8, 0x130d9, 0x130da, 0x130db, 0x130dc, 0x130dd, 0x130de, 0x130df, 0x130e0, 0x130e1, 0x130e2, 0x130e3, 0x130e4, 0x130e5, 0x130e6, 0x130e7, 0x130e8, 0x130e9, 0x130ea, 0x130eb, 0x130ec, 0x130ed, 0x130ee, 0x130ef, 0x130f0, 0x130f1
};

void BM_collation_228(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_228, cps_228 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_228);

uint32_t cps_229[] = {
0x130f2, 0x130f3, 0x130f4, 0x130f5, 0x130f6, 0x130f7, 0x130f8, 0x130f9, 0x130fa, 0x130fb, 0x130fc, 0x130fd, 0x130fe, 0x130ff, 0x13100, 0x13101, 0x13102, 0x13103, 0x13104, 0x13105, 0x13106, 0x13107, 0x13108, 0x13109, 0x1310a, 0x1310b, 0x1310c, 0x1310d, 0x1310e, 0x1310f, 0x13110, 0x13111, 0x13112, 0x13113, 0x13114, 0x13115, 0x13116, 0x13117, 0x13118, 0x13119, 0x1311a, 0x1311b, 0x1311c, 0x1311d, 0x1311e, 0x1311f, 0x13120, 0x13121, 0x13122, 0x13123, 0x13124, 0x13125, 0x13126, 0x13127, 0x13128, 0x13129, 0x1312a, 0x1312b, 0x1312c, 0x1312d, 0x1312e, 0x1312f, 0x13130, 0x13131, 0x13132, 0x13133, 0x13134, 0x13135, 0x13136, 0x13137, 0x13138, 0x13139, 0x1313a, 0x1313b, 0x1313c, 0x1313d, 0x1313e, 0x1313f, 0x13140, 0x13141, 0x13142, 0x13143, 0x13144, 0x13145, 0x13146, 0x13147, 0x13148, 0x13149, 0x1314a, 0x1314b, 0x1314c, 0x1314d, 0x1314e, 0x1314f, 0x13150, 0x13151, 0x13152, 0x13153, 0x13154, 0x13155
};

void BM_collation_229(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_229, cps_229 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_229);

uint32_t cps_230[] = {
0x13156, 0x13157, 0x13158, 0x13159, 0x1315a, 0x1315b, 0x1315c, 0x1315d, 0x1315e, 0x1315f, 0x13160, 0x13161, 0x13162, 0x13163, 0x13164, 0x13165, 0x13166, 0x13167, 0x13168, 0x13169, 0x1316a, 0x1316b, 0x1316c, 0x1316d, 0x1316e, 0x1316f, 0x13170, 0x13171, 0x13172, 0x13173, 0x13174, 0x13175, 0x13176, 0x13177, 0x13178, 0x13179, 0x1317a, 0x1317b, 0x1317c, 0x1317d, 0x1317e, 0x1317f, 0x13180, 0x13181, 0x13182, 0x13183, 0x13184, 0x13185, 0x13186, 0x13187, 0x13188, 0x13189, 0x1318a, 0x1318b, 0x1318c, 0x1318d, 0x1318e, 0x1318f, 0x13190, 0x13191, 0x13192, 0x13193, 0x13194, 0x13195, 0x13196, 0x13197, 0x13198, 0x13199, 0x1319a, 0x1319b, 0x1319c, 0x1319d, 0x1319e, 0x1319f, 0x131a0, 0x131a1, 0x131a2, 0x131a3, 0x131a4, 0x131a5, 0x131a6, 0x131a7, 0x131a8, 0x131a9, 0x131aa, 0x131ab, 0x131ac, 0x131ad, 0x131ae, 0x131af, 0x131b0, 0x131b1, 0x131b2, 0x131b3, 0x131b4, 0x131b5, 0x131b6, 0x131b7, 0x131b8, 0x131b9
};

void BM_collation_230(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_230, cps_230 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_230);

uint32_t cps_231[] = {
0x131ba, 0x131bb, 0x131bc, 0x131bd, 0x131be, 0x131bf, 0x131c0, 0x131c1, 0x131c2, 0x131c3, 0x131c4, 0x131c5, 0x131c6, 0x131c7, 0x131c8, 0x131c9, 0x131ca, 0x131cb, 0x131cc, 0x131cd, 0x131ce, 0x131cf, 0x131d0, 0x131d1, 0x131d2, 0x131d3, 0x131d4, 0x131d5, 0x131d6, 0x131d7, 0x131d8, 0x131d9, 0x131da, 0x131db, 0x131dc, 0x131dd, 0x131de, 0x131df, 0x131e0, 0x131e1, 0x131e2, 0x131e3, 0x131e4, 0x131e5, 0x131e6, 0x131e7, 0x131e8, 0x131e9, 0x131ea, 0x131eb, 0x131ec, 0x131ed, 0x131ee, 0x131ef, 0x131f0, 0x131f1, 0x131f2, 0x131f3, 0x131f4, 0x131f5, 0x131f6, 0x131f7, 0x131f8, 0x131f9, 0x131fa, 0x131fb, 0x131fc, 0x131fd, 0x131fe, 0x131ff, 0x13200, 0x13201, 0x13202, 0x13203, 0x13204, 0x13205, 0x13206, 0x13207, 0x13208, 0x13209, 0x1320a, 0x1320b, 0x1320c, 0x1320d, 0x1320e, 0x1320f, 0x13210, 0x13211, 0x13212, 0x13213, 0x13214, 0x13215, 0x13216, 0x13217, 0x13218, 0x13219, 0x1321a, 0x1321b, 0x1321c, 0x1321d
};

void BM_collation_231(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_231, cps_231 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_231);

uint32_t cps_232[] = {
0x1321e, 0x1321f, 0x13220, 0x13221, 0x13222, 0x13223, 0x13224, 0x13225, 0x13226, 0x13227, 0x13228, 0x13229, 0x1322a, 0x1322b, 0x1322c, 0x1322d, 0x1322e, 0x1322f, 0x13230, 0x13231, 0x13232, 0x13233, 0x13234, 0x13235, 0x13236, 0x13237, 0x13238, 0x13239, 0x1323a, 0x1323b, 0x1323c, 0x1323d, 0x1323e, 0x1323f, 0x13240, 0x13241, 0x13242, 0x13243, 0x13244, 0x13245, 0x13246, 0x13247, 0x13248, 0x13249, 0x1324a, 0x1324b, 0x1324c, 0x1324d, 0x1324e, 0x1324f, 0x13250, 0x13251, 0x13252, 0x13253, 0x13254, 0x13255, 0x13256, 0x13257, 0x13258, 0x13259, 0x1325a, 0x1325b, 0x1325c, 0x1325d, 0x1325e, 0x1325f, 0x13260, 0x13261, 0x13262, 0x13263, 0x13264, 0x13265, 0x13266, 0x13267, 0x13268, 0x13269, 0x1326a, 0x1326b, 0x1326c, 0x1326d, 0x1326e, 0x1326f, 0x13270, 0x13271, 0x13272, 0x13273, 0x13274, 0x13275, 0x13276, 0x13277, 0x13278, 0x13279, 0x1327a, 0x1327b, 0x1327c, 0x1327d, 0x1327e, 0x1327f, 0x13280, 0x13281
};

void BM_collation_232(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_232, cps_232 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_232);

uint32_t cps_233[] = {
0x13282, 0x13283, 0x13284, 0x13285, 0x13286, 0x13287, 0x13288, 0x13289, 0x1328a, 0x1328b, 0x1328c, 0x1328d, 0x1328e, 0x1328f, 0x13290, 0x13291, 0x13292, 0x13293, 0x13294, 0x13295, 0x13296, 0x13297, 0x13298, 0x13299, 0x1329a, 0x1329b, 0x1329c, 0x1329d, 0x1329e, 0x1329f, 0x132a0, 0x132a1, 0x132a2, 0x132a3, 0x132a4, 0x132a5, 0x132a6, 0x132a7, 0x132a8, 0x132a9, 0x132aa, 0x132ab, 0x132ac, 0x132ad, 0x132ae, 0x132af, 0x132b0, 0x132b1, 0x132b2, 0x132b3, 0x132b4, 0x132b5, 0x132b6, 0x132b7, 0x132b8, 0x132b9, 0x132ba, 0x132bb, 0x132bc, 0x132bd, 0x132be, 0x132bf, 0x132c0, 0x132c1, 0x132c2, 0x132c3, 0x132c4, 0x132c5, 0x132c6, 0x132c7, 0x132c8, 0x132c9, 0x132ca, 0x132cb, 0x132cc, 0x132cd, 0x132ce, 0x132cf, 0x132d0, 0x132d1, 0x132d2, 0x132d3, 0x132d4, 0x132d5, 0x132d6, 0x132d7, 0x132d8, 0x132d9, 0x132da, 0x132db, 0x132dc, 0x132dd, 0x132de, 0x132df, 0x132e0, 0x132e1, 0x132e2, 0x132e3, 0x132e4, 0x132e5
};

void BM_collation_233(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_233, cps_233 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_233);

uint32_t cps_234[] = {
0x132e6, 0x132e7, 0x132e8, 0x132e9, 0x132ea, 0x132eb, 0x132ec, 0x132ed, 0x132ee, 0x132ef, 0x132f0, 0x132f1, 0x132f2, 0x132f3, 0x132f4, 0x132f5, 0x132f6, 0x132f7, 0x132f8, 0x132f9, 0x132fa, 0x132fb, 0x132fc, 0x132fd, 0x132fe, 0x132ff, 0x13300, 0x13301, 0x13302, 0x13303, 0x13304, 0x13305, 0x13306, 0x13307, 0x13308, 0x13309, 0x1330a, 0x1330b, 0x1330c, 0x1330d, 0x1330e, 0x1330f, 0x13310, 0x13311, 0x13312, 0x13313, 0x13314, 0x13315, 0x13316, 0x13317, 0x13318, 0x13319, 0x1331a, 0x1331b, 0x1331c, 0x1331d, 0x1331e, 0x1331f, 0x13320, 0x13321, 0x13322, 0x13323, 0x13324, 0x13325, 0x13326, 0x13327, 0x13328, 0x13329, 0x1332a, 0x1332b, 0x1332c, 0x1332d, 0x1332e, 0x1332f, 0x13330, 0x13331, 0x13332, 0x13333, 0x13334, 0x13335, 0x13336, 0x13337, 0x13338, 0x13339, 0x1333a, 0x1333b, 0x1333c, 0x1333d, 0x1333e, 0x1333f, 0x13340, 0x13341, 0x13342, 0x13343, 0x13344, 0x13345, 0x13346, 0x13347, 0x13348, 0x13349
};

void BM_collation_234(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_234, cps_234 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_234);

uint32_t cps_235[] = {
0x1334a, 0x1334b, 0x1334c, 0x1334d, 0x1334e, 0x1334f, 0x13350, 0x13351, 0x13352, 0x13353, 0x13354, 0x13355, 0x13356, 0x13357, 0x13358, 0x13359, 0x1335a, 0x1335b, 0x1335c, 0x1335d, 0x1335e, 0x1335f, 0x13360, 0x13361, 0x13362, 0x13363, 0x13364, 0x13365, 0x13366, 0x13367, 0x13368, 0x13369, 0x1336a, 0x1336b, 0x1336c, 0x1336d, 0x1336e, 0x1336f, 0x13370, 0x13371, 0x13372, 0x13373, 0x13374, 0x13375, 0x13376, 0x13377, 0x13378, 0x13379, 0x1337a, 0x1337b, 0x1337c, 0x1337d, 0x1337e, 0x1337f, 0x13380, 0x13381, 0x13382, 0x13383, 0x13384, 0x13385, 0x13386, 0x13387, 0x13388, 0x13389, 0x1338a, 0x1338b, 0x1338c, 0x1338d, 0x1338e, 0x1338f, 0x13390, 0x13391, 0x13392, 0x13393, 0x13394, 0x13395, 0x13396, 0x13397, 0x13398, 0x13399, 0x1339a, 0x1339b, 0x1339c, 0x1339d, 0x1339e, 0x1339f, 0x133a0, 0x133a1, 0x133a2, 0x133a3, 0x133a4, 0x133a5, 0x133a6, 0x133a7, 0x133a8, 0x133a9, 0x133aa, 0x133ab, 0x133ac, 0x133ad
};

void BM_collation_235(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_235, cps_235 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_235);

uint32_t cps_236[] = {
0x133ae, 0x133af, 0x133b0, 0x133b1, 0x133b2, 0x133b3, 0x133b4, 0x133b5, 0x133b6, 0x133b7, 0x133b8, 0x133b9, 0x133ba, 0x133bb, 0x133bc, 0x133bd, 0x133be, 0x133bf, 0x133c0, 0x133c1, 0x133c2, 0x133c3, 0x133c4, 0x133c5, 0x133c6, 0x133c7, 0x133c8, 0x133c9, 0x133ca, 0x133cb, 0x133cc, 0x133cd, 0x133ce, 0x133cf, 0x133d0, 0x133d1, 0x133d2, 0x133d3, 0x133d4, 0x133d5, 0x133d6, 0x133d7, 0x133d8, 0x133d9, 0x133da, 0x133db, 0x133dc, 0x133dd, 0x133de, 0x133df, 0x133e0, 0x133e1, 0x133e2, 0x133e3, 0x133e4, 0x133e5, 0x133e6, 0x133e7, 0x133e8, 0x133e9, 0x133ea, 0x133eb, 0x133ec, 0x133ed, 0x133ee, 0x133ef, 0x133f0, 0x133f1, 0x133f2, 0x133f3, 0x133f4, 0x133f5, 0x133f6, 0x133f7, 0x133f8, 0x133f9, 0x133fa, 0x133fb, 0x133fc, 0x133fd, 0x133fe, 0x133ff, 0x13400, 0x13401, 0x13402, 0x13403, 0x13404, 0x13405, 0x13406, 0x13407, 0x13408, 0x13409, 0x1340a, 0x1340b, 0x1340c, 0x1340d, 0x1340e, 0x1340f, 0x13410, 0x13411
};

void BM_collation_236(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_236, cps_236 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_236);

uint32_t cps_237[] = {
0x13412, 0x13413, 0x13414, 0x13415, 0x13416, 0x13417, 0x13418, 0x13419, 0x1341a, 0x1341b, 0x1341c, 0x1341d, 0x1341e, 0x1341f, 0x13420, 0x13421, 0x13422, 0x13423, 0x13424, 0x13425, 0x13426, 0x13427, 0x13428, 0x13429, 0x1342a, 0x1342b, 0x1342c, 0x1342d, 0x1342e, 0x14400, 0x14401, 0x14402, 0x14403, 0x14404, 0x14405, 0x14406, 0x14407, 0x14408, 0x14409, 0x1440a, 0x1440b, 0x1440c, 0x1440d, 0x1440e, 0x1440f, 0x14410, 0x14411, 0x14412, 0x14413, 0x14414, 0x14415, 0x14416, 0x14417, 0x14418, 0x14419, 0x1441a, 0x1441b, 0x1441c, 0x1441d, 0x1441e, 0x1441f, 0x14420, 0x14421, 0x14422, 0x14423, 0x14424, 0x14425, 0x14426, 0x14427, 0x14428, 0x14429, 0x1442a, 0x1442b, 0x1442c, 0x1442d, 0x1442e, 0x1442f, 0x14430, 0x14431, 0x14432, 0x14433, 0x14434, 0x14435, 0x14436, 0x14437, 0x14438, 0x14439, 0x1443a, 0x1443b, 0x1443c, 0x1443d, 0x1443e, 0x1443f, 0x14440, 0x14441, 0x14442, 0x14443, 0x14444, 0x14445, 0x14446
};

void BM_collation_237(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_237, cps_237 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_237);

uint32_t cps_238[] = {
0x14447, 0x14448, 0x14449, 0x1444a, 0x1444b, 0x1444c, 0x1444d, 0x1444e, 0x1444f, 0x14450, 0x14451, 0x14452, 0x14453, 0x14454, 0x14455, 0x14456, 0x14457, 0x14458, 0x14459, 0x1445a, 0x1445b, 0x1445c, 0x1445d, 0x1445e, 0x1445f, 0x14460, 0x14461, 0x14462, 0x14463, 0x14464, 0x14465, 0x14466, 0x14467, 0x14468, 0x14469, 0x1446a, 0x1446b, 0x1446c, 0x1446d, 0x1446e, 0x1446f, 0x14470, 0x14471, 0x14472, 0x14473, 0x14474, 0x14475, 0x14476, 0x14477, 0x14478, 0x14479, 0x1447a, 0x1447b, 0x1447c, 0x1447d, 0x1447e, 0x1447f, 0x14480, 0x14481, 0x14482, 0x14483, 0x14484, 0x14485, 0x14486, 0x14487, 0x14488, 0x14489, 0x1448a, 0x1448b, 0x1448c, 0x1448d, 0x1448e, 0x1448f, 0x14490, 0x14491, 0x14492, 0x14493, 0x14494, 0x14495, 0x14496, 0x14497, 0x14498, 0x14499, 0x1449a, 0x1449b, 0x1449c, 0x1449d, 0x1449e, 0x1449f, 0x144a0, 0x144a1, 0x144a2, 0x144a3, 0x144a4, 0x144a5, 0x144a6, 0x144a7, 0x144a8, 0x144a9, 0x144aa
};

void BM_collation_238(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_238, cps_238 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_238);

uint32_t cps_239[] = {
0x144ab, 0x144ac, 0x144ad, 0x144ae, 0x144af, 0x144b0, 0x144b1, 0x144b2, 0x144b3, 0x144b4, 0x144b5, 0x144b6, 0x144b7, 0x144b8, 0x144b9, 0x144ba, 0x144bb, 0x144bc, 0x144bd, 0x144be, 0x144bf, 0x144c0, 0x144c1, 0x144c2, 0x144c3, 0x144c4, 0x144c5, 0x144c6, 0x144c7, 0x144c8, 0x144c9, 0x144ca, 0x144cb, 0x144cc, 0x144cd, 0x144ce, 0x144cf, 0x144d0, 0x144d1, 0x144d2, 0x144d3, 0x144d4, 0x144d5, 0x144d6, 0x144d7, 0x144d8, 0x144d9, 0x144da, 0x144db, 0x144dc, 0x144dd, 0x144de, 0x144df, 0x144e0, 0x144e1, 0x144e2, 0x144e3, 0x144e4, 0x144e5, 0x144e6, 0x144e7, 0x144e8, 0x144e9, 0x144ea, 0x144eb, 0x144ec, 0x144ed, 0x144ee, 0x144ef, 0x144f0, 0x144f1, 0x144f2, 0x144f3, 0x144f4, 0x144f5, 0x144f6, 0x144f7, 0x144f8, 0x144f9, 0x144fa, 0x144fb, 0x144fc, 0x144fd, 0x144fe, 0x144ff, 0x14500, 0x14501, 0x14502, 0x14503, 0x14504, 0x14505, 0x14506, 0x14507, 0x14508, 0x14509, 0x1450a, 0x1450b, 0x1450c, 0x1450d, 0x1450e
};

void BM_collation_239(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_239, cps_239 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_239);

uint32_t cps_240[] = {
0x1450f, 0x14510, 0x14511, 0x14512, 0x14513, 0x14514, 0x14515, 0x14516, 0x14517, 0x14518, 0x14519, 0x1451a, 0x1451b, 0x1451c, 0x1451d, 0x1451e, 0x1451f, 0x14520, 0x14521, 0x14522, 0x14523, 0x14524, 0x14525, 0x14526, 0x14527, 0x14528, 0x14529, 0x1452a, 0x1452b, 0x1452c, 0x1452d, 0x1452e, 0x1452f, 0x14530, 0x14531, 0x14532, 0x14533, 0x14534, 0x14535, 0x14536, 0x14537, 0x14538, 0x14539, 0x1453a, 0x1453b, 0x1453c, 0x1453d, 0x1453e, 0x1453f, 0x14540, 0x14541, 0x14542, 0x14543, 0x14544, 0x14545, 0x14546, 0x14547, 0x14548, 0x14549, 0x1454a, 0x1454b, 0x1454c, 0x1454d, 0x1454e, 0x1454f, 0x14550, 0x14551, 0x14552, 0x14553, 0x14554, 0x14555, 0x14556, 0x14557, 0x14558, 0x14559, 0x1455a, 0x1455b, 0x1455c, 0x1455d, 0x1455e, 0x1455f, 0x14560, 0x14561, 0x14562, 0x14563, 0x14564, 0x14565, 0x14566, 0x14567, 0x14568, 0x14569, 0x1456a, 0x1456b, 0x1456c, 0x1456d, 0x1456e, 0x1456f, 0x14570, 0x14571, 0x14572
};

void BM_collation_240(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_240, cps_240 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_240);

uint32_t cps_241[] = {
0x14573, 0x14574, 0x14575, 0x14576, 0x14577, 0x14578, 0x14579, 0x1457a, 0x1457b, 0x1457c, 0x1457d, 0x1457e, 0x1457f, 0x14580, 0x14581, 0x14582, 0x14583, 0x14584, 0x14585, 0x14586, 0x14587, 0x14588, 0x14589, 0x1458a, 0x1458b, 0x1458c, 0x1458d, 0x1458e, 0x1458f, 0x14590, 0x14591, 0x14592, 0x14593, 0x14594, 0x14595, 0x14596, 0x14597, 0x14598, 0x14599, 0x1459a, 0x1459b, 0x1459c, 0x1459d, 0x1459e, 0x1459f, 0x145a0, 0x145a1, 0x145a2, 0x145a3, 0x145a4, 0x145a5, 0x145a6, 0x145a7, 0x145a8, 0x145a9, 0x145aa, 0x145ab, 0x145ac, 0x145ad, 0x145ae, 0x145af, 0x145b0, 0x145b1, 0x145b2, 0x145b3, 0x145b4, 0x145b5, 0x145b6, 0x145b7, 0x145b8, 0x145b9, 0x145ba, 0x145bb, 0x145bc, 0x145bd, 0x145be, 0x145bf, 0x145c0, 0x145c1, 0x145c2, 0x145c3, 0x145c4, 0x145c5, 0x145c6, 0x145c7, 0x145c8, 0x145c9, 0x145ca, 0x145cb, 0x145cc, 0x145cd, 0x145ce, 0x145cf, 0x145d0, 0x145d1, 0x145d2, 0x145d3, 0x145d4, 0x145d5, 0x145d6
};

void BM_collation_241(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_241, cps_241 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_241);

uint32_t cps_242[] = {
0x145d7, 0x145d8, 0x145d9, 0x145da, 0x145db, 0x145dc, 0x145dd, 0x145de, 0x145df, 0x145e0, 0x145e1, 0x145e2, 0x145e3, 0x145e4, 0x145e5, 0x145e6, 0x145e7, 0x145e8, 0x145e9, 0x145ea, 0x145eb, 0x145ec, 0x145ed, 0x145ee, 0x145ef, 0x145f0, 0x145f1, 0x145f2, 0x145f3, 0x145f4, 0x145f5, 0x145f6, 0x145f7, 0x145f8, 0x145f9, 0x145fa, 0x145fb, 0x145fc, 0x145fd, 0x145fe, 0x145ff, 0x14600, 0x14601, 0x14602, 0x14603, 0x14604, 0x14605, 0x14606, 0x14607, 0x14608, 0x14609, 0x1460a, 0x1460b, 0x1460c, 0x1460d, 0x1460e, 0x1460f, 0x14610, 0x14611, 0x14612, 0x14613, 0x14614, 0x14615, 0x14616, 0x14617, 0x14618, 0x14619, 0x1461a, 0x1461b, 0x1461c, 0x1461d, 0x1461e, 0x1461f, 0x14620, 0x14621, 0x14622, 0x14623, 0x14624, 0x14625, 0x14626, 0x14627, 0x14628, 0x14629, 0x1462a, 0x1462b, 0x1462c, 0x1462d, 0x1462e, 0x1462f, 0x14630, 0x14631, 0x14632, 0x14633, 0x14634, 0x14635, 0x14636, 0x14637, 0x14638, 0x14639, 0x1463a
};

void BM_collation_242(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_242, cps_242 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_242);

uint32_t cps_243[] = {
0x1463b, 0x1463c, 0x1463d, 0x1463e, 0x1463f, 0x14640, 0x14641, 0x14642, 0x14643, 0x14644, 0x14645, 0x14646, 0x16800, 0x16801, 0x16802, 0x16803, 0x16804, 0x16805, 0x16806, 0x16807, 0x16808, 0x16809, 0x1680a, 0x1680b, 0x1680c, 0x1680d, 0x1680e, 0x1680f, 0x16810, 0x16811, 0x16812, 0x16813, 0x16814, 0x16815, 0x16816, 0x16817, 0x16818, 0x16819, 0x1681a, 0x1681b, 0x1681c, 0x1681d, 0x1681e, 0x1681f, 0x16820, 0x16821, 0x16822, 0x16823, 0x16824, 0x16825, 0x16826, 0x16827, 0x16828, 0x16829, 0x1682a, 0x1682b, 0x1682c, 0x1682d, 0x1682e, 0x1682f, 0x16830, 0x16831, 0x16832, 0x16833, 0x16834, 0x16835, 0x16836, 0x16837, 0x16838, 0x16839, 0x1683a, 0x1683b, 0x1683c, 0x1683d, 0x1683e, 0x1683f, 0x16840, 0x16841, 0x16842, 0x16843, 0x16844, 0x16845, 0x16846, 0x16847, 0x16848, 0x16849, 0x1684a, 0x1684b, 0x1684c, 0x1684d, 0x1684e, 0x1684f, 0x16850, 0x16851, 0x16852, 0x16853, 0x16854, 0x16855, 0x16856, 0x16857
};

void BM_collation_243(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_243, cps_243 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_243);

uint32_t cps_244[] = {
0x16858, 0x16859, 0x1685a, 0x1685b, 0x1685c, 0x1685d, 0x1685e, 0x1685f, 0x16860, 0x16861, 0x16862, 0x16863, 0x16864, 0x16865, 0x16866, 0x16867, 0x16868, 0x16869, 0x1686a, 0x1686b, 0x1686c, 0x1686d, 0x1686e, 0x1686f, 0x16870, 0x16871, 0x16872, 0x16873, 0x16874, 0x16875, 0x16876, 0x16877, 0x16878, 0x16879, 0x1687a, 0x1687b, 0x1687c, 0x1687d, 0x1687e, 0x1687f, 0x16880, 0x16881, 0x16882, 0x16883, 0x16884, 0x16885, 0x16886, 0x16887, 0x16888, 0x16889, 0x1688a, 0x1688b, 0x1688c, 0x1688d, 0x1688e, 0x1688f, 0x16890, 0x16891, 0x16892, 0x16893, 0x16894, 0x16895, 0x16896, 0x16897, 0x16898, 0x16899, 0x1689a, 0x1689b, 0x1689c, 0x1689d, 0x1689e, 0x1689f, 0x168a0, 0x168a1, 0x168a2, 0x168a3, 0x168a4, 0x168a5, 0x168a6, 0x168a7, 0x168a8, 0x168a9, 0x168aa, 0x168ab, 0x168ac, 0x168ad, 0x168ae, 0x168af, 0x168b0, 0x168b1, 0x168b2, 0x168b3, 0x168b4, 0x168b5, 0x168b6, 0x168b7, 0x168b8, 0x168b9, 0x168ba, 0x168bb
};

void BM_collation_244(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_244, cps_244 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_244);

uint32_t cps_245[] = {
0x168bc, 0x168bd, 0x168be, 0x168bf, 0x168c0, 0x168c1, 0x168c2, 0x168c3, 0x168c4, 0x168c5, 0x168c6, 0x168c7, 0x168c8, 0x168c9, 0x168ca, 0x168cb, 0x168cc, 0x168cd, 0x168ce, 0x168cf, 0x168d0, 0x168d1, 0x168d2, 0x168d3, 0x168d4, 0x168d5, 0x168d6, 0x168d7, 0x168d8, 0x168d9, 0x168da, 0x168db, 0x168dc, 0x168dd, 0x168de, 0x168df, 0x168e0, 0x168e1, 0x168e2, 0x168e3, 0x168e4, 0x168e5, 0x168e6, 0x168e7, 0x168e8, 0x168e9, 0x168ea, 0x168eb, 0x168ec, 0x168ed, 0x168ee, 0x168ef, 0x168f0, 0x168f1, 0x168f2, 0x168f3, 0x168f4, 0x168f5, 0x168f6, 0x168f7, 0x168f8, 0x168f9, 0x168fa, 0x168fb, 0x168fc, 0x168fd, 0x168fe, 0x168ff, 0x16900, 0x16901, 0x16902, 0x16903, 0x16904, 0x16905, 0x16906, 0x16907, 0x16908, 0x16909, 0x1690a, 0x1690b, 0x1690c, 0x1690d, 0x1690e, 0x1690f, 0x16910, 0x16911, 0x16912, 0x16913, 0x16914, 0x16915, 0x16916, 0x16917, 0x16918, 0x16919, 0x1691a, 0x1691b, 0x1691c, 0x1691d, 0x1691e, 0x1691f
};

void BM_collation_245(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_245, cps_245 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_245);

uint32_t cps_246[] = {
0x16920, 0x16921, 0x16922, 0x16923, 0x16924, 0x16925, 0x16926, 0x16927, 0x16928, 0x16929, 0x1692a, 0x1692b, 0x1692c, 0x1692d, 0x1692e, 0x1692f, 0x16930, 0x16931, 0x16932, 0x16933, 0x16934, 0x16935, 0x16936, 0x16937, 0x16938, 0x16939, 0x1693a, 0x1693b, 0x1693c, 0x1693d, 0x1693e, 0x1693f, 0x16940, 0x16941, 0x16942, 0x16943, 0x16944, 0x16945, 0x16946, 0x16947, 0x16948, 0x16949, 0x1694a, 0x1694b, 0x1694c, 0x1694d, 0x1694e, 0x1694f, 0x16950, 0x16951, 0x16952, 0x16953, 0x16954, 0x16955, 0x16956, 0x16957, 0x16958, 0x16959, 0x1695a, 0x1695b, 0x1695c, 0x1695d, 0x1695e, 0x1695f, 0x16960, 0x16961, 0x16962, 0x16963, 0x16964, 0x16965, 0x16966, 0x16967, 0x16968, 0x16969, 0x1696a, 0x1696b, 0x1696c, 0x1696d, 0x1696e, 0x1696f, 0x16970, 0x16971, 0x16972, 0x16973, 0x16974, 0x16975, 0x16976, 0x16977, 0x16978, 0x16979, 0x1697a, 0x1697b, 0x1697c, 0x1697d, 0x1697e, 0x1697f, 0x16980, 0x16981, 0x16982, 0x16983
};

void BM_collation_246(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_246, cps_246 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_246);

uint32_t cps_247[] = {
0x16984, 0x16985, 0x16986, 0x16987, 0x16988, 0x16989, 0x1698a, 0x1698b, 0x1698c, 0x1698d, 0x1698e, 0x1698f, 0x16990, 0x16991, 0x16992, 0x16993, 0x16994, 0x16995, 0x16996, 0x16997, 0x16998, 0x16999, 0x1699a, 0x1699b, 0x1699c, 0x1699d, 0x1699e, 0x1699f, 0x169a0, 0x169a1, 0x169a2, 0x169a3, 0x169a4, 0x169a5, 0x169a6, 0x169a7, 0x169a8, 0x169a9, 0x169aa, 0x169ab, 0x169ac, 0x169ad, 0x169ae, 0x169af, 0x169b0, 0x169b1, 0x169b2, 0x169b3, 0x169b4, 0x169b5, 0x169b6, 0x169b7, 0x169b8, 0x169b9, 0x169ba, 0x169bb, 0x169bc, 0x169bd, 0x169be, 0x169bf, 0x169c0, 0x169c1, 0x169c2, 0x169c3, 0x169c4, 0x169c5, 0x169c6, 0x169c7, 0x169c8, 0x169c9, 0x169ca, 0x169cb, 0x169cc, 0x169cd, 0x169ce, 0x169cf, 0x169d0, 0x169d1, 0x169d2, 0x169d3, 0x169d4, 0x169d5, 0x169d6, 0x169d7, 0x169d8, 0x169d9, 0x169da, 0x169db, 0x169dc, 0x169dd, 0x169de, 0x169df, 0x169e0, 0x169e1, 0x169e2, 0x169e3, 0x169e4, 0x169e5, 0x169e6, 0x169e7
};

void BM_collation_247(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_247, cps_247 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_247);

uint32_t cps_248[] = {
0x169e8, 0x169e9, 0x169ea, 0x169eb, 0x169ec, 0x169ed, 0x169ee, 0x169ef, 0x169f0, 0x169f1, 0x169f2, 0x169f3, 0x169f4, 0x169f5, 0x169f6, 0x169f7, 0x169f8, 0x169f9, 0x169fa, 0x169fb, 0x169fc, 0x169fd, 0x169fe, 0x169ff, 0x16a00, 0x16a01, 0x16a02, 0x16a03, 0x16a04, 0x16a05, 0x16a06, 0x16a07, 0x16a08, 0x16a09, 0x16a0a, 0x16a0b, 0x16a0c, 0x16a0d, 0x16a0e, 0x16a0f, 0x16a10, 0x16a11, 0x16a12, 0x16a13, 0x16a14, 0x16a15, 0x16a16, 0x16a17, 0x16a18, 0x16a19, 0x16a1a, 0x16a1b, 0x16a1c, 0x16a1d, 0x16a1e, 0x16a1f, 0x16a20, 0x16a21, 0x16a22, 0x16a23, 0x16a24, 0x16a25, 0x16a26, 0x16a27, 0x16a28, 0x16a29, 0x16a2a, 0x16a2b, 0x16a2c, 0x16a2d, 0x16a2e, 0x16a2f, 0x16a30, 0x16a31, 0x16a32, 0x16a33, 0x16a34, 0x16a35, 0x16a36, 0x16a37, 0x16a38, 0x16a40, 0x16a41, 0x16a42, 0x16a43, 0x16a44, 0x16a45, 0x16a46, 0x16a47, 0x16a48, 0x16a49, 0x16a4a, 0x16a4b, 0x16a4c, 0x16a4d, 0x16a4e, 0x16a4f, 0x16a50, 0x16a51, 0x16a52
};

void BM_collation_248(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_248, cps_248 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_248);

uint32_t cps_249[] = {
0x16a53, 0x16a54, 0x16a55, 0x16a56, 0x16a57, 0x16a58, 0x16a59, 0x16a5a, 0x16a5b, 0x16a5c, 0x16a5d, 0x16a5e, 0x16a60, 0x16a61, 0x16a62, 0x16a63, 0x16a64, 0x16a65, 0x16a66, 0x16a67, 0x16a68, 0x16a69, 0x16a6e, 0x16a6f, 0x16ad0, 0x16ad1, 0x16ad2, 0x16ad3, 0x16ad4, 0x16ad5, 0x16ad6, 0x16ad7, 0x16ad8, 0x16ad9, 0x16ada, 0x16adb, 0x16adc, 0x16add, 0x16ade, 0x16adf, 0x16ae0, 0x16ae1, 0x16ae2, 0x16ae3, 0x16ae4, 0x16ae5, 0x16ae6, 0x16ae7, 0x16ae8, 0x16ae9, 0x16aea, 0x16aeb, 0x16aec, 0x16aed, 0x16af0, 0x16af1, 0x16af2, 0x16af3, 0x16af4, 0x16af5, 0x16b00, 0x16b01, 0x16b02, 0x16b03, 0x16b04, 0x16b05, 0x16b06, 0x16b07, 0x16b08, 0x16b09, 0x16b0a, 0x16b0b, 0x16b0c, 0x16b0d, 0x16b0e, 0x16b0f, 0x16b10, 0x16b11, 0x16b12, 0x16b13, 0x16b14, 0x16b15, 0x16b16, 0x16b17, 0x16b18, 0x16b19, 0x16b1a, 0x16b1b, 0x16b1c, 0x16b1d, 0x16b1e, 0x16b1f, 0x16b20, 0x16b21, 0x16b22, 0x16b23, 0x16b24, 0x16b25, 0x16b26, 0x16b27
};

void BM_collation_249(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_249, cps_249 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_249);

uint32_t cps_250[] = {
0x16b28, 0x16b29, 0x16b2a, 0x16b2b, 0x16b2c, 0x16b2d, 0x16b2e, 0x16b2f, 0x16b30, 0x16b31, 0x16b32, 0x16b33, 0x16b34, 0x16b35, 0x16b36, 0x16b37, 0x16b38, 0x16b39, 0x16b3a, 0x16b3b, 0x16b3c, 0x16b3d, 0x16b3e, 0x16b3f, 0x16b40, 0x16b41, 0x16b42, 0x16b43, 0x16b44, 0x16b45, 0x16b50, 0x16b51, 0x16b52, 0x16b53, 0x16b54, 0x16b55, 0x16b56, 0x16b57, 0x16b58, 0x16b59, 0x16b5b, 0x16b5c, 0x16b5d, 0x16b5e, 0x16b5f, 0x16b60, 0x16b61, 0x16b63, 0x16b64, 0x16b65, 0x16b66, 0x16b67, 0x16b68, 0x16b69, 0x16b6a, 0x16b6b, 0x16b6c, 0x16b6d, 0x16b6e, 0x16b6f, 0x16b70, 0x16b71, 0x16b72, 0x16b73, 0x16b74, 0x16b75, 0x16b76, 0x16b77, 0x16b7d, 0x16b7e, 0x16b7f, 0x16b80, 0x16b81, 0x16b82, 0x16b83, 0x16b84, 0x16b85, 0x16b86, 0x16b87, 0x16b88, 0x16b89, 0x16b8a, 0x16b8b, 0x16b8c, 0x16b8d, 0x16b8e, 0x16b8f, 0x16f00, 0x16f01, 0x16f02, 0x16f03, 0x16f04, 0x16f05, 0x16f06, 0x16f07, 0x16f08, 0x16f09, 0x16f0a, 0x16f0b, 0x16f0c
};

void BM_collation_250(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_250, cps_250 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_250);

uint32_t cps_251[] = {
0x16f0d, 0x16f0e, 0x16f0f, 0x16f10, 0x16f11, 0x16f12, 0x16f13, 0x16f14, 0x16f15, 0x16f16, 0x16f17, 0x16f18, 0x16f19, 0x16f1a, 0x16f1b, 0x16f1c, 0x16f1d, 0x16f1e, 0x16f1f, 0x16f20, 0x16f21, 0x16f22, 0x16f23, 0x16f24, 0x16f25, 0x16f26, 0x16f27, 0x16f28, 0x16f29, 0x16f2a, 0x16f2b, 0x16f2c, 0x16f2d, 0x16f2e, 0x16f2f, 0x16f30, 0x16f31, 0x16f32, 0x16f33, 0x16f34, 0x16f35, 0x16f36, 0x16f37, 0x16f38, 0x16f39, 0x16f3a, 0x16f3b, 0x16f3c, 0x16f3d, 0x16f3e, 0x16f3f, 0x16f40, 0x16f41, 0x16f42, 0x16f43, 0x16f44, 0x16f50, 0x16f51, 0x16f52, 0x16f53, 0x16f54, 0x16f55, 0x16f56, 0x16f57, 0x16f58, 0x16f59, 0x16f5a, 0x16f5b, 0x16f5c, 0x16f5d, 0x16f5e, 0x16f5f, 0x16f60, 0x16f61, 0x16f62, 0x16f63, 0x16f64, 0x16f65, 0x16f66, 0x16f67, 0x16f68, 0x16f69, 0x16f6a, 0x16f6b, 0x16f6c, 0x16f6d, 0x16f6e, 0x16f6f, 0x16f70, 0x16f71, 0x16f72, 0x16f73, 0x16f74, 0x16f75, 0x16f76, 0x16f77, 0x16f78, 0x16f79, 0x16f7a, 0x16f7b
};

void BM_collation_251(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_251, cps_251 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_251);

uint32_t cps_252[] = {
0x16f7c, 0x16f7d, 0x16f7e, 0x16f8f, 0x16f90, 0x16f91, 0x16f92, 0x16f93, 0x16f94, 0x16f95, 0x16f96, 0x16f97, 0x16f98, 0x16f99, 0x16f9a, 0x16f9b, 0x16f9c, 0x16f9d, 0x16f9e, 0x16f9f, 0x16fe0, 0x16fe1, 0x17000, 0x17001, 0x17002, 0x17003, 0x17004, 0x17005, 0x17006, 0x17007, 0x17008, 0x17009, 0x1700a, 0x1700b, 0x1700c, 0x1700d, 0x1700e, 0x1700f, 0x17010, 0x17011, 0x17012, 0x17013, 0x17014, 0x17015, 0x17016, 0x17017, 0x17018, 0x17019, 0x1701a, 0x1701b, 0x1701c, 0x1701d, 0x1701e, 0x1701f, 0x17020, 0x17021, 0x17022, 0x17023, 0x17024, 0x17025, 0x17026, 0x17027, 0x17028, 0x17029, 0x1702a, 0x1702b, 0x1702c, 0x1702d, 0x1702e, 0x1702f, 0x17030, 0x17031, 0x17032, 0x17033, 0x17034, 0x17035, 0x17036, 0x17037, 0x17038, 0x17039, 0x1703a, 0x1703b, 0x1703c, 0x1703d, 0x1703e, 0x1703f, 0x17040, 0x17041, 0x17042, 0x17043, 0x17044, 0x17045, 0x17046, 0x17047, 0x17048, 0x17049, 0x1704a, 0x1704b, 0x1704c, 0x1704d
};

void BM_collation_252(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_252, cps_252 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_252);

uint32_t cps_253[] = {
0x1704e, 0x1704f, 0x17050, 0x17051, 0x17052, 0x17053, 0x17054, 0x17055, 0x17056, 0x17057, 0x17058, 0x17059, 0x1705a, 0x1705b, 0x1705c, 0x1705d, 0x1705e, 0x1705f, 0x17060, 0x17061, 0x17062, 0x17063, 0x17064, 0x17065, 0x17066, 0x17067, 0x17068, 0x17069, 0x1706a, 0x1706b, 0x1706c, 0x1706d, 0x1706e, 0x1706f, 0x17070, 0x17071, 0x17072, 0x17073, 0x17074, 0x17075, 0x17076, 0x17077, 0x17078, 0x17079, 0x1707a, 0x1707b, 0x1707c, 0x1707d, 0x1707e, 0x1707f, 0x17080, 0x17081, 0x17082, 0x17083, 0x17084, 0x17085, 0x17086, 0x17087, 0x17088, 0x17089, 0x1708a, 0x1708b, 0x1708c, 0x1708d, 0x1708e, 0x1708f, 0x17090, 0x17091, 0x17092, 0x17093, 0x17094, 0x17095, 0x17096, 0x17097, 0x17098, 0x17099, 0x1709a, 0x1709b, 0x1709c, 0x1709d, 0x1709e, 0x1709f, 0x170a0, 0x170a1, 0x170a2, 0x170a3, 0x170a4, 0x170a5, 0x170a6, 0x170a7, 0x170a8, 0x170a9, 0x170aa, 0x170ab, 0x170ac, 0x170ad, 0x170ae, 0x170af, 0x170b0, 0x170b1
};

void BM_collation_253(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_253, cps_253 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_253);

uint32_t cps_254[] = {
0x170b2, 0x170b3, 0x170b4, 0x170b5, 0x170b6, 0x170b7, 0x170b8, 0x170b9, 0x170ba, 0x170bb, 0x170bc, 0x170bd, 0x170be, 0x170bf, 0x170c0, 0x170c1, 0x170c2, 0x170c3, 0x170c4, 0x170c5, 0x170c6, 0x170c7, 0x170c8, 0x170c9, 0x170ca, 0x170cb, 0x170cc, 0x170cd, 0x170ce, 0x170cf, 0x170d0, 0x170d1, 0x170d2, 0x170d3, 0x170d4, 0x170d5, 0x170d6, 0x170d7, 0x170d8, 0x170d9, 0x170da, 0x170db, 0x170dc, 0x170dd, 0x170de, 0x170df, 0x170e0, 0x170e1, 0x170e2, 0x170e3, 0x170e4, 0x170e5, 0x170e6, 0x170e7, 0x170e8, 0x170e9, 0x170ea, 0x170eb, 0x170ec, 0x170ed, 0x170ee, 0x170ef, 0x170f0, 0x170f1, 0x170f2, 0x170f3, 0x170f4, 0x170f5, 0x170f6, 0x170f7, 0x170f8, 0x170f9, 0x170fa, 0x170fb, 0x170fc, 0x170fd, 0x170fe, 0x170ff, 0x17100, 0x17101, 0x17102, 0x17103, 0x17104, 0x17105, 0x17106, 0x17107, 0x17108, 0x17109, 0x1710a, 0x1710b, 0x1710c, 0x1710d, 0x1710e, 0x1710f, 0x17110, 0x17111, 0x17112, 0x17113, 0x17114, 0x17115
};

void BM_collation_254(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_254, cps_254 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_254);

uint32_t cps_255[] = {
0x17116, 0x17117, 0x17118, 0x17119, 0x1711a, 0x1711b, 0x1711c, 0x1711d, 0x1711e, 0x1711f, 0x17120, 0x17121, 0x17122, 0x17123, 0x17124, 0x17125, 0x17126, 0x17127, 0x17128, 0x17129, 0x1712a, 0x1712b, 0x1712c, 0x1712d, 0x1712e, 0x1712f, 0x17130, 0x17131, 0x17132, 0x17133, 0x17134, 0x17135, 0x17136, 0x17137, 0x17138, 0x17139, 0x1713a, 0x1713b, 0x1713c, 0x1713d, 0x1713e, 0x1713f, 0x17140, 0x17141, 0x17142, 0x17143, 0x17144, 0x17145, 0x17146, 0x17147, 0x17148, 0x17149, 0x1714a, 0x1714b, 0x1714c, 0x1714d, 0x1714e, 0x1714f, 0x17150, 0x17151, 0x17152, 0x17153, 0x17154, 0x17155, 0x17156, 0x17157, 0x17158, 0x17159, 0x1715a, 0x1715b, 0x1715c, 0x1715d, 0x1715e, 0x1715f, 0x17160, 0x17161, 0x17162, 0x17163, 0x17164, 0x17165, 0x17166, 0x17167, 0x17168, 0x17169, 0x1716a, 0x1716b, 0x1716c, 0x1716d, 0x1716e, 0x1716f, 0x17170, 0x17171, 0x17172, 0x17173, 0x17174, 0x17175, 0x17176, 0x17177, 0x17178, 0x17179
};

void BM_collation_255(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_255, cps_255 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_255);

uint32_t cps_256[] = {
0x1717a, 0x1717b, 0x1717c, 0x1717d, 0x1717e, 0x1717f, 0x17180, 0x17181, 0x17182, 0x17183, 0x17184, 0x17185, 0x17186, 0x17187, 0x17188, 0x17189, 0x1718a, 0x1718b, 0x1718c, 0x1718d, 0x1718e, 0x1718f, 0x17190, 0x17191, 0x17192, 0x17193, 0x17194, 0x17195, 0x17196, 0x17197, 0x17198, 0x17199, 0x1719a, 0x1719b, 0x1719c, 0x1719d, 0x1719e, 0x1719f, 0x171a0, 0x171a1, 0x171a2, 0x171a3, 0x171a4, 0x171a5, 0x171a6, 0x171a7, 0x171a8, 0x171a9, 0x171aa, 0x171ab, 0x171ac, 0x171ad, 0x171ae, 0x171af, 0x171b0, 0x171b1, 0x171b2, 0x171b3, 0x171b4, 0x171b5, 0x171b6, 0x171b7, 0x171b8, 0x171b9, 0x171ba, 0x171bb, 0x171bc, 0x171bd, 0x171be, 0x171bf, 0x171c0, 0x171c1, 0x171c2, 0x171c3, 0x171c4, 0x171c5, 0x171c6, 0x171c7, 0x171c8, 0x171c9, 0x171ca, 0x171cb, 0x171cc, 0x171cd, 0x171ce, 0x171cf, 0x171d0, 0x171d1, 0x171d2, 0x171d3, 0x171d4, 0x171d5, 0x171d6, 0x171d7, 0x171d8, 0x171d9, 0x171da, 0x171db, 0x171dc, 0x171dd
};

void BM_collation_256(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_256, cps_256 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_256);

uint32_t cps_257[] = {
0x171de, 0x171df, 0x171e0, 0x171e1, 0x171e2, 0x171e3, 0x171e4, 0x171e5, 0x171e6, 0x171e7, 0x171e8, 0x171e9, 0x171ea, 0x171eb, 0x171ec, 0x171ed, 0x171ee, 0x171ef, 0x171f0, 0x171f1, 0x171f2, 0x171f3, 0x171f4, 0x171f5, 0x171f6, 0x171f7, 0x171f8, 0x171f9, 0x171fa, 0x171fb, 0x171fc, 0x171fd, 0x171fe, 0x171ff, 0x17200, 0x17201, 0x17202, 0x17203, 0x17204, 0x17205, 0x17206, 0x17207, 0x17208, 0x17209, 0x1720a, 0x1720b, 0x1720c, 0x1720d, 0x1720e, 0x1720f, 0x17210, 0x17211, 0x17212, 0x17213, 0x17214, 0x17215, 0x17216, 0x17217, 0x17218, 0x17219, 0x1721a, 0x1721b, 0x1721c, 0x1721d, 0x1721e, 0x1721f, 0x17220, 0x17221, 0x17222, 0x17223, 0x17224, 0x17225, 0x17226, 0x17227, 0x17228, 0x17229, 0x1722a, 0x1722b, 0x1722c, 0x1722d, 0x1722e, 0x1722f, 0x17230, 0x17231, 0x17232, 0x17233, 0x17234, 0x17235, 0x17236, 0x17237, 0x17238, 0x17239, 0x1723a, 0x1723b, 0x1723c, 0x1723d, 0x1723e, 0x1723f, 0x17240, 0x17241
};

void BM_collation_257(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_257, cps_257 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_257);

uint32_t cps_258[] = {
0x17242, 0x17243, 0x17244, 0x17245, 0x17246, 0x17247, 0x17248, 0x17249, 0x1724a, 0x1724b, 0x1724c, 0x1724d, 0x1724e, 0x1724f, 0x17250, 0x17251, 0x17252, 0x17253, 0x17254, 0x17255, 0x17256, 0x17257, 0x17258, 0x17259, 0x1725a, 0x1725b, 0x1725c, 0x1725d, 0x1725e, 0x1725f, 0x17260, 0x17261, 0x17262, 0x17263, 0x17264, 0x17265, 0x17266, 0x17267, 0x17268, 0x17269, 0x1726a, 0x1726b, 0x1726c, 0x1726d, 0x1726e, 0x1726f, 0x17270, 0x17271, 0x17272, 0x17273, 0x17274, 0x17275, 0x17276, 0x17277, 0x17278, 0x17279, 0x1727a, 0x1727b, 0x1727c, 0x1727d, 0x1727e, 0x1727f, 0x17280, 0x17281, 0x17282, 0x17283, 0x17284, 0x17285, 0x17286, 0x17287, 0x17288, 0x17289, 0x1728a, 0x1728b, 0x1728c, 0x1728d, 0x1728e, 0x1728f, 0x17290, 0x17291, 0x17292, 0x17293, 0x17294, 0x17295, 0x17296, 0x17297, 0x17298, 0x17299, 0x1729a, 0x1729b, 0x1729c, 0x1729d, 0x1729e, 0x1729f, 0x172a0, 0x172a1, 0x172a2, 0x172a3, 0x172a4, 0x172a5
};

void BM_collation_258(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_258, cps_258 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_258);

uint32_t cps_259[] = {
0x172a6, 0x172a7, 0x172a8, 0x172a9, 0x172aa, 0x172ab, 0x172ac, 0x172ad, 0x172ae, 0x172af, 0x172b0, 0x172b1, 0x172b2, 0x172b3, 0x172b4, 0x172b5, 0x172b6, 0x172b7, 0x172b8, 0x172b9, 0x172ba, 0x172bb, 0x172bc, 0x172bd, 0x172be, 0x172bf, 0x172c0, 0x172c1, 0x172c2, 0x172c3, 0x172c4, 0x172c5, 0x172c6, 0x172c7, 0x172c8, 0x172c9, 0x172ca, 0x172cb, 0x172cc, 0x172cd, 0x172ce, 0x172cf, 0x172d0, 0x172d1, 0x172d2, 0x172d3, 0x172d4, 0x172d5, 0x172d6, 0x172d7, 0x172d8, 0x172d9, 0x172da, 0x172db, 0x172dc, 0x172dd, 0x172de, 0x172df, 0x172e0, 0x172e1, 0x172e2, 0x172e3, 0x172e4, 0x172e5, 0x172e6, 0x172e7, 0x172e8, 0x172e9, 0x172ea, 0x172eb, 0x172ec, 0x172ed, 0x172ee, 0x172ef, 0x172f0, 0x172f1, 0x172f2, 0x172f3, 0x172f4, 0x172f5, 0x172f6, 0x172f7, 0x172f8, 0x172f9, 0x172fa, 0x172fb, 0x172fc, 0x172fd, 0x172fe, 0x172ff, 0x17300, 0x17301, 0x17302, 0x17303, 0x17304, 0x17305, 0x17306, 0x17307, 0x17308, 0x17309
};

void BM_collation_259(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_259, cps_259 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_259);

uint32_t cps_260[] = {
0x1730a, 0x1730b, 0x1730c, 0x1730d, 0x1730e, 0x1730f, 0x17310, 0x17311, 0x17312, 0x17313, 0x17314, 0x17315, 0x17316, 0x17317, 0x17318, 0x17319, 0x1731a, 0x1731b, 0x1731c, 0x1731d, 0x1731e, 0x1731f, 0x17320, 0x17321, 0x17322, 0x17323, 0x17324, 0x17325, 0x17326, 0x17327, 0x17328, 0x17329, 0x1732a, 0x1732b, 0x1732c, 0x1732d, 0x1732e, 0x1732f, 0x17330, 0x17331, 0x17332, 0x17333, 0x17334, 0x17335, 0x17336, 0x17337, 0x17338, 0x17339, 0x1733a, 0x1733b, 0x1733c, 0x1733d, 0x1733e, 0x1733f, 0x17340, 0x17341, 0x17342, 0x17343, 0x17344, 0x17345, 0x17346, 0x17347, 0x17348, 0x17349, 0x1734a, 0x1734b, 0x1734c, 0x1734d, 0x1734e, 0x1734f, 0x17350, 0x17351, 0x17352, 0x17353, 0x17354, 0x17355, 0x17356, 0x17357, 0x17358, 0x17359, 0x1735a, 0x1735b, 0x1735c, 0x1735d, 0x1735e, 0x1735f, 0x17360, 0x17361, 0x17362, 0x17363, 0x17364, 0x17365, 0x17366, 0x17367, 0x17368, 0x17369, 0x1736a, 0x1736b, 0x1736c, 0x1736d
};

void BM_collation_260(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_260, cps_260 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_260);

uint32_t cps_261[] = {
0x1736e, 0x1736f, 0x17370, 0x17371, 0x17372, 0x17373, 0x17374, 0x17375, 0x17376, 0x17377, 0x17378, 0x17379, 0x1737a, 0x1737b, 0x1737c, 0x1737d, 0x1737e, 0x1737f, 0x17380, 0x17381, 0x17382, 0x17383, 0x17384, 0x17385, 0x17386, 0x17387, 0x17388, 0x17389, 0x1738a, 0x1738b, 0x1738c, 0x1738d, 0x1738e, 0x1738f, 0x17390, 0x17391, 0x17392, 0x17393, 0x17394, 0x17395, 0x17396, 0x17397, 0x17398, 0x17399, 0x1739a, 0x1739b, 0x1739c, 0x1739d, 0x1739e, 0x1739f, 0x173a0, 0x173a1, 0x173a2, 0x173a3, 0x173a4, 0x173a5, 0x173a6, 0x173a7, 0x173a8, 0x173a9, 0x173aa, 0x173ab, 0x173ac, 0x173ad, 0x173ae, 0x173af, 0x173b0, 0x173b1, 0x173b2, 0x173b3, 0x173b4, 0x173b5, 0x173b6, 0x173b7, 0x173b8, 0x173b9, 0x173ba, 0x173bb, 0x173bc, 0x173bd, 0x173be, 0x173bf, 0x173c0, 0x173c1, 0x173c2, 0x173c3, 0x173c4, 0x173c5, 0x173c6, 0x173c7, 0x173c8, 0x173c9, 0x173ca, 0x173cb, 0x173cc, 0x173cd, 0x173ce, 0x173cf, 0x173d0, 0x173d1
};

void BM_collation_261(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_261, cps_261 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_261);

uint32_t cps_262[] = {
0x173d2, 0x173d3, 0x173d4, 0x173d5, 0x173d6, 0x173d7, 0x173d8, 0x173d9, 0x173da, 0x173db, 0x173dc, 0x173dd, 0x173de, 0x173df, 0x173e0, 0x173e1, 0x173e2, 0x173e3, 0x173e4, 0x173e5, 0x173e6, 0x173e7, 0x173e8, 0x173e9, 0x173ea, 0x173eb, 0x173ec, 0x173ed, 0x173ee, 0x173ef, 0x173f0, 0x173f1, 0x173f2, 0x173f3, 0x173f4, 0x173f5, 0x173f6, 0x173f7, 0x173f8, 0x173f9, 0x173fa, 0x173fb, 0x173fc, 0x173fd, 0x173fe, 0x173ff, 0x17400, 0x17401, 0x17402, 0x17403, 0x17404, 0x17405, 0x17406, 0x17407, 0x17408, 0x17409, 0x1740a, 0x1740b, 0x1740c, 0x1740d, 0x1740e, 0x1740f, 0x17410, 0x17411, 0x17412, 0x17413, 0x17414, 0x17415, 0x17416, 0x17417, 0x17418, 0x17419, 0x1741a, 0x1741b, 0x1741c, 0x1741d, 0x1741e, 0x1741f, 0x17420, 0x17421, 0x17422, 0x17423, 0x17424, 0x17425, 0x17426, 0x17427, 0x17428, 0x17429, 0x1742a, 0x1742b, 0x1742c, 0x1742d, 0x1742e, 0x1742f, 0x17430, 0x17431, 0x17432, 0x17433, 0x17434, 0x17435
};

void BM_collation_262(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_262, cps_262 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_262);

uint32_t cps_263[] = {
0x17436, 0x17437, 0x17438, 0x17439, 0x1743a, 0x1743b, 0x1743c, 0x1743d, 0x1743e, 0x1743f, 0x17440, 0x17441, 0x17442, 0x17443, 0x17444, 0x17445, 0x17446, 0x17447, 0x17448, 0x17449, 0x1744a, 0x1744b, 0x1744c, 0x1744d, 0x1744e, 0x1744f, 0x17450, 0x17451, 0x17452, 0x17453, 0x17454, 0x17455, 0x17456, 0x17457, 0x17458, 0x17459, 0x1745a, 0x1745b, 0x1745c, 0x1745d, 0x1745e, 0x1745f, 0x17460, 0x17461, 0x17462, 0x17463, 0x17464, 0x17465, 0x17466, 0x17467, 0x17468, 0x17469, 0x1746a, 0x1746b, 0x1746c, 0x1746d, 0x1746e, 0x1746f, 0x17470, 0x17471, 0x17472, 0x17473, 0x17474, 0x17475, 0x17476, 0x17477, 0x17478, 0x17479, 0x1747a, 0x1747b, 0x1747c, 0x1747d, 0x1747e, 0x1747f, 0x17480, 0x17481, 0x17482, 0x17483, 0x17484, 0x17485, 0x17486, 0x17487, 0x17488, 0x17489, 0x1748a, 0x1748b, 0x1748c, 0x1748d, 0x1748e, 0x1748f, 0x17490, 0x17491, 0x17492, 0x17493, 0x17494, 0x17495, 0x17496, 0x17497, 0x17498, 0x17499
};

void BM_collation_263(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_263, cps_263 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_263);

uint32_t cps_264[] = {
0x1749a, 0x1749b, 0x1749c, 0x1749d, 0x1749e, 0x1749f, 0x174a0, 0x174a1, 0x174a2, 0x174a3, 0x174a4, 0x174a5, 0x174a6, 0x174a7, 0x174a8, 0x174a9, 0x174aa, 0x174ab, 0x174ac, 0x174ad, 0x174ae, 0x174af, 0x174b0, 0x174b1, 0x174b2, 0x174b3, 0x174b4, 0x174b5, 0x174b6, 0x174b7, 0x174b8, 0x174b9, 0x174ba, 0x174bb, 0x174bc, 0x174bd, 0x174be, 0x174bf, 0x174c0, 0x174c1, 0x174c2, 0x174c3, 0x174c4, 0x174c5, 0x174c6, 0x174c7, 0x174c8, 0x174c9, 0x174ca, 0x174cb, 0x174cc, 0x174cd, 0x174ce, 0x174cf, 0x174d0, 0x174d1, 0x174d2, 0x174d3, 0x174d4, 0x174d5, 0x174d6, 0x174d7, 0x174d8, 0x174d9, 0x174da, 0x174db, 0x174dc, 0x174dd, 0x174de, 0x174df, 0x174e0, 0x174e1, 0x174e2, 0x174e3, 0x174e4, 0x174e5, 0x174e6, 0x174e7, 0x174e8, 0x174e9, 0x174ea, 0x174eb, 0x174ec, 0x174ed, 0x174ee, 0x174ef, 0x174f0, 0x174f1, 0x174f2, 0x174f3, 0x174f4, 0x174f5, 0x174f6, 0x174f7, 0x174f8, 0x174f9, 0x174fa, 0x174fb, 0x174fc, 0x174fd
};

void BM_collation_264(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_264, cps_264 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_264);

uint32_t cps_265[] = {
0x174fe, 0x174ff, 0x17500, 0x17501, 0x17502, 0x17503, 0x17504, 0x17505, 0x17506, 0x17507, 0x17508, 0x17509, 0x1750a, 0x1750b, 0x1750c, 0x1750d, 0x1750e, 0x1750f, 0x17510, 0x17511, 0x17512, 0x17513, 0x17514, 0x17515, 0x17516, 0x17517, 0x17518, 0x17519, 0x1751a, 0x1751b, 0x1751c, 0x1751d, 0x1751e, 0x1751f, 0x17520, 0x17521, 0x17522, 0x17523, 0x17524, 0x17525, 0x17526, 0x17527, 0x17528, 0x17529, 0x1752a, 0x1752b, 0x1752c, 0x1752d, 0x1752e, 0x1752f, 0x17530, 0x17531, 0x17532, 0x17533, 0x17534, 0x17535, 0x17536, 0x17537, 0x17538, 0x17539, 0x1753a, 0x1753b, 0x1753c, 0x1753d, 0x1753e, 0x1753f, 0x17540, 0x17541, 0x17542, 0x17543, 0x17544, 0x17545, 0x17546, 0x17547, 0x17548, 0x17549, 0x1754a, 0x1754b, 0x1754c, 0x1754d, 0x1754e, 0x1754f, 0x17550, 0x17551, 0x17552, 0x17553, 0x17554, 0x17555, 0x17556, 0x17557, 0x17558, 0x17559, 0x1755a, 0x1755b, 0x1755c, 0x1755d, 0x1755e, 0x1755f, 0x17560, 0x17561
};

void BM_collation_265(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_265, cps_265 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_265);

uint32_t cps_266[] = {
0x17562, 0x17563, 0x17564, 0x17565, 0x17566, 0x17567, 0x17568, 0x17569, 0x1756a, 0x1756b, 0x1756c, 0x1756d, 0x1756e, 0x1756f, 0x17570, 0x17571, 0x17572, 0x17573, 0x17574, 0x17575, 0x17576, 0x17577, 0x17578, 0x17579, 0x1757a, 0x1757b, 0x1757c, 0x1757d, 0x1757e, 0x1757f, 0x17580, 0x17581, 0x17582, 0x17583, 0x17584, 0x17585, 0x17586, 0x17587, 0x17588, 0x17589, 0x1758a, 0x1758b, 0x1758c, 0x1758d, 0x1758e, 0x1758f, 0x17590, 0x17591, 0x17592, 0x17593, 0x17594, 0x17595, 0x17596, 0x17597, 0x17598, 0x17599, 0x1759a, 0x1759b, 0x1759c, 0x1759d, 0x1759e, 0x1759f, 0x175a0, 0x175a1, 0x175a2, 0x175a3, 0x175a4, 0x175a5, 0x175a6, 0x175a7, 0x175a8, 0x175a9, 0x175aa, 0x175ab, 0x175ac, 0x175ad, 0x175ae, 0x175af, 0x175b0, 0x175b1, 0x175b2, 0x175b3, 0x175b4, 0x175b5, 0x175b6, 0x175b7, 0x175b8, 0x175b9, 0x175ba, 0x175bb, 0x175bc, 0x175bd, 0x175be, 0x175bf, 0x175c0, 0x175c1, 0x175c2, 0x175c3, 0x175c4, 0x175c5
};

void BM_collation_266(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_266, cps_266 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_266);

uint32_t cps_267[] = {
0x175c6, 0x175c7, 0x175c8, 0x175c9, 0x175ca, 0x175cb, 0x175cc, 0x175cd, 0x175ce, 0x175cf, 0x175d0, 0x175d1, 0x175d2, 0x175d3, 0x175d4, 0x175d5, 0x175d6, 0x175d7, 0x175d8, 0x175d9, 0x175da, 0x175db, 0x175dc, 0x175dd, 0x175de, 0x175df, 0x175e0, 0x175e1, 0x175e2, 0x175e3, 0x175e4, 0x175e5, 0x175e6, 0x175e7, 0x175e8, 0x175e9, 0x175ea, 0x175eb, 0x175ec, 0x175ed, 0x175ee, 0x175ef, 0x175f0, 0x175f1, 0x175f2, 0x175f3, 0x175f4, 0x175f5, 0x175f6, 0x175f7, 0x175f8, 0x175f9, 0x175fa, 0x175fb, 0x175fc, 0x175fd, 0x175fe, 0x175ff, 0x17600, 0x17601, 0x17602, 0x17603, 0x17604, 0x17605, 0x17606, 0x17607, 0x17608, 0x17609, 0x1760a, 0x1760b, 0x1760c, 0x1760d, 0x1760e, 0x1760f, 0x17610, 0x17611, 0x17612, 0x17613, 0x17614, 0x17615, 0x17616, 0x17617, 0x17618, 0x17619, 0x1761a, 0x1761b, 0x1761c, 0x1761d, 0x1761e, 0x1761f, 0x17620, 0x17621, 0x17622, 0x17623, 0x17624, 0x17625, 0x17626, 0x17627, 0x17628, 0x17629
};

void BM_collation_267(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_267, cps_267 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_267);

uint32_t cps_268[] = {
0x1762a, 0x1762b, 0x1762c, 0x1762d, 0x1762e, 0x1762f, 0x17630, 0x17631, 0x17632, 0x17633, 0x17634, 0x17635, 0x17636, 0x17637, 0x17638, 0x17639, 0x1763a, 0x1763b, 0x1763c, 0x1763d, 0x1763e, 0x1763f, 0x17640, 0x17641, 0x17642, 0x17643, 0x17644, 0x17645, 0x17646, 0x17647, 0x17648, 0x17649, 0x1764a, 0x1764b, 0x1764c, 0x1764d, 0x1764e, 0x1764f, 0x17650, 0x17651, 0x17652, 0x17653, 0x17654, 0x17655, 0x17656, 0x17657, 0x17658, 0x17659, 0x1765a, 0x1765b, 0x1765c, 0x1765d, 0x1765e, 0x1765f, 0x17660, 0x17661, 0x17662, 0x17663, 0x17664, 0x17665, 0x17666, 0x17667, 0x17668, 0x17669, 0x1766a, 0x1766b, 0x1766c, 0x1766d, 0x1766e, 0x1766f, 0x17670, 0x17671, 0x17672, 0x17673, 0x17674, 0x17675, 0x17676, 0x17677, 0x17678, 0x17679, 0x1767a, 0x1767b, 0x1767c, 0x1767d, 0x1767e, 0x1767f, 0x17680, 0x17681, 0x17682, 0x17683, 0x17684, 0x17685, 0x17686, 0x17687, 0x17688, 0x17689, 0x1768a, 0x1768b, 0x1768c, 0x1768d
};

void BM_collation_268(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_268, cps_268 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_268);

uint32_t cps_269[] = {
0x1768e, 0x1768f, 0x17690, 0x17691, 0x17692, 0x17693, 0x17694, 0x17695, 0x17696, 0x17697, 0x17698, 0x17699, 0x1769a, 0x1769b, 0x1769c, 0x1769d, 0x1769e, 0x1769f, 0x176a0, 0x176a1, 0x176a2, 0x176a3, 0x176a4, 0x176a5, 0x176a6, 0x176a7, 0x176a8, 0x176a9, 0x176aa, 0x176ab, 0x176ac, 0x176ad, 0x176ae, 0x176af, 0x176b0, 0x176b1, 0x176b2, 0x176b3, 0x176b4, 0x176b5, 0x176b6, 0x176b7, 0x176b8, 0x176b9, 0x176ba, 0x176bb, 0x176bc, 0x176bd, 0x176be, 0x176bf, 0x176c0, 0x176c1, 0x176c2, 0x176c3, 0x176c4, 0x176c5, 0x176c6, 0x176c7, 0x176c8, 0x176c9, 0x176ca, 0x176cb, 0x176cc, 0x176cd, 0x176ce, 0x176cf, 0x176d0, 0x176d1, 0x176d2, 0x176d3, 0x176d4, 0x176d5, 0x176d6, 0x176d7, 0x176d8, 0x176d9, 0x176da, 0x176db, 0x176dc, 0x176dd, 0x176de, 0x176df, 0x176e0, 0x176e1, 0x176e2, 0x176e3, 0x176e4, 0x176e5, 0x176e6, 0x176e7, 0x176e8, 0x176e9, 0x176ea, 0x176eb, 0x176ec, 0x176ed, 0x176ee, 0x176ef, 0x176f0, 0x176f1
};

void BM_collation_269(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_269, cps_269 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_269);

uint32_t cps_270[] = {
0x176f2, 0x176f3, 0x176f4, 0x176f5, 0x176f6, 0x176f7, 0x176f8, 0x176f9, 0x176fa, 0x176fb, 0x176fc, 0x176fd, 0x176fe, 0x176ff, 0x17700, 0x17701, 0x17702, 0x17703, 0x17704, 0x17705, 0x17706, 0x17707, 0x17708, 0x17709, 0x1770a, 0x1770b, 0x1770c, 0x1770d, 0x1770e, 0x1770f, 0x17710, 0x17711, 0x17712, 0x17713, 0x17714, 0x17715, 0x17716, 0x17717, 0x17718, 0x17719, 0x1771a, 0x1771b, 0x1771c, 0x1771d, 0x1771e, 0x1771f, 0x17720, 0x17721, 0x17722, 0x17723, 0x17724, 0x17725, 0x17726, 0x17727, 0x17728, 0x17729, 0x1772a, 0x1772b, 0x1772c, 0x1772d, 0x1772e, 0x1772f, 0x17730, 0x17731, 0x17732, 0x17733, 0x17734, 0x17735, 0x17736, 0x17737, 0x17738, 0x17739, 0x1773a, 0x1773b, 0x1773c, 0x1773d, 0x1773e, 0x1773f, 0x17740, 0x17741, 0x17742, 0x17743, 0x17744, 0x17745, 0x17746, 0x17747, 0x17748, 0x17749, 0x1774a, 0x1774b, 0x1774c, 0x1774d, 0x1774e, 0x1774f, 0x17750, 0x17751, 0x17752, 0x17753, 0x17754, 0x17755
};

void BM_collation_270(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_270, cps_270 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_270);

uint32_t cps_271[] = {
0x17756, 0x17757, 0x17758, 0x17759, 0x1775a, 0x1775b, 0x1775c, 0x1775d, 0x1775e, 0x1775f, 0x17760, 0x17761, 0x17762, 0x17763, 0x17764, 0x17765, 0x17766, 0x17767, 0x17768, 0x17769, 0x1776a, 0x1776b, 0x1776c, 0x1776d, 0x1776e, 0x1776f, 0x17770, 0x17771, 0x17772, 0x17773, 0x17774, 0x17775, 0x17776, 0x17777, 0x17778, 0x17779, 0x1777a, 0x1777b, 0x1777c, 0x1777d, 0x1777e, 0x1777f, 0x17780, 0x17781, 0x17782, 0x17783, 0x17784, 0x17785, 0x17786, 0x17787, 0x17788, 0x17789, 0x1778a, 0x1778b, 0x1778c, 0x1778d, 0x1778e, 0x1778f, 0x17790, 0x17791, 0x17792, 0x17793, 0x17794, 0x17795, 0x17796, 0x17797, 0x17798, 0x17799, 0x1779a, 0x1779b, 0x1779c, 0x1779d, 0x1779e, 0x1779f, 0x177a0, 0x177a1, 0x177a2, 0x177a3, 0x177a4, 0x177a5, 0x177a6, 0x177a7, 0x177a8, 0x177a9, 0x177aa, 0x177ab, 0x177ac, 0x177ad, 0x177ae, 0x177af, 0x177b0, 0x177b1, 0x177b2, 0x177b3, 0x177b4, 0x177b5, 0x177b6, 0x177b7, 0x177b8, 0x177b9
};

void BM_collation_271(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_271, cps_271 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_271);

uint32_t cps_272[] = {
0x177ba, 0x177bb, 0x177bc, 0x177bd, 0x177be, 0x177bf, 0x177c0, 0x177c1, 0x177c2, 0x177c3, 0x177c4, 0x177c5, 0x177c6, 0x177c7, 0x177c8, 0x177c9, 0x177ca, 0x177cb, 0x177cc, 0x177cd, 0x177ce, 0x177cf, 0x177d0, 0x177d1, 0x177d2, 0x177d3, 0x177d4, 0x177d5, 0x177d6, 0x177d7, 0x177d8, 0x177d9, 0x177da, 0x177db, 0x177dc, 0x177dd, 0x177de, 0x177df, 0x177e0, 0x177e1, 0x177e2, 0x177e3, 0x177e4, 0x177e5, 0x177e6, 0x177e7, 0x177e8, 0x177e9, 0x177ea, 0x177eb, 0x177ec, 0x177ed, 0x177ee, 0x177ef, 0x177f0, 0x177f1, 0x177f2, 0x177f3, 0x177f4, 0x177f5, 0x177f6, 0x177f7, 0x177f8, 0x177f9, 0x177fa, 0x177fb, 0x177fc, 0x177fd, 0x177fe, 0x177ff, 0x17800, 0x17801, 0x17802, 0x17803, 0x17804, 0x17805, 0x17806, 0x17807, 0x17808, 0x17809, 0x1780a, 0x1780b, 0x1780c, 0x1780d, 0x1780e, 0x1780f, 0x17810, 0x17811, 0x17812, 0x17813, 0x17814, 0x17815, 0x17816, 0x17817, 0x17818, 0x17819, 0x1781a, 0x1781b, 0x1781c, 0x1781d
};

void BM_collation_272(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_272, cps_272 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_272);

uint32_t cps_273[] = {
0x1781e, 0x1781f, 0x17820, 0x17821, 0x17822, 0x17823, 0x17824, 0x17825, 0x17826, 0x17827, 0x17828, 0x17829, 0x1782a, 0x1782b, 0x1782c, 0x1782d, 0x1782e, 0x1782f, 0x17830, 0x17831, 0x17832, 0x17833, 0x17834, 0x17835, 0x17836, 0x17837, 0x17838, 0x17839, 0x1783a, 0x1783b, 0x1783c, 0x1783d, 0x1783e, 0x1783f, 0x17840, 0x17841, 0x17842, 0x17843, 0x17844, 0x17845, 0x17846, 0x17847, 0x17848, 0x17849, 0x1784a, 0x1784b, 0x1784c, 0x1784d, 0x1784e, 0x1784f, 0x17850, 0x17851, 0x17852, 0x17853, 0x17854, 0x17855, 0x17856, 0x17857, 0x17858, 0x17859, 0x1785a, 0x1785b, 0x1785c, 0x1785d, 0x1785e, 0x1785f, 0x17860, 0x17861, 0x17862, 0x17863, 0x17864, 0x17865, 0x17866, 0x17867, 0x17868, 0x17869, 0x1786a, 0x1786b, 0x1786c, 0x1786d, 0x1786e, 0x1786f, 0x17870, 0x17871, 0x17872, 0x17873, 0x17874, 0x17875, 0x17876, 0x17877, 0x17878, 0x17879, 0x1787a, 0x1787b, 0x1787c, 0x1787d, 0x1787e, 0x1787f, 0x17880, 0x17881
};

void BM_collation_273(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_273, cps_273 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_273);

uint32_t cps_274[] = {
0x17882, 0x17883, 0x17884, 0x17885, 0x17886, 0x17887, 0x17888, 0x17889, 0x1788a, 0x1788b, 0x1788c, 0x1788d, 0x1788e, 0x1788f, 0x17890, 0x17891, 0x17892, 0x17893, 0x17894, 0x17895, 0x17896, 0x17897, 0x17898, 0x17899, 0x1789a, 0x1789b, 0x1789c, 0x1789d, 0x1789e, 0x1789f, 0x178a0, 0x178a1, 0x178a2, 0x178a3, 0x178a4, 0x178a5, 0x178a6, 0x178a7, 0x178a8, 0x178a9, 0x178aa, 0x178ab, 0x178ac, 0x178ad, 0x178ae, 0x178af, 0x178b0, 0x178b1, 0x178b2, 0x178b3, 0x178b4, 0x178b5, 0x178b6, 0x178b7, 0x178b8, 0x178b9, 0x178ba, 0x178bb, 0x178bc, 0x178bd, 0x178be, 0x178bf, 0x178c0, 0x178c1, 0x178c2, 0x178c3, 0x178c4, 0x178c5, 0x178c6, 0x178c7, 0x178c8, 0x178c9, 0x178ca, 0x178cb, 0x178cc, 0x178cd, 0x178ce, 0x178cf, 0x178d0, 0x178d1, 0x178d2, 0x178d3, 0x178d4, 0x178d5, 0x178d6, 0x178d7, 0x178d8, 0x178d9, 0x178da, 0x178db, 0x178dc, 0x178dd, 0x178de, 0x178df, 0x178e0, 0x178e1, 0x178e2, 0x178e3, 0x178e4, 0x178e5
};

void BM_collation_274(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_274, cps_274 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_274);

uint32_t cps_275[] = {
0x178e6, 0x178e7, 0x178e8, 0x178e9, 0x178ea, 0x178eb, 0x178ec, 0x178ed, 0x178ee, 0x178ef, 0x178f0, 0x178f1, 0x178f2, 0x178f3, 0x178f4, 0x178f5, 0x178f6, 0x178f7, 0x178f8, 0x178f9, 0x178fa, 0x178fb, 0x178fc, 0x178fd, 0x178fe, 0x178ff, 0x17900, 0x17901, 0x17902, 0x17903, 0x17904, 0x17905, 0x17906, 0x17907, 0x17908, 0x17909, 0x1790a, 0x1790b, 0x1790c, 0x1790d, 0x1790e, 0x1790f, 0x17910, 0x17911, 0x17912, 0x17913, 0x17914, 0x17915, 0x17916, 0x17917, 0x17918, 0x17919, 0x1791a, 0x1791b, 0x1791c, 0x1791d, 0x1791e, 0x1791f, 0x17920, 0x17921, 0x17922, 0x17923, 0x17924, 0x17925, 0x17926, 0x17927, 0x17928, 0x17929, 0x1792a, 0x1792b, 0x1792c, 0x1792d, 0x1792e, 0x1792f, 0x17930, 0x17931, 0x17932, 0x17933, 0x17934, 0x17935, 0x17936, 0x17937, 0x17938, 0x17939, 0x1793a, 0x1793b, 0x1793c, 0x1793d, 0x1793e, 0x1793f, 0x17940, 0x17941, 0x17942, 0x17943, 0x17944, 0x17945, 0x17946, 0x17947, 0x17948, 0x17949
};

void BM_collation_275(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_275, cps_275 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_275);

uint32_t cps_276[] = {
0x1794a, 0x1794b, 0x1794c, 0x1794d, 0x1794e, 0x1794f, 0x17950, 0x17951, 0x17952, 0x17953, 0x17954, 0x17955, 0x17956, 0x17957, 0x17958, 0x17959, 0x1795a, 0x1795b, 0x1795c, 0x1795d, 0x1795e, 0x1795f, 0x17960, 0x17961, 0x17962, 0x17963, 0x17964, 0x17965, 0x17966, 0x17967, 0x17968, 0x17969, 0x1796a, 0x1796b, 0x1796c, 0x1796d, 0x1796e, 0x1796f, 0x17970, 0x17971, 0x17972, 0x17973, 0x17974, 0x17975, 0x17976, 0x17977, 0x17978, 0x17979, 0x1797a, 0x1797b, 0x1797c, 0x1797d, 0x1797e, 0x1797f, 0x17980, 0x17981, 0x17982, 0x17983, 0x17984, 0x17985, 0x17986, 0x17987, 0x17988, 0x17989, 0x1798a, 0x1798b, 0x1798c, 0x1798d, 0x1798e, 0x1798f, 0x17990, 0x17991, 0x17992, 0x17993, 0x17994, 0x17995, 0x17996, 0x17997, 0x17998, 0x17999, 0x1799a, 0x1799b, 0x1799c, 0x1799d, 0x1799e, 0x1799f, 0x179a0, 0x179a1, 0x179a2, 0x179a3, 0x179a4, 0x179a5, 0x179a6, 0x179a7, 0x179a8, 0x179a9, 0x179aa, 0x179ab, 0x179ac, 0x179ad
};

void BM_collation_276(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_276, cps_276 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_276);

uint32_t cps_277[] = {
0x179ae, 0x179af, 0x179b0, 0x179b1, 0x179b2, 0x179b3, 0x179b4, 0x179b5, 0x179b6, 0x179b7, 0x179b8, 0x179b9, 0x179ba, 0x179bb, 0x179bc, 0x179bd, 0x179be, 0x179bf, 0x179c0, 0x179c1, 0x179c2, 0x179c3, 0x179c4, 0x179c5, 0x179c6, 0x179c7, 0x179c8, 0x179c9, 0x179ca, 0x179cb, 0x179cc, 0x179cd, 0x179ce, 0x179cf, 0x179d0, 0x179d1, 0x179d2, 0x179d3, 0x179d4, 0x179d5, 0x179d6, 0x179d7, 0x179d8, 0x179d9, 0x179da, 0x179db, 0x179dc, 0x179dd, 0x179de, 0x179df, 0x179e0, 0x179e1, 0x179e2, 0x179e3, 0x179e4, 0x179e5, 0x179e6, 0x179e7, 0x179e8, 0x179e9, 0x179ea, 0x179eb, 0x179ec, 0x179ed, 0x179ee, 0x179ef, 0x179f0, 0x179f1, 0x179f2, 0x179f3, 0x179f4, 0x179f5, 0x179f6, 0x179f7, 0x179f8, 0x179f9, 0x179fa, 0x179fb, 0x179fc, 0x179fd, 0x179fe, 0x179ff, 0x17a00, 0x17a01, 0x17a02, 0x17a03, 0x17a04, 0x17a05, 0x17a06, 0x17a07, 0x17a08, 0x17a09, 0x17a0a, 0x17a0b, 0x17a0c, 0x17a0d, 0x17a0e, 0x17a0f, 0x17a10, 0x17a11
};

void BM_collation_277(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_277, cps_277 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_277);

uint32_t cps_278[] = {
0x17a12, 0x17a13, 0x17a14, 0x17a15, 0x17a16, 0x17a17, 0x17a18, 0x17a19, 0x17a1a, 0x17a1b, 0x17a1c, 0x17a1d, 0x17a1e, 0x17a1f, 0x17a20, 0x17a21, 0x17a22, 0x17a23, 0x17a24, 0x17a25, 0x17a26, 0x17a27, 0x17a28, 0x17a29, 0x17a2a, 0x17a2b, 0x17a2c, 0x17a2d, 0x17a2e, 0x17a2f, 0x17a30, 0x17a31, 0x17a32, 0x17a33, 0x17a34, 0x17a35, 0x17a36, 0x17a37, 0x17a38, 0x17a39, 0x17a3a, 0x17a3b, 0x17a3c, 0x17a3d, 0x17a3e, 0x17a3f, 0x17a40, 0x17a41, 0x17a42, 0x17a43, 0x17a44, 0x17a45, 0x17a46, 0x17a47, 0x17a48, 0x17a49, 0x17a4a, 0x17a4b, 0x17a4c, 0x17a4d, 0x17a4e, 0x17a4f, 0x17a50, 0x17a51, 0x17a52, 0x17a53, 0x17a54, 0x17a55, 0x17a56, 0x17a57, 0x17a58, 0x17a59, 0x17a5a, 0x17a5b, 0x17a5c, 0x17a5d, 0x17a5e, 0x17a5f, 0x17a60, 0x17a61, 0x17a62, 0x17a63, 0x17a64, 0x17a65, 0x17a66, 0x17a67, 0x17a68, 0x17a69, 0x17a6a, 0x17a6b, 0x17a6c, 0x17a6d, 0x17a6e, 0x17a6f, 0x17a70, 0x17a71, 0x17a72, 0x17a73, 0x17a74, 0x17a75
};

void BM_collation_278(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_278, cps_278 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_278);

uint32_t cps_279[] = {
0x17a76, 0x17a77, 0x17a78, 0x17a79, 0x17a7a, 0x17a7b, 0x17a7c, 0x17a7d, 0x17a7e, 0x17a7f, 0x17a80, 0x17a81, 0x17a82, 0x17a83, 0x17a84, 0x17a85, 0x17a86, 0x17a87, 0x17a88, 0x17a89, 0x17a8a, 0x17a8b, 0x17a8c, 0x17a8d, 0x17a8e, 0x17a8f, 0x17a90, 0x17a91, 0x17a92, 0x17a93, 0x17a94, 0x17a95, 0x17a96, 0x17a97, 0x17a98, 0x17a99, 0x17a9a, 0x17a9b, 0x17a9c, 0x17a9d, 0x17a9e, 0x17a9f, 0x17aa0, 0x17aa1, 0x17aa2, 0x17aa3, 0x17aa4, 0x17aa5, 0x17aa6, 0x17aa7, 0x17aa8, 0x17aa9, 0x17aaa, 0x17aab, 0x17aac, 0x17aad, 0x17aae, 0x17aaf, 0x17ab0, 0x17ab1, 0x17ab2, 0x17ab3, 0x17ab4, 0x17ab5, 0x17ab6, 0x17ab7, 0x17ab8, 0x17ab9, 0x17aba, 0x17abb, 0x17abc, 0x17abd, 0x17abe, 0x17abf, 0x17ac0, 0x17ac1, 0x17ac2, 0x17ac3, 0x17ac4, 0x17ac5, 0x17ac6, 0x17ac7, 0x17ac8, 0x17ac9, 0x17aca, 0x17acb, 0x17acc, 0x17acd, 0x17ace, 0x17acf, 0x17ad0, 0x17ad1, 0x17ad2, 0x17ad3, 0x17ad4, 0x17ad5, 0x17ad6, 0x17ad7, 0x17ad8, 0x17ad9
};

void BM_collation_279(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_279, cps_279 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_279);

uint32_t cps_280[] = {
0x17ada, 0x17adb, 0x17adc, 0x17add, 0x17ade, 0x17adf, 0x17ae0, 0x17ae1, 0x17ae2, 0x17ae3, 0x17ae4, 0x17ae5, 0x17ae6, 0x17ae7, 0x17ae8, 0x17ae9, 0x17aea, 0x17aeb, 0x17aec, 0x17aed, 0x17aee, 0x17aef, 0x17af0, 0x17af1, 0x17af2, 0x17af3, 0x17af4, 0x17af5, 0x17af6, 0x17af7, 0x17af8, 0x17af9, 0x17afa, 0x17afb, 0x17afc, 0x17afd, 0x17afe, 0x17aff, 0x17b00, 0x17b01, 0x17b02, 0x17b03, 0x17b04, 0x17b05, 0x17b06, 0x17b07, 0x17b08, 0x17b09, 0x17b0a, 0x17b0b, 0x17b0c, 0x17b0d, 0x17b0e, 0x17b0f, 0x17b10, 0x17b11, 0x17b12, 0x17b13, 0x17b14, 0x17b15, 0x17b16, 0x17b17, 0x17b18, 0x17b19, 0x17b1a, 0x17b1b, 0x17b1c, 0x17b1d, 0x17b1e, 0x17b1f, 0x17b20, 0x17b21, 0x17b22, 0x17b23, 0x17b24, 0x17b25, 0x17b26, 0x17b27, 0x17b28, 0x17b29, 0x17b2a, 0x17b2b, 0x17b2c, 0x17b2d, 0x17b2e, 0x17b2f, 0x17b30, 0x17b31, 0x17b32, 0x17b33, 0x17b34, 0x17b35, 0x17b36, 0x17b37, 0x17b38, 0x17b39, 0x17b3a, 0x17b3b, 0x17b3c, 0x17b3d
};

void BM_collation_280(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_280, cps_280 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_280);

uint32_t cps_281[] = {
0x17b3e, 0x17b3f, 0x17b40, 0x17b41, 0x17b42, 0x17b43, 0x17b44, 0x17b45, 0x17b46, 0x17b47, 0x17b48, 0x17b49, 0x17b4a, 0x17b4b, 0x17b4c, 0x17b4d, 0x17b4e, 0x17b4f, 0x17b50, 0x17b51, 0x17b52, 0x17b53, 0x17b54, 0x17b55, 0x17b56, 0x17b57, 0x17b58, 0x17b59, 0x17b5a, 0x17b5b, 0x17b5c, 0x17b5d, 0x17b5e, 0x17b5f, 0x17b60, 0x17b61, 0x17b62, 0x17b63, 0x17b64, 0x17b65, 0x17b66, 0x17b67, 0x17b68, 0x17b69, 0x17b6a, 0x17b6b, 0x17b6c, 0x17b6d, 0x17b6e, 0x17b6f, 0x17b70, 0x17b71, 0x17b72, 0x17b73, 0x17b74, 0x17b75, 0x17b76, 0x17b77, 0x17b78, 0x17b79, 0x17b7a, 0x17b7b, 0x17b7c, 0x17b7d, 0x17b7e, 0x17b7f, 0x17b80, 0x17b81, 0x17b82, 0x17b83, 0x17b84, 0x17b85, 0x17b86, 0x17b87, 0x17b88, 0x17b89, 0x17b8a, 0x17b8b, 0x17b8c, 0x17b8d, 0x17b8e, 0x17b8f, 0x17b90, 0x17b91, 0x17b92, 0x17b93, 0x17b94, 0x17b95, 0x17b96, 0x17b97, 0x17b98, 0x17b99, 0x17b9a, 0x17b9b, 0x17b9c, 0x17b9d, 0x17b9e, 0x17b9f, 0x17ba0, 0x17ba1
};

void BM_collation_281(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_281, cps_281 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_281);

uint32_t cps_282[] = {
0x17ba2, 0x17ba3, 0x17ba4, 0x17ba5, 0x17ba6, 0x17ba7, 0x17ba8, 0x17ba9, 0x17baa, 0x17bab, 0x17bac, 0x17bad, 0x17bae, 0x17baf, 0x17bb0, 0x17bb1, 0x17bb2, 0x17bb3, 0x17bb4, 0x17bb5, 0x17bb6, 0x17bb7, 0x17bb8, 0x17bb9, 0x17bba, 0x17bbb, 0x17bbc, 0x17bbd, 0x17bbe, 0x17bbf, 0x17bc0, 0x17bc1, 0x17bc2, 0x17bc3, 0x17bc4, 0x17bc5, 0x17bc6, 0x17bc7, 0x17bc8, 0x17bc9, 0x17bca, 0x17bcb, 0x17bcc, 0x17bcd, 0x17bce, 0x17bcf, 0x17bd0, 0x17bd1, 0x17bd2, 0x17bd3, 0x17bd4, 0x17bd5, 0x17bd6, 0x17bd7, 0x17bd8, 0x17bd9, 0x17bda, 0x17bdb, 0x17bdc, 0x17bdd, 0x17bde, 0x17bdf, 0x17be0, 0x17be1, 0x17be2, 0x17be3, 0x17be4, 0x17be5, 0x17be6, 0x17be7, 0x17be8, 0x17be9, 0x17bea, 0x17beb, 0x17bec, 0x17bed, 0x17bee, 0x17bef, 0x17bf0, 0x17bf1, 0x17bf2, 0x17bf3, 0x17bf4, 0x17bf5, 0x17bf6, 0x17bf7, 0x17bf8, 0x17bf9, 0x17bfa, 0x17bfb, 0x17bfc, 0x17bfd, 0x17bfe, 0x17bff, 0x17c00, 0x17c01, 0x17c02, 0x17c03, 0x17c04, 0x17c05
};

void BM_collation_282(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_282, cps_282 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_282);

uint32_t cps_283[] = {
0x17c06, 0x17c07, 0x17c08, 0x17c09, 0x17c0a, 0x17c0b, 0x17c0c, 0x17c0d, 0x17c0e, 0x17c0f, 0x17c10, 0x17c11, 0x17c12, 0x17c13, 0x17c14, 0x17c15, 0x17c16, 0x17c17, 0x17c18, 0x17c19, 0x17c1a, 0x17c1b, 0x17c1c, 0x17c1d, 0x17c1e, 0x17c1f, 0x17c20, 0x17c21, 0x17c22, 0x17c23, 0x17c24, 0x17c25, 0x17c26, 0x17c27, 0x17c28, 0x17c29, 0x17c2a, 0x17c2b, 0x17c2c, 0x17c2d, 0x17c2e, 0x17c2f, 0x17c30, 0x17c31, 0x17c32, 0x17c33, 0x17c34, 0x17c35, 0x17c36, 0x17c37, 0x17c38, 0x17c39, 0x17c3a, 0x17c3b, 0x17c3c, 0x17c3d, 0x17c3e, 0x17c3f, 0x17c40, 0x17c41, 0x17c42, 0x17c43, 0x17c44, 0x17c45, 0x17c46, 0x17c47, 0x17c48, 0x17c49, 0x17c4a, 0x17c4b, 0x17c4c, 0x17c4d, 0x17c4e, 0x17c4f, 0x17c50, 0x17c51, 0x17c52, 0x17c53, 0x17c54, 0x17c55, 0x17c56, 0x17c57, 0x17c58, 0x17c59, 0x17c5a, 0x17c5b, 0x17c5c, 0x17c5d, 0x17c5e, 0x17c5f, 0x17c60, 0x17c61, 0x17c62, 0x17c63, 0x17c64, 0x17c65, 0x17c66, 0x17c67, 0x17c68, 0x17c69
};

void BM_collation_283(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_283, cps_283 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_283);

uint32_t cps_284[] = {
0x17c6a, 0x17c6b, 0x17c6c, 0x17c6d, 0x17c6e, 0x17c6f, 0x17c70, 0x17c71, 0x17c72, 0x17c73, 0x17c74, 0x17c75, 0x17c76, 0x17c77, 0x17c78, 0x17c79, 0x17c7a, 0x17c7b, 0x17c7c, 0x17c7d, 0x17c7e, 0x17c7f, 0x17c80, 0x17c81, 0x17c82, 0x17c83, 0x17c84, 0x17c85, 0x17c86, 0x17c87, 0x17c88, 0x17c89, 0x17c8a, 0x17c8b, 0x17c8c, 0x17c8d, 0x17c8e, 0x17c8f, 0x17c90, 0x17c91, 0x17c92, 0x17c93, 0x17c94, 0x17c95, 0x17c96, 0x17c97, 0x17c98, 0x17c99, 0x17c9a, 0x17c9b, 0x17c9c, 0x17c9d, 0x17c9e, 0x17c9f, 0x17ca0, 0x17ca1, 0x17ca2, 0x17ca3, 0x17ca4, 0x17ca5, 0x17ca6, 0x17ca7, 0x17ca8, 0x17ca9, 0x17caa, 0x17cab, 0x17cac, 0x17cad, 0x17cae, 0x17caf, 0x17cb0, 0x17cb1, 0x17cb2, 0x17cb3, 0x17cb4, 0x17cb5, 0x17cb6, 0x17cb7, 0x17cb8, 0x17cb9, 0x17cba, 0x17cbb, 0x17cbc, 0x17cbd, 0x17cbe, 0x17cbf, 0x17cc0, 0x17cc1, 0x17cc2, 0x17cc3, 0x17cc4, 0x17cc5, 0x17cc6, 0x17cc7, 0x17cc8, 0x17cc9, 0x17cca, 0x17ccb, 0x17ccc, 0x17ccd
};

void BM_collation_284(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_284, cps_284 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_284);

uint32_t cps_285[] = {
0x17cce, 0x17ccf, 0x17cd0, 0x17cd1, 0x17cd2, 0x17cd3, 0x17cd4, 0x17cd5, 0x17cd6, 0x17cd7, 0x17cd8, 0x17cd9, 0x17cda, 0x17cdb, 0x17cdc, 0x17cdd, 0x17cde, 0x17cdf, 0x17ce0, 0x17ce1, 0x17ce2, 0x17ce3, 0x17ce4, 0x17ce5, 0x17ce6, 0x17ce7, 0x17ce8, 0x17ce9, 0x17cea, 0x17ceb, 0x17cec, 0x17ced, 0x17cee, 0x17cef, 0x17cf0, 0x17cf1, 0x17cf2, 0x17cf3, 0x17cf4, 0x17cf5, 0x17cf6, 0x17cf7, 0x17cf8, 0x17cf9, 0x17cfa, 0x17cfb, 0x17cfc, 0x17cfd, 0x17cfe, 0x17cff, 0x17d00, 0x17d01, 0x17d02, 0x17d03, 0x17d04, 0x17d05, 0x17d06, 0x17d07, 0x17d08, 0x17d09, 0x17d0a, 0x17d0b, 0x17d0c, 0x17d0d, 0x17d0e, 0x17d0f, 0x17d10, 0x17d11, 0x17d12, 0x17d13, 0x17d14, 0x17d15, 0x17d16, 0x17d17, 0x17d18, 0x17d19, 0x17d1a, 0x17d1b, 0x17d1c, 0x17d1d, 0x17d1e, 0x17d1f, 0x17d20, 0x17d21, 0x17d22, 0x17d23, 0x17d24, 0x17d25, 0x17d26, 0x17d27, 0x17d28, 0x17d29, 0x17d2a, 0x17d2b, 0x17d2c, 0x17d2d, 0x17d2e, 0x17d2f, 0x17d30, 0x17d31
};

void BM_collation_285(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_285, cps_285 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_285);

uint32_t cps_286[] = {
0x17d32, 0x17d33, 0x17d34, 0x17d35, 0x17d36, 0x17d37, 0x17d38, 0x17d39, 0x17d3a, 0x17d3b, 0x17d3c, 0x17d3d, 0x17d3e, 0x17d3f, 0x17d40, 0x17d41, 0x17d42, 0x17d43, 0x17d44, 0x17d45, 0x17d46, 0x17d47, 0x17d48, 0x17d49, 0x17d4a, 0x17d4b, 0x17d4c, 0x17d4d, 0x17d4e, 0x17d4f, 0x17d50, 0x17d51, 0x17d52, 0x17d53, 0x17d54, 0x17d55, 0x17d56, 0x17d57, 0x17d58, 0x17d59, 0x17d5a, 0x17d5b, 0x17d5c, 0x17d5d, 0x17d5e, 0x17d5f, 0x17d60, 0x17d61, 0x17d62, 0x17d63, 0x17d64, 0x17d65, 0x17d66, 0x17d67, 0x17d68, 0x17d69, 0x17d6a, 0x17d6b, 0x17d6c, 0x17d6d, 0x17d6e, 0x17d6f, 0x17d70, 0x17d71, 0x17d72, 0x17d73, 0x17d74, 0x17d75, 0x17d76, 0x17d77, 0x17d78, 0x17d79, 0x17d7a, 0x17d7b, 0x17d7c, 0x17d7d, 0x17d7e, 0x17d7f, 0x17d80, 0x17d81, 0x17d82, 0x17d83, 0x17d84, 0x17d85, 0x17d86, 0x17d87, 0x17d88, 0x17d89, 0x17d8a, 0x17d8b, 0x17d8c, 0x17d8d, 0x17d8e, 0x17d8f, 0x17d90, 0x17d91, 0x17d92, 0x17d93, 0x17d94, 0x17d95
};

void BM_collation_286(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_286, cps_286 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_286);

uint32_t cps_287[] = {
0x17d96, 0x17d97, 0x17d98, 0x17d99, 0x17d9a, 0x17d9b, 0x17d9c, 0x17d9d, 0x17d9e, 0x17d9f, 0x17da0, 0x17da1, 0x17da2, 0x17da3, 0x17da4, 0x17da5, 0x17da6, 0x17da7, 0x17da8, 0x17da9, 0x17daa, 0x17dab, 0x17dac, 0x17dad, 0x17dae, 0x17daf, 0x17db0, 0x17db1, 0x17db2, 0x17db3, 0x17db4, 0x17db5, 0x17db6, 0x17db7, 0x17db8, 0x17db9, 0x17dba, 0x17dbb, 0x17dbc, 0x17dbd, 0x17dbe, 0x17dbf, 0x17dc0, 0x17dc1, 0x17dc2, 0x17dc3, 0x17dc4, 0x17dc5, 0x17dc6, 0x17dc7, 0x17dc8, 0x17dc9, 0x17dca, 0x17dcb, 0x17dcc, 0x17dcd, 0x17dce, 0x17dcf, 0x17dd0, 0x17dd1, 0x17dd2, 0x17dd3, 0x17dd4, 0x17dd5, 0x17dd6, 0x17dd7, 0x17dd8, 0x17dd9, 0x17dda, 0x17ddb, 0x17ddc, 0x17ddd, 0x17dde, 0x17ddf, 0x17de0, 0x17de1, 0x17de2, 0x17de3, 0x17de4, 0x17de5, 0x17de6, 0x17de7, 0x17de8, 0x17de9, 0x17dea, 0x17deb, 0x17dec, 0x17ded, 0x17dee, 0x17def, 0x17df0, 0x17df1, 0x17df2, 0x17df3, 0x17df4, 0x17df5, 0x17df6, 0x17df7, 0x17df8, 0x17df9
};

void BM_collation_287(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_287, cps_287 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_287);

uint32_t cps_288[] = {
0x17dfa, 0x17dfb, 0x17dfc, 0x17dfd, 0x17dfe, 0x17dff, 0x17e00, 0x17e01, 0x17e02, 0x17e03, 0x17e04, 0x17e05, 0x17e06, 0x17e07, 0x17e08, 0x17e09, 0x17e0a, 0x17e0b, 0x17e0c, 0x17e0d, 0x17e0e, 0x17e0f, 0x17e10, 0x17e11, 0x17e12, 0x17e13, 0x17e14, 0x17e15, 0x17e16, 0x17e17, 0x17e18, 0x17e19, 0x17e1a, 0x17e1b, 0x17e1c, 0x17e1d, 0x17e1e, 0x17e1f, 0x17e20, 0x17e21, 0x17e22, 0x17e23, 0x17e24, 0x17e25, 0x17e26, 0x17e27, 0x17e28, 0x17e29, 0x17e2a, 0x17e2b, 0x17e2c, 0x17e2d, 0x17e2e, 0x17e2f, 0x17e30, 0x17e31, 0x17e32, 0x17e33, 0x17e34, 0x17e35, 0x17e36, 0x17e37, 0x17e38, 0x17e39, 0x17e3a, 0x17e3b, 0x17e3c, 0x17e3d, 0x17e3e, 0x17e3f, 0x17e40, 0x17e41, 0x17e42, 0x17e43, 0x17e44, 0x17e45, 0x17e46, 0x17e47, 0x17e48, 0x17e49, 0x17e4a, 0x17e4b, 0x17e4c, 0x17e4d, 0x17e4e, 0x17e4f, 0x17e50, 0x17e51, 0x17e52, 0x17e53, 0x17e54, 0x17e55, 0x17e56, 0x17e57, 0x17e58, 0x17e59, 0x17e5a, 0x17e5b, 0x17e5c, 0x17e5d
};

void BM_collation_288(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_288, cps_288 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_288);

uint32_t cps_289[] = {
0x17e5e, 0x17e5f, 0x17e60, 0x17e61, 0x17e62, 0x17e63, 0x17e64, 0x17e65, 0x17e66, 0x17e67, 0x17e68, 0x17e69, 0x17e6a, 0x17e6b, 0x17e6c, 0x17e6d, 0x17e6e, 0x17e6f, 0x17e70, 0x17e71, 0x17e72, 0x17e73, 0x17e74, 0x17e75, 0x17e76, 0x17e77, 0x17e78, 0x17e79, 0x17e7a, 0x17e7b, 0x17e7c, 0x17e7d, 0x17e7e, 0x17e7f, 0x17e80, 0x17e81, 0x17e82, 0x17e83, 0x17e84, 0x17e85, 0x17e86, 0x17e87, 0x17e88, 0x17e89, 0x17e8a, 0x17e8b, 0x17e8c, 0x17e8d, 0x17e8e, 0x17e8f, 0x17e90, 0x17e91, 0x17e92, 0x17e93, 0x17e94, 0x17e95, 0x17e96, 0x17e97, 0x17e98, 0x17e99, 0x17e9a, 0x17e9b, 0x17e9c, 0x17e9d, 0x17e9e, 0x17e9f, 0x17ea0, 0x17ea1, 0x17ea2, 0x17ea3, 0x17ea4, 0x17ea5, 0x17ea6, 0x17ea7, 0x17ea8, 0x17ea9, 0x17eaa, 0x17eab, 0x17eac, 0x17ead, 0x17eae, 0x17eaf, 0x17eb0, 0x17eb1, 0x17eb2, 0x17eb3, 0x17eb4, 0x17eb5, 0x17eb6, 0x17eb7, 0x17eb8, 0x17eb9, 0x17eba, 0x17ebb, 0x17ebc, 0x17ebd, 0x17ebe, 0x17ebf, 0x17ec0, 0x17ec1
};

void BM_collation_289(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_289, cps_289 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_289);

uint32_t cps_290[] = {
0x17ec2, 0x17ec3, 0x17ec4, 0x17ec5, 0x17ec6, 0x17ec7, 0x17ec8, 0x17ec9, 0x17eca, 0x17ecb, 0x17ecc, 0x17ecd, 0x17ece, 0x17ecf, 0x17ed0, 0x17ed1, 0x17ed2, 0x17ed3, 0x17ed4, 0x17ed5, 0x17ed6, 0x17ed7, 0x17ed8, 0x17ed9, 0x17eda, 0x17edb, 0x17edc, 0x17edd, 0x17ede, 0x17edf, 0x17ee0, 0x17ee1, 0x17ee2, 0x17ee3, 0x17ee4, 0x17ee5, 0x17ee6, 0x17ee7, 0x17ee8, 0x17ee9, 0x17eea, 0x17eeb, 0x17eec, 0x17eed, 0x17eee, 0x17eef, 0x17ef0, 0x17ef1, 0x17ef2, 0x17ef3, 0x17ef4, 0x17ef5, 0x17ef6, 0x17ef7, 0x17ef8, 0x17ef9, 0x17efa, 0x17efb, 0x17efc, 0x17efd, 0x17efe, 0x17eff, 0x17f00, 0x17f01, 0x17f02, 0x17f03, 0x17f04, 0x17f05, 0x17f06, 0x17f07, 0x17f08, 0x17f09, 0x17f0a, 0x17f0b, 0x17f0c, 0x17f0d, 0x17f0e, 0x17f0f, 0x17f10, 0x17f11, 0x17f12, 0x17f13, 0x17f14, 0x17f15, 0x17f16, 0x17f17, 0x17f18, 0x17f19, 0x17f1a, 0x17f1b, 0x17f1c, 0x17f1d, 0x17f1e, 0x17f1f, 0x17f20, 0x17f21, 0x17f22, 0x17f23, 0x17f24, 0x17f25
};

void BM_collation_290(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_290, cps_290 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_290);

uint32_t cps_291[] = {
0x17f26, 0x17f27, 0x17f28, 0x17f29, 0x17f2a, 0x17f2b, 0x17f2c, 0x17f2d, 0x17f2e, 0x17f2f, 0x17f30, 0x17f31, 0x17f32, 0x17f33, 0x17f34, 0x17f35, 0x17f36, 0x17f37, 0x17f38, 0x17f39, 0x17f3a, 0x17f3b, 0x17f3c, 0x17f3d, 0x17f3e, 0x17f3f, 0x17f40, 0x17f41, 0x17f42, 0x17f43, 0x17f44, 0x17f45, 0x17f46, 0x17f47, 0x17f48, 0x17f49, 0x17f4a, 0x17f4b, 0x17f4c, 0x17f4d, 0x17f4e, 0x17f4f, 0x17f50, 0x17f51, 0x17f52, 0x17f53, 0x17f54, 0x17f55, 0x17f56, 0x17f57, 0x17f58, 0x17f59, 0x17f5a, 0x17f5b, 0x17f5c, 0x17f5d, 0x17f5e, 0x17f5f, 0x17f60, 0x17f61, 0x17f62, 0x17f63, 0x17f64, 0x17f65, 0x17f66, 0x17f67, 0x17f68, 0x17f69, 0x17f6a, 0x17f6b, 0x17f6c, 0x17f6d, 0x17f6e, 0x17f6f, 0x17f70, 0x17f71, 0x17f72, 0x17f73, 0x17f74, 0x17f75, 0x17f76, 0x17f77, 0x17f78, 0x17f79, 0x17f7a, 0x17f7b, 0x17f7c, 0x17f7d, 0x17f7e, 0x17f7f, 0x17f80, 0x17f81, 0x17f82, 0x17f83, 0x17f84, 0x17f85, 0x17f86, 0x17f87, 0x17f88, 0x17f89
};

void BM_collation_291(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_291, cps_291 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_291);

uint32_t cps_292[] = {
0x17f8a, 0x17f8b, 0x17f8c, 0x17f8d, 0x17f8e, 0x17f8f, 0x17f90, 0x17f91, 0x17f92, 0x17f93, 0x17f94, 0x17f95, 0x17f96, 0x17f97, 0x17f98, 0x17f99, 0x17f9a, 0x17f9b, 0x17f9c, 0x17f9d, 0x17f9e, 0x17f9f, 0x17fa0, 0x17fa1, 0x17fa2, 0x17fa3, 0x17fa4, 0x17fa5, 0x17fa6, 0x17fa7, 0x17fa8, 0x17fa9, 0x17faa, 0x17fab, 0x17fac, 0x17fad, 0x17fae, 0x17faf, 0x17fb0, 0x17fb1, 0x17fb2, 0x17fb3, 0x17fb4, 0x17fb5, 0x17fb6, 0x17fb7, 0x17fb8, 0x17fb9, 0x17fba, 0x17fbb, 0x17fbc, 0x17fbd, 0x17fbe, 0x17fbf, 0x17fc0, 0x17fc1, 0x17fc2, 0x17fc3, 0x17fc4, 0x17fc5, 0x17fc6, 0x17fc7, 0x17fc8, 0x17fc9, 0x17fca, 0x17fcb, 0x17fcc, 0x17fcd, 0x17fce, 0x17fcf, 0x17fd0, 0x17fd1, 0x17fd2, 0x17fd3, 0x17fd4, 0x17fd5, 0x17fd6, 0x17fd7, 0x17fd8, 0x17fd9, 0x17fda, 0x17fdb, 0x17fdc, 0x17fdd, 0x17fde, 0x17fdf, 0x17fe0, 0x17fe1, 0x17fe2, 0x17fe3, 0x17fe4, 0x17fe5, 0x17fe6, 0x17fe7, 0x17fe8, 0x17fe9, 0x17fea, 0x17feb, 0x17fec, 0x17fed
};

void BM_collation_292(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_292, cps_292 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_292);

uint32_t cps_293[] = {
0x17fee, 0x17fef, 0x17ff0, 0x17ff1, 0x17ff2, 0x17ff3, 0x17ff4, 0x17ff5, 0x17ff6, 0x17ff7, 0x17ff8, 0x17ff9, 0x17ffa, 0x17ffb, 0x17ffc, 0x17ffd, 0x17ffe, 0x17fff, 0x18000, 0x18001, 0x18002, 0x18003, 0x18004, 0x18005, 0x18006, 0x18007, 0x18008, 0x18009, 0x1800a, 0x1800b, 0x1800c, 0x1800d, 0x1800e, 0x1800f, 0x18010, 0x18011, 0x18012, 0x18013, 0x18014, 0x18015, 0x18016, 0x18017, 0x18018, 0x18019, 0x1801a, 0x1801b, 0x1801c, 0x1801d, 0x1801e, 0x1801f, 0x18020, 0x18021, 0x18022, 0x18023, 0x18024, 0x18025, 0x18026, 0x18027, 0x18028, 0x18029, 0x1802a, 0x1802b, 0x1802c, 0x1802d, 0x1802e, 0x1802f, 0x18030, 0x18031, 0x18032, 0x18033, 0x18034, 0x18035, 0x18036, 0x18037, 0x18038, 0x18039, 0x1803a, 0x1803b, 0x1803c, 0x1803d, 0x1803e, 0x1803f, 0x18040, 0x18041, 0x18042, 0x18043, 0x18044, 0x18045, 0x18046, 0x18047, 0x18048, 0x18049, 0x1804a, 0x1804b, 0x1804c, 0x1804d, 0x1804e, 0x1804f, 0x18050, 0x18051
};

void BM_collation_293(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_293, cps_293 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_293);

uint32_t cps_294[] = {
0x18052, 0x18053, 0x18054, 0x18055, 0x18056, 0x18057, 0x18058, 0x18059, 0x1805a, 0x1805b, 0x1805c, 0x1805d, 0x1805e, 0x1805f, 0x18060, 0x18061, 0x18062, 0x18063, 0x18064, 0x18065, 0x18066, 0x18067, 0x18068, 0x18069, 0x1806a, 0x1806b, 0x1806c, 0x1806d, 0x1806e, 0x1806f, 0x18070, 0x18071, 0x18072, 0x18073, 0x18074, 0x18075, 0x18076, 0x18077, 0x18078, 0x18079, 0x1807a, 0x1807b, 0x1807c, 0x1807d, 0x1807e, 0x1807f, 0x18080, 0x18081, 0x18082, 0x18083, 0x18084, 0x18085, 0x18086, 0x18087, 0x18088, 0x18089, 0x1808a, 0x1808b, 0x1808c, 0x1808d, 0x1808e, 0x1808f, 0x18090, 0x18091, 0x18092, 0x18093, 0x18094, 0x18095, 0x18096, 0x18097, 0x18098, 0x18099, 0x1809a, 0x1809b, 0x1809c, 0x1809d, 0x1809e, 0x1809f, 0x180a0, 0x180a1, 0x180a2, 0x180a3, 0x180a4, 0x180a5, 0x180a6, 0x180a7, 0x180a8, 0x180a9, 0x180aa, 0x180ab, 0x180ac, 0x180ad, 0x180ae, 0x180af, 0x180b0, 0x180b1, 0x180b2, 0x180b3, 0x180b4, 0x180b5
};

void BM_collation_294(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_294, cps_294 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_294);

uint32_t cps_295[] = {
0x180b6, 0x180b7, 0x180b8, 0x180b9, 0x180ba, 0x180bb, 0x180bc, 0x180bd, 0x180be, 0x180bf, 0x180c0, 0x180c1, 0x180c2, 0x180c3, 0x180c4, 0x180c5, 0x180c6, 0x180c7, 0x180c8, 0x180c9, 0x180ca, 0x180cb, 0x180cc, 0x180cd, 0x180ce, 0x180cf, 0x180d0, 0x180d1, 0x180d2, 0x180d3, 0x180d4, 0x180d5, 0x180d6, 0x180d7, 0x180d8, 0x180d9, 0x180da, 0x180db, 0x180dc, 0x180dd, 0x180de, 0x180df, 0x180e0, 0x180e1, 0x180e2, 0x180e3, 0x180e4, 0x180e5, 0x180e6, 0x180e7, 0x180e8, 0x180e9, 0x180ea, 0x180eb, 0x180ec, 0x180ed, 0x180ee, 0x180ef, 0x180f0, 0x180f1, 0x180f2, 0x180f3, 0x180f4, 0x180f5, 0x180f6, 0x180f7, 0x180f8, 0x180f9, 0x180fa, 0x180fb, 0x180fc, 0x180fd, 0x180fe, 0x180ff, 0x18100, 0x18101, 0x18102, 0x18103, 0x18104, 0x18105, 0x18106, 0x18107, 0x18108, 0x18109, 0x1810a, 0x1810b, 0x1810c, 0x1810d, 0x1810e, 0x1810f, 0x18110, 0x18111, 0x18112, 0x18113, 0x18114, 0x18115, 0x18116, 0x18117, 0x18118, 0x18119
};

void BM_collation_295(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_295, cps_295 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_295);

uint32_t cps_296[] = {
0x1811a, 0x1811b, 0x1811c, 0x1811d, 0x1811e, 0x1811f, 0x18120, 0x18121, 0x18122, 0x18123, 0x18124, 0x18125, 0x18126, 0x18127, 0x18128, 0x18129, 0x1812a, 0x1812b, 0x1812c, 0x1812d, 0x1812e, 0x1812f, 0x18130, 0x18131, 0x18132, 0x18133, 0x18134, 0x18135, 0x18136, 0x18137, 0x18138, 0x18139, 0x1813a, 0x1813b, 0x1813c, 0x1813d, 0x1813e, 0x1813f, 0x18140, 0x18141, 0x18142, 0x18143, 0x18144, 0x18145, 0x18146, 0x18147, 0x18148, 0x18149, 0x1814a, 0x1814b, 0x1814c, 0x1814d, 0x1814e, 0x1814f, 0x18150, 0x18151, 0x18152, 0x18153, 0x18154, 0x18155, 0x18156, 0x18157, 0x18158, 0x18159, 0x1815a, 0x1815b, 0x1815c, 0x1815d, 0x1815e, 0x1815f, 0x18160, 0x18161, 0x18162, 0x18163, 0x18164, 0x18165, 0x18166, 0x18167, 0x18168, 0x18169, 0x1816a, 0x1816b, 0x1816c, 0x1816d, 0x1816e, 0x1816f, 0x18170, 0x18171, 0x18172, 0x18173, 0x18174, 0x18175, 0x18176, 0x18177, 0x18178, 0x18179, 0x1817a, 0x1817b, 0x1817c, 0x1817d
};

void BM_collation_296(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_296, cps_296 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_296);

uint32_t cps_297[] = {
0x1817e, 0x1817f, 0x18180, 0x18181, 0x18182, 0x18183, 0x18184, 0x18185, 0x18186, 0x18187, 0x18188, 0x18189, 0x1818a, 0x1818b, 0x1818c, 0x1818d, 0x1818e, 0x1818f, 0x18190, 0x18191, 0x18192, 0x18193, 0x18194, 0x18195, 0x18196, 0x18197, 0x18198, 0x18199, 0x1819a, 0x1819b, 0x1819c, 0x1819d, 0x1819e, 0x1819f, 0x181a0, 0x181a1, 0x181a2, 0x181a3, 0x181a4, 0x181a5, 0x181a6, 0x181a7, 0x181a8, 0x181a9, 0x181aa, 0x181ab, 0x181ac, 0x181ad, 0x181ae, 0x181af, 0x181b0, 0x181b1, 0x181b2, 0x181b3, 0x181b4, 0x181b5, 0x181b6, 0x181b7, 0x181b8, 0x181b9, 0x181ba, 0x181bb, 0x181bc, 0x181bd, 0x181be, 0x181bf, 0x181c0, 0x181c1, 0x181c2, 0x181c3, 0x181c4, 0x181c5, 0x181c6, 0x181c7, 0x181c8, 0x181c9, 0x181ca, 0x181cb, 0x181cc, 0x181cd, 0x181ce, 0x181cf, 0x181d0, 0x181d1, 0x181d2, 0x181d3, 0x181d4, 0x181d5, 0x181d6, 0x181d7, 0x181d8, 0x181d9, 0x181da, 0x181db, 0x181dc, 0x181dd, 0x181de, 0x181df, 0x181e0, 0x181e1
};

void BM_collation_297(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_297, cps_297 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_297);

uint32_t cps_298[] = {
0x181e2, 0x181e3, 0x181e4, 0x181e5, 0x181e6, 0x181e7, 0x181e8, 0x181e9, 0x181ea, 0x181eb, 0x181ec, 0x181ed, 0x181ee, 0x181ef, 0x181f0, 0x181f1, 0x181f2, 0x181f3, 0x181f4, 0x181f5, 0x181f6, 0x181f7, 0x181f8, 0x181f9, 0x181fa, 0x181fb, 0x181fc, 0x181fd, 0x181fe, 0x181ff, 0x18200, 0x18201, 0x18202, 0x18203, 0x18204, 0x18205, 0x18206, 0x18207, 0x18208, 0x18209, 0x1820a, 0x1820b, 0x1820c, 0x1820d, 0x1820e, 0x1820f, 0x18210, 0x18211, 0x18212, 0x18213, 0x18214, 0x18215, 0x18216, 0x18217, 0x18218, 0x18219, 0x1821a, 0x1821b, 0x1821c, 0x1821d, 0x1821e, 0x1821f, 0x18220, 0x18221, 0x18222, 0x18223, 0x18224, 0x18225, 0x18226, 0x18227, 0x18228, 0x18229, 0x1822a, 0x1822b, 0x1822c, 0x1822d, 0x1822e, 0x1822f, 0x18230, 0x18231, 0x18232, 0x18233, 0x18234, 0x18235, 0x18236, 0x18237, 0x18238, 0x18239, 0x1823a, 0x1823b, 0x1823c, 0x1823d, 0x1823e, 0x1823f, 0x18240, 0x18241, 0x18242, 0x18243, 0x18244, 0x18245
};

void BM_collation_298(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_298, cps_298 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_298);

uint32_t cps_299[] = {
0x18246, 0x18247, 0x18248, 0x18249, 0x1824a, 0x1824b, 0x1824c, 0x1824d, 0x1824e, 0x1824f, 0x18250, 0x18251, 0x18252, 0x18253, 0x18254, 0x18255, 0x18256, 0x18257, 0x18258, 0x18259, 0x1825a, 0x1825b, 0x1825c, 0x1825d, 0x1825e, 0x1825f, 0x18260, 0x18261, 0x18262, 0x18263, 0x18264, 0x18265, 0x18266, 0x18267, 0x18268, 0x18269, 0x1826a, 0x1826b, 0x1826c, 0x1826d, 0x1826e, 0x1826f, 0x18270, 0x18271, 0x18272, 0x18273, 0x18274, 0x18275, 0x18276, 0x18277, 0x18278, 0x18279, 0x1827a, 0x1827b, 0x1827c, 0x1827d, 0x1827e, 0x1827f, 0x18280, 0x18281, 0x18282, 0x18283, 0x18284, 0x18285, 0x18286, 0x18287, 0x18288, 0x18289, 0x1828a, 0x1828b, 0x1828c, 0x1828d, 0x1828e, 0x1828f, 0x18290, 0x18291, 0x18292, 0x18293, 0x18294, 0x18295, 0x18296, 0x18297, 0x18298, 0x18299, 0x1829a, 0x1829b, 0x1829c, 0x1829d, 0x1829e, 0x1829f, 0x182a0, 0x182a1, 0x182a2, 0x182a3, 0x182a4, 0x182a5, 0x182a6, 0x182a7, 0x182a8, 0x182a9
};

void BM_collation_299(benchmark::State & state)
{
    while (state.KeepRunning()) {
        benchmark::DoNotOptimize(boost::text::collation_sort_key(cps_299, cps_299 + 100, table(), boost::text::collation_strength::quaternary, boost::text::case_first::off, boost::text::case_level::off, boost::text::variable_weighting::shifted));
    }
}
BENCHMARK(BM_collation_299);



BENCHMARK_MAIN()
