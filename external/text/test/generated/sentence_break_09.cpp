// Copyright (C) 2020 T. Zachary Laine
//
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// Warning! This file is autogenerated.
#include <boost/text/sentence_break.hpp>

#include <gtest/gtest.h>

#include <algorithm>


TEST(sentence, breaks_9)
{
    // ÷ 0300 × 0085 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]
    {
        std::array<uint32_t, 2> cps = {{ 0x300, 0x85 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
    }


    // ÷ 0300 × 0308 × 0085 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <NEXT LINE (NEL)> (Sep) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x300, 0x308, 0x85 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0300 × 0009 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]
    {
        std::array<uint32_t, 2> cps = {{ 0x300, 0x9 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
    }


    // ÷ 0300 × 0308 × 0009 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] <CHARACTER TABULATION> (Sp) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x300, 0x308, 0x9 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0300 × 0061 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]
    {
        std::array<uint32_t, 2> cps = {{ 0x300, 0x61 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
    }


    // ÷ 0300 × 0308 × 0061 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN SMALL LETTER A (Lower) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x300, 0x308, 0x61 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0300 × 0041 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]
    {
        std::array<uint32_t, 2> cps = {{ 0x300, 0x41 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
    }


    // ÷ 0300 × 0308 × 0041 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN CAPITAL LETTER A (Upper) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x300, 0x308, 0x41 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0300 × 01BB ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]
    {
        std::array<uint32_t, 2> cps = {{ 0x300, 0x1bb }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
    }


    // ÷ 0300 × 0308 × 01BB ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN LETTER TWO WITH STROKE (OLetter) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x300, 0x308, 0x1bb }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0300 × 0030 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]
    {
        std::array<uint32_t, 2> cps = {{ 0x300, 0x30 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
    }


    // ÷ 0300 × 0308 × 0030 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] DIGIT ZERO (Numeric) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x300, 0x308, 0x30 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0300 × 002E ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]
    {
        std::array<uint32_t, 2> cps = {{ 0x300, 0x2e }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
    }


    // ÷ 0300 × 0308 × 002E ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x300, 0x308, 0x2e }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0300 × 0021 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]
    {
        std::array<uint32_t, 2> cps = {{ 0x300, 0x21 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
    }


    // ÷ 0300 × 0308 × 0021 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] EXCLAMATION MARK (STerm) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x300, 0x308, 0x21 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0300 × 0022 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] QUOTATION MARK (Close) ÷ [0.3]
    {
        std::array<uint32_t, 2> cps = {{ 0x300, 0x22 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
    }


    // ÷ 0300 × 0308 × 0022 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] QUOTATION MARK (Close) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x300, 0x308, 0x22 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0300 × 002C ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] COMMA (SContinue) ÷ [0.3]
    {
        std::array<uint32_t, 2> cps = {{ 0x300, 0x2c }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
    }


    // ÷ 0300 × 0308 × 002C ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [998.0] COMMA (SContinue) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x300, 0x308, 0x2c }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0300 × 00AD ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]
    {
        std::array<uint32_t, 2> cps = {{ 0x300, 0xad }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
    }


    // ÷ 0300 × 0308 × 00AD ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] SOFT HYPHEN (Format_FE) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x300, 0x308, 0xad }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0300 × 0300 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]
    {
        std::array<uint32_t, 2> cps = {{ 0x300, 0x300 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
    }


    // ÷ 0300 × 0308 × 0300 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [5.0] COMBINING DIAERESIS (Extend_FE) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x300, 0x308, 0x300 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 000D × 000A ÷ 0061 × 000A ÷ 0308 ÷	
    // ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) × [3.0] <LINE FEED (LF)> (LF) ÷ [4.0] LATIN SMALL LETTER A (Lower) × [998.0] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [0.3]
    {
        std::array<uint32_t, 5> cps = {{ 0xd, 0xa, 0x61, 0xa, 0x308 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 2, cps.end()) - cps.begin(), 4);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 2, cps.end()) - cps.begin(), 4);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 4, cps.end()) - cps.begin(), 4);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 4, cps.end()) - cps.begin(), 5);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 5, cps.end()) - cps.begin(), 4);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 4, cps.end()) - cps.begin(), 5);
    }


    // ÷ 0061 × 0308 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Lower) × [5.0] COMBINING DIAERESIS (Extend_FE) ÷ [0.3]
    {
        std::array<uint32_t, 2> cps = {{ 0x61, 0x308 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
    }


    // ÷ 0020 × 200D × 0646 ÷	
    // ÷ [0.2] SPACE (Sp) × [5.0] ZERO WIDTH JOINER (Extend_FE) × [998.0] ARABIC LETTER NOON (OLetter) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x20, 0x200d, 0x646 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0646 × 200D × 0020 ÷	
    // ÷ [0.2] ARABIC LETTER NOON (OLetter) × [5.0] ZERO WIDTH JOINER (Extend_FE) × [998.0] SPACE (Sp) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x646, 0x200d, 0x20 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0028 × 0022 × 0047 × 006F × 002E × 0022 × 0029 × 0020 ÷ 0028 × 0048 × 0065 × 0020 × 0064 × 0069 × 0064 × 002E × 0029 ÷	
    // ÷ [0.2] LEFT PARENTHESIS (Close) × [998.0] QUOTATION MARK (Close) × [998.0] LATIN CAPITAL LETTER G (Upper) × [998.0] LATIN SMALL LETTER O (Lower) × [998.0] FULL STOP (ATerm) × [9.0] QUOTATION MARK (Close) × [9.0] RIGHT PARENTHESIS (Close) × [9.0] SPACE (Sp) ÷ [11.0] LEFT PARENTHESIS (Close) × [998.0] LATIN CAPITAL LETTER H (Upper) × [998.0] LATIN SMALL LETTER E (Lower) × [998.0] SPACE (Sp) × [998.0] LATIN SMALL LETTER D (Lower) × [998.0] LATIN SMALL LETTER I (Lower) × [998.0] LATIN SMALL LETTER D (Lower) × [998.0] FULL STOP (ATerm) × [9.0] RIGHT PARENTHESIS (Close) ÷ [0.3]
    {
        std::array<uint32_t, 17> cps = {{ 0x28, 0x22, 0x47, 0x6f, 0x2e, 0x22, 0x29, 0x20, 0x28, 0x48, 0x65, 0x20, 0x64, 0x69, 0x64, 0x2e, 0x29 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 4, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 5, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 6, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 7, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 8, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 9, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 10, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 11, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 12, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 13, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 14, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 15, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 16, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 17, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
    }


    // ÷ 0028 × 201C × 0047 × 006F × 003F × 201D × 0029 × 0020 ÷ 0028 × 0048 × 0065 × 0020 × 0064 × 0069 × 0064 × 002E × 0029 ÷	
    // ÷ [0.2] LEFT PARENTHESIS (Close) × [998.0] LEFT DOUBLE QUOTATION MARK (Close) × [998.0] LATIN CAPITAL LETTER G (Upper) × [998.0] LATIN SMALL LETTER O (Lower) × [998.0] QUESTION MARK (STerm) × [9.0] RIGHT DOUBLE QUOTATION MARK (Close) × [9.0] RIGHT PARENTHESIS (Close) × [9.0] SPACE (Sp) ÷ [11.0] LEFT PARENTHESIS (Close) × [998.0] LATIN CAPITAL LETTER H (Upper) × [998.0] LATIN SMALL LETTER E (Lower) × [998.0] SPACE (Sp) × [998.0] LATIN SMALL LETTER D (Lower) × [998.0] LATIN SMALL LETTER I (Lower) × [998.0] LATIN SMALL LETTER D (Lower) × [998.0] FULL STOP (ATerm) × [9.0] RIGHT PARENTHESIS (Close) ÷ [0.3]
    {
        std::array<uint32_t, 17> cps = {{ 0x28, 0x201c, 0x47, 0x6f, 0x3f, 0x201d, 0x29, 0x20, 0x28, 0x48, 0x65, 0x20, 0x64, 0x69, 0x64, 0x2e, 0x29 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 4, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 5, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 6, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 7, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 8, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 9, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 10, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 11, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 12, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 13, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 14, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 15, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 16, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 17, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 17);
    }


    // ÷ 0055 × 002E × 0053 × 002E × 0041 × 0300 × 002E × 0020 × 0069 × 0073 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER U (Upper) × [998.0] FULL STOP (ATerm) × [7.0] LATIN CAPITAL LETTER S (Upper) × [998.0] FULL STOP (ATerm) × [7.0] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] FULL STOP (ATerm) × [8.0] SPACE (Sp) × [8.0] LATIN SMALL LETTER I (Lower) × [998.0] LATIN SMALL LETTER S (Lower) ÷ [0.3]
    {
        std::array<uint32_t, 10> cps = {{ 0x55, 0x2e, 0x53, 0x2e, 0x41, 0x300, 0x2e, 0x20, 0x69, 0x73 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 4, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 5, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 6, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 7, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 8, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 9, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 10, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
    }


    // ÷ 0055 × 002E × 0053 × 002E × 0041 × 0300 × 003F × 0020 ÷ 0048 × 0065 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER U (Upper) × [998.0] FULL STOP (ATerm) × [7.0] LATIN CAPITAL LETTER S (Upper) × [998.0] FULL STOP (ATerm) × [7.0] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] QUESTION MARK (STerm) × [9.0] SPACE (Sp) ÷ [11.0] LATIN CAPITAL LETTER H (Upper) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]
    {
        std::array<uint32_t, 10> cps = {{ 0x55, 0x2e, 0x53, 0x2e, 0x41, 0x300, 0x3f, 0x20, 0x48, 0x65 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 4, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 5, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 6, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 7, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 8, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 9, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 10, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 10);
    }


    // ÷ 0055 × 002E × 0053 × 002E × 0041 × 0300 × 002E ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER U (Upper) × [998.0] FULL STOP (ATerm) × [7.0] LATIN CAPITAL LETTER S (Upper) × [998.0] FULL STOP (ATerm) × [7.0] LATIN CAPITAL LETTER A (Upper) × [5.0] COMBINING GRAVE ACCENT (Extend_FE) × [998.0] FULL STOP (ATerm) ÷ [0.3]
    {
        std::array<uint32_t, 7> cps = {{ 0x55, 0x2e, 0x53, 0x2e, 0x41, 0x300, 0x2e }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 4, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 5, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 6, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 7, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
    }


    // ÷ 0033 × 002E × 0034 ÷	
    // ÷ [0.2] DIGIT THREE (Numeric) × [998.0] FULL STOP (ATerm) × [6.0] DIGIT FOUR (Numeric) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x33, 0x2e, 0x34 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0063 × 002E × 0064 ÷	
    // ÷ [0.2] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [8.0] LATIN SMALL LETTER D (Lower) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x63, 0x2e, 0x64 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0043 × 002E × 0064 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER C (Upper) × [998.0] FULL STOP (ATerm) × [8.0] LATIN SMALL LETTER D (Lower) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x43, 0x2e, 0x64 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0063 × 002E × 0044 ÷	
    // ÷ [0.2] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [7.0] LATIN CAPITAL LETTER D (Upper) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x63, 0x2e, 0x44 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0043 × 002E × 0044 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER C (Upper) × [998.0] FULL STOP (ATerm) × [7.0] LATIN CAPITAL LETTER D (Upper) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x43, 0x2e, 0x44 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0065 × 0074 × 0063 × 002E × 0029 × 2019 × 00A0 × 0074 × 0068 × 0065 ÷	
    // ÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [8.0] RIGHT PARENTHESIS (Close) × [8.0] RIGHT SINGLE QUOTATION MARK (Close) × [8.0] NO-BREAK SPACE (Sp) × [8.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]
    {
        std::array<uint32_t, 10> cps = {{ 0x65, 0x74, 0x63, 0x2e, 0x29, 0x2019, 0xa0, 0x74, 0x68, 0x65 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 4, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 5, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 6, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 7, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 8, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 9, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 10, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 10);
    }


    // ÷ 0065 × 0074 × 0063 × 002E × 0029 × 2019 × 00A0 ÷ 0054 × 0068 × 0065 ÷	
    // ÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [9.0] RIGHT PARENTHESIS (Close) × [9.0] RIGHT SINGLE QUOTATION MARK (Close) × [9.0] NO-BREAK SPACE (Sp) ÷ [11.0] LATIN CAPITAL LETTER T (Upper) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]
    {
        std::array<uint32_t, 10> cps = {{ 0x65, 0x74, 0x63, 0x2e, 0x29, 0x2019, 0xa0, 0x54, 0x68, 0x65 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 4, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 5, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 6, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 7, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 7, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 8, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 7, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 9, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 7, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 10, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 7, cps.end()) - cps.begin(), 10);
    }


    // ÷ 0065 × 0074 × 0063 × 002E × 0029 × 2019 × 00A0 × 2018 × 0028 × 0074 × 0068 × 0065 ÷	
    // ÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [8.0] RIGHT PARENTHESIS (Close) × [8.0] RIGHT SINGLE QUOTATION MARK (Close) × [8.0] NO-BREAK SPACE (Sp) × [8.0] LEFT SINGLE QUOTATION MARK (Close) × [998.0] LEFT PARENTHESIS (Close) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]
    {
        std::array<uint32_t, 12> cps = {{ 0x65, 0x74, 0x63, 0x2e, 0x29, 0x2019, 0xa0, 0x2018, 0x28, 0x74, 0x68, 0x65 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 12);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 12);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 12);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 12);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 4, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 12);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 5, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 12);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 6, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 12);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 7, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 12);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 8, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 12);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 9, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 12);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 10, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 12);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 11, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 12);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 12, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 12);
    }


    // ÷ 0065 × 0074 × 0063 × 002E × 0029 × 2019 × 00A0 ÷ 2018 × 0028 × 0054 × 0068 × 0065 ÷	
    // ÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [9.0] RIGHT PARENTHESIS (Close) × [9.0] RIGHT SINGLE QUOTATION MARK (Close) × [9.0] NO-BREAK SPACE (Sp) ÷ [11.0] LEFT SINGLE QUOTATION MARK (Close) × [998.0] LEFT PARENTHESIS (Close) × [998.0] LATIN CAPITAL LETTER T (Upper) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]
    {
        std::array<uint32_t, 12> cps = {{ 0x65, 0x74, 0x63, 0x2e, 0x29, 0x2019, 0xa0, 0x2018, 0x28, 0x54, 0x68, 0x65 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 4, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 5, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 6, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 7, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 7, cps.end()) - cps.begin(), 12);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 8, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 7, cps.end()) - cps.begin(), 12);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 9, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 7, cps.end()) - cps.begin(), 12);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 10, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 7, cps.end()) - cps.begin(), 12);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 11, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 7, cps.end()) - cps.begin(), 12);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 12, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 7, cps.end()) - cps.begin(), 12);
    }


    // ÷ 0065 × 0074 × 0063 × 002E × 0029 × 2019 × 00A0 × 0308 × 0074 × 0068 × 0065 ÷	
    // ÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [8.0] RIGHT PARENTHESIS (Close) × [8.0] RIGHT SINGLE QUOTATION MARK (Close) × [8.0] NO-BREAK SPACE (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) × [8.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]
    {
        std::array<uint32_t, 11> cps = {{ 0x65, 0x74, 0x63, 0x2e, 0x29, 0x2019, 0xa0, 0x308, 0x74, 0x68, 0x65 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 11);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 11);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 11);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 11);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 4, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 11);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 5, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 11);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 6, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 11);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 7, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 11);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 8, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 11);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 9, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 11);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 10, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 11);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 11, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 11);
    }


    // ÷ 0065 × 0074 × 0063 × 002E × 0029 × 2019 × 00A0 × 0308 ÷ 0054 × 0068 × 0065 ÷	
    // ÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [9.0] RIGHT PARENTHESIS (Close) × [9.0] RIGHT SINGLE QUOTATION MARK (Close) × [9.0] NO-BREAK SPACE (Sp) × [5.0] COMBINING DIAERESIS (Extend_FE) ÷ [11.0] LATIN CAPITAL LETTER T (Upper) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]
    {
        std::array<uint32_t, 11> cps = {{ 0x65, 0x74, 0x63, 0x2e, 0x29, 0x2019, 0xa0, 0x308, 0x54, 0x68, 0x65 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 4, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 5, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 6, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 7, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 8, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 11);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 9, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 11);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 10, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 11);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 11, cps.end()) - cps.begin(), 8);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 8, cps.end()) - cps.begin(), 11);
    }


    // ÷ 0065 × 0074 × 0063 × 002E × 0029 × 2019 × 0308 ÷ 0054 × 0068 × 0065 ÷	
    // ÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [9.0] RIGHT PARENTHESIS (Close) × [9.0] RIGHT SINGLE QUOTATION MARK (Close) × [5.0] COMBINING DIAERESIS (Extend_FE) ÷ [11.0] LATIN CAPITAL LETTER T (Upper) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]
    {
        std::array<uint32_t, 10> cps = {{ 0x65, 0x74, 0x63, 0x2e, 0x29, 0x2019, 0x308, 0x54, 0x68, 0x65 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 4, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 5, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 6, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 7, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 7, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 8, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 7, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 9, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 7, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 10, cps.end()) - cps.begin(), 7);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 7, cps.end()) - cps.begin(), 10);
    }


    // ÷ 0065 × 0074 × 0063 × 002E × 0029 × 000A ÷ 0308 × 0054 × 0068 × 0065 ÷	
    // ÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [9.0] RIGHT PARENTHESIS (Close) × [9.0] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_FE) × [998.0] LATIN CAPITAL LETTER T (Upper) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]
    {
        std::array<uint32_t, 10> cps = {{ 0x65, 0x74, 0x63, 0x2e, 0x29, 0xa, 0x308, 0x54, 0x68, 0x65 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 6);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 6);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 6);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 6);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 4, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 6);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 5, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 6);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 6, cps.end()) - cps.begin(), 6);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 6, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 7, cps.end()) - cps.begin(), 6);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 6, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 8, cps.end()) - cps.begin(), 6);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 6, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 9, cps.end()) - cps.begin(), 6);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 6, cps.end()) - cps.begin(), 10);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 10, cps.end()) - cps.begin(), 6);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 6, cps.end()) - cps.begin(), 10);
    }


    // ÷ 0074 × 0068 × 0065 × 0020 × 0072 × 0065 × 0073 × 0070 × 002E × 0020 × 006C × 0065 × 0061 × 0064 × 0065 × 0072 × 0073 × 0020 × 0061 × 0072 × 0065 ÷	
    // ÷ [0.2] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER H (Lower) × [998.0] LATIN SMALL LETTER E (Lower) × [998.0] SPACE (Sp) × [998.0] LATIN SMALL LETTER R (Lower) × [998.0] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER S (Lower) × [998.0] LATIN SMALL LETTER P (Lower) × [998.0] FULL STOP (ATerm) × [8.0] SPACE (Sp) × [8.0] LATIN SMALL LETTER L (Lower) × [998.0] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER A (Lower) × [998.0] LATIN SMALL LETTER D (Lower) × [998.0] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER R (Lower) × [998.0] LATIN SMALL LETTER S (Lower) × [998.0] SPACE (Sp) × [998.0] LATIN SMALL LETTER A (Lower) × [998.0] LATIN SMALL LETTER R (Lower) × [998.0] LATIN SMALL LETTER E (Lower) ÷ [0.3]
    {
        std::array<uint32_t, 21> cps = {{ 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x2e, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x20, 0x61, 0x72, 0x65 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 4, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 5, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 6, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 7, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 8, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 9, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 10, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 11, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 12, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 13, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 14, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 15, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 16, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 17, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 18, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 19, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 20, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 21, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 21);
    }


    // ÷ 5B57 × 002E ÷ 5B57 ÷	
    // ÷ [0.2] CJK UNIFIED IDEOGRAPH-5B57 (OLetter) × [998.0] FULL STOP (ATerm) ÷ [11.0] CJK UNIFIED IDEOGRAPH-5B57 (OLetter) ÷ [0.3]
    {
        std::array<uint32_t, 3> cps = {{ 0x5b57, 0x2e, 0x5b57 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 2, cps.end()) - cps.begin(), 3);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 2);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 2, cps.end()) - cps.begin(), 3);
    }


    // ÷ 0065 × 0074 × 0063 × 002E ÷ 5B83 ÷	
    // ÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) ÷ [11.0] CJK UNIFIED IDEOGRAPH-5B83 (OLetter) ÷ [0.3]
    {
        std::array<uint32_t, 5> cps = {{ 0x65, 0x74, 0x63, 0x2e, 0x5b83 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 4);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 4);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 4);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 4);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 4, cps.end()) - cps.begin(), 4);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 4, cps.end()) - cps.begin(), 5);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 5, cps.end()) - cps.begin(), 4);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 4, cps.end()) - cps.begin(), 5);
    }


    // ÷ 0065 × 0074 × 0063 × 002E × 3002 ÷	
    // ÷ [0.2] LATIN SMALL LETTER E (Lower) × [998.0] LATIN SMALL LETTER T (Lower) × [998.0] LATIN SMALL LETTER C (Lower) × [998.0] FULL STOP (ATerm) × [8.1] IDEOGRAPHIC FULL STOP (STerm) ÷ [0.3]
    {
        std::array<uint32_t, 5> cps = {{ 0x65, 0x74, 0x63, 0x2e, 0x3002 }};
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 0, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 5);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 1, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 5);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 2, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 5);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 3, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 5);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 4, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 5);
        EXPECT_EQ(boost::text::prev_sentence_break(cps.begin(), cps.begin() + 5, cps.end()) - cps.begin(), 0);
        EXPECT_EQ(boost::text::next_sentence_break(cps.begin() + 0, cps.end()) - cps.begin(), 5);
    }


}
