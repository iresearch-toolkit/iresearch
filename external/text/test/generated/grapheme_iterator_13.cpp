// Copyright (C) 2020 T. Zachary Laine
//
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// Warning! This file is autogenerated.
#include <boost/text/grapheme_iterator.hpp>
#include <boost/text/transcode_iterator.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(grapheme, iterator_13_0_fwd)
{
    // ÷ D800 ÷ 0903 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_0_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_0_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_0_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_1_fwd)
{
    // ÷ D800 ÷ 0308 × 0903 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_1_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_1_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_1_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_2_fwd)
{
    // ÷ D800 ÷ 1100 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_2_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_2_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_2_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_3_fwd)
{
    // ÷ D800 ÷ 0308 ÷ 1100 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_3_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_3_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_3_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_4_fwd)
{
    // ÷ D800 ÷ 1160 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_4_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_4_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_4_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_5_fwd)
{
    // ÷ D800 ÷ 0308 ÷ 1160 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_5_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_5_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_5_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_6_fwd)
{
    // ÷ D800 ÷ 11A8 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_6_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_6_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_6_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_7_fwd)
{
    // ÷ D800 ÷ 0308 ÷ 11A8 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_7_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_7_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_7_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_8_fwd)
{
    // ÷ D800 ÷ AC00 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_8_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_8_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_8_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_9_fwd)
{
    // ÷ D800 ÷ 0308 ÷ AC00 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_9_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_9_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_9_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_10_fwd)
{
    // ÷ D800 ÷ AC01 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_10_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_10_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_10_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_11_fwd)
{
    // ÷ D800 ÷ 0308 ÷ AC01 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_11_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_11_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_11_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_12_fwd)
{
    // ÷ D800 ÷ 231A ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] WATCH (ExtPict) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x231A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_12_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x231A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_12_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x231A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_12_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x231A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_13_fwd)
{
    // ÷ D800 ÷ 0308 ÷ 231A ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0x231A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_13_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0x231A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_13_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x0308, 0x231A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_13_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x0308, 0x231A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_14_fwd)
{
    // ÷ D800 ÷ 0300 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING GRAVE ACCENT (Extend_ExtCccZwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_14_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_14_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_14_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_15_fwd)
{
    // ÷ D800 ÷ 0308 × 0300 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.0] COMBINING GRAVE ACCENT (Extend_ExtCccZwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_15_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_15_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_15_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_16_fwd)
{
    // ÷ D800 ÷ 200D ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_16_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_16_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_16_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_17_fwd)
{
    // ÷ D800 ÷ 0308 × 200D ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_17_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_17_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_17_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_18_fwd)
{
    // ÷ D800 ÷ 0378 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_18_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_18_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_18_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_19_fwd)
{
    // ÷ D800 ÷ 0308 ÷ 0378 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_19_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_19_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_19_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_20_fwd)
{
    // ÷ D800 ÷ D800 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_20_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_20_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_20_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_21_fwd)
{
    // ÷ D800 ÷ 0308 ÷ D800 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_21_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_21_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xD800, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_21_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xD800, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
// Skipping from-utf8 test due to presence of surrogate code point.

TEST(grapheme, iterator_13_22_fwd)
{
    // ÷ 000D × 000A ÷ 0061 ÷ 000A ÷ 0308 ÷	
    // ÷ [0.2] <CARRIAGE RETURN (CR)> (CR) × [3.0] <LINE FEED (LF)> (LF) ÷ [4.0] LATIN SMALL LETTER A (Other) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [4.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x000D, 0x000A, 0x0061, 0x000A, 0x0308 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 5);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_22_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x000D, 0x000A, 0x0061, 0x000A, 0x0308 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 5, cps + 5);

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_22_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x000D, 0x000A, 0x0061, 0x000A, 0x0308 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 5);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_22_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x000D, 0x000A, 0x0061, 0x000A, 0x0308 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 5, cps + 5);

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_22_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x000D, 0x000A, 0x0061, 0x000A, 0x0308 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 5),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 5, cps + 5),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[2]);

        ++it;

        EXPECT_EQ(*it.base(), cps[2]);
        EXPECT_EQ(*it->begin(), cps[2]);
        EXPECT_EQ(*it->end(), cps[3]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(*it.base(), cps[3]);
        EXPECT_EQ(*it->begin(), cps[3]);
        EXPECT_EQ(*it->end(), cps[4]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[4]);

        ++it;

        EXPECT_EQ(*it.base(), cps[4]);
        EXPECT_EQ(*it->begin(), cps[4]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[4]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[4]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[5]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[5]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_23_fwd)
{
    // ÷ 0061 × 0308 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0061, 0x0308 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_23_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0061, 0x0308 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_23_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0061, 0x0308 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_23_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0061, 0x0308 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_23_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x0061, 0x0308 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 2),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 2, cps + 2),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[2]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_24_fwd)
{
    // ÷ 0020 × 200D ÷ 0646 ÷	
    // ÷ [0.2] SPACE (Other) × [9.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) ÷ [999.0] ARABIC LETTER NOON (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0020, 0x200D, 0x0646 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_24_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0020, 0x200D, 0x0646 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_24_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0020, 0x200D, 0x0646 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_24_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0020, 0x200D, 0x0646 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_24_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x0020, 0x200D, 0x0646 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 3),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 3, cps + 3),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[2]);

        ++it;

        EXPECT_EQ(*it.base(), cps[2]);
        EXPECT_EQ(*it->begin(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_25_fwd)
{
    // ÷ 0646 × 200D ÷ 0020 ÷	
    // ÷ [0.2] ARABIC LETTER NOON (Other) × [9.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0646, 0x200D, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_25_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0646, 0x200D, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_25_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0646, 0x200D, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_25_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0646, 0x200D, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_25_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x0646, 0x200D, 0x0020 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 3),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 3, cps + 3),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[2]);

        ++it;

        EXPECT_EQ(*it.base(), cps[2]);
        EXPECT_EQ(*it->begin(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_26_fwd)
{
    // ÷ 1100 × 1100 ÷	
    // ÷ [0.2] HANGUL CHOSEONG KIYEOK (L) × [6.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1100, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_26_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1100, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_26_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1100, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_26_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1100, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_26_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x1100, 0x1100 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 2),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 2, cps + 2),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[2]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_27_fwd)
{
    // ÷ AC00 × 11A8 ÷ 1100 ÷	
    // ÷ [0.2] HANGUL SYLLABLE GA (LV) × [7.0] HANGUL JONGSEONG KIYEOK (T) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xAC00, 0x11A8, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_27_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xAC00, 0x11A8, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_27_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xAC00, 0x11A8, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_27_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xAC00, 0x11A8, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_27_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0xAC00, 0x11A8, 0x1100 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 3),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 3, cps + 3),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[2]);

        ++it;

        EXPECT_EQ(*it.base(), cps[2]);
        EXPECT_EQ(*it->begin(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_28_fwd)
{
    // ÷ AC01 × 11A8 ÷ 1100 ÷	
    // ÷ [0.2] HANGUL SYLLABLE GAG (LVT) × [8.0] HANGUL JONGSEONG KIYEOK (T) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xAC01, 0x11A8, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_28_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0xAC01, 0x11A8, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_28_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0xAC01, 0x11A8, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_28_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0xAC01, 0x11A8, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_28_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0xAC01, 0x11A8, 0x1100 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 3),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 3, cps + 3),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[2]);

        ++it;

        EXPECT_EQ(*it.base(), cps[2]);
        EXPECT_EQ(*it->begin(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_29_fwd)
{
    // ÷ 1F1E6 × 1F1E7 ÷ 1F1E8 ÷ 0062 ÷	
    // ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [12.0] REGIONAL INDICATOR SYMBOL LETTER B (RI) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER C (RI) ÷ [999.0] LATIN SMALL LETTER B (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F1E6, 0x1F1E7, 0x1F1E8, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 4);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_29_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F1E6, 0x1F1E7, 0x1F1E8, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 4, cps + 4);

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_29_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F1E6, 0x1F1E7, 0x1F1E8, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 4);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_29_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F1E6, 0x1F1E7, 0x1F1E8, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 4, cps + 4);

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_29_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x1F1E6, 0x1F1E7, 0x1F1E8, 0x0062 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 4),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 4, cps + 4),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[2]);

        ++it;

        EXPECT_EQ(*it.base(), cps[2]);
        EXPECT_EQ(*it->begin(), cps[2]);
        EXPECT_EQ(*it->end(), cps[3]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(*it.base(), cps[3]);
        EXPECT_EQ(*it->begin(), cps[3]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[4]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[4]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_30_fwd)
{
    // ÷ 0061 ÷ 1F1E6 × 1F1E7 ÷ 1F1E8 ÷ 0062 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [13.0] REGIONAL INDICATOR SYMBOL LETTER B (RI) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER C (RI) ÷ [999.0] LATIN SMALL LETTER B (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x1F1E7, 0x1F1E8, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 5);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_30_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x1F1E7, 0x1F1E8, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 5, cps + 5);

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_30_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x1F1E7, 0x1F1E8, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 5);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_30_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x1F1E7, 0x1F1E8, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 5, cps + 5);

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_30_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x1F1E7, 0x1F1E8, 0x0062 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 5),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 5, cps + 5),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[1]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[1]);

        ++it;

        EXPECT_EQ(*it.base(), cps[1]);
        EXPECT_EQ(*it->begin(), cps[1]);
        EXPECT_EQ(*it->end(), cps[3]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[1]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[1]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(*it.base(), cps[3]);
        EXPECT_EQ(*it->begin(), cps[3]);
        EXPECT_EQ(*it->end(), cps[4]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[4]);

        ++it;

        EXPECT_EQ(*it.base(), cps[4]);
        EXPECT_EQ(*it->begin(), cps[4]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[4]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[4]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[5]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[5]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_31_fwd)
{
    // ÷ 0061 ÷ 1F1E6 × 1F1E7 × 200D ÷ 1F1E8 ÷ 0062 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [13.0] REGIONAL INDICATOR SYMBOL LETTER B (RI) × [9.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER C (RI) ÷ [999.0] LATIN SMALL LETTER B (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x1F1E7, 0x200D, 0x1F1E8, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 6);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_31_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x1F1E7, 0x200D, 0x1F1E8, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 6, cps + 6);

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_31_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x1F1E7, 0x200D, 0x1F1E8, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 6);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_31_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x1F1E7, 0x200D, 0x1F1E8, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 6, cps + 6);

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 4);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 4);

        ++it;

        EXPECT_EQ(it.base(), cps + 4);
        EXPECT_EQ((*it).begin(), cps + 4);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_31_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x1F1E7, 0x200D, 0x1F1E8, 0x0062 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 6),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 6, cps + 6),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[1]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[1]);

        ++it;

        EXPECT_EQ(*it.base(), cps[1]);
        EXPECT_EQ(*it->begin(), cps[1]);
        EXPECT_EQ(*it->end(), cps[4]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[1]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[1]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[4]);

        ++it;

        EXPECT_EQ(*it.base(), cps[4]);
        EXPECT_EQ(*it->begin(), cps[4]);
        EXPECT_EQ(*it->end(), cps[5]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[4]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[4]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[5]);

        ++it;

        EXPECT_EQ(*it.base(), cps[5]);
        EXPECT_EQ(*it->begin(), cps[5]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[5]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[5]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[6]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[6]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_32_fwd)
{
    // ÷ 0061 ÷ 1F1E6 × 200D ÷ 1F1E7 × 1F1E8 ÷ 0062 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [9.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER B (RI) × [13.0] REGIONAL INDICATOR SYMBOL LETTER C (RI) ÷ [999.0] LATIN SMALL LETTER B (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x200D, 0x1F1E7, 0x1F1E8, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 6);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_32_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x200D, 0x1F1E7, 0x1F1E8, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 6, cps + 6);

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_32_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x200D, 0x1F1E7, 0x1F1E8, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 6);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_32_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x200D, 0x1F1E7, 0x1F1E8, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 6, cps + 6);

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_32_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x200D, 0x1F1E7, 0x1F1E8, 0x0062 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 6),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 6, cps + 6),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[1]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[1]);

        ++it;

        EXPECT_EQ(*it.base(), cps[1]);
        EXPECT_EQ(*it->begin(), cps[1]);
        EXPECT_EQ(*it->end(), cps[3]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[1]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[1]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(*it.base(), cps[3]);
        EXPECT_EQ(*it->begin(), cps[3]);
        EXPECT_EQ(*it->end(), cps[5]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[5]);

        ++it;

        EXPECT_EQ(*it.base(), cps[5]);
        EXPECT_EQ(*it->begin(), cps[5]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[5]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[5]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[6]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[6]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_33_fwd)
{
    // ÷ 0061 ÷ 1F1E6 × 1F1E7 ÷ 1F1E8 × 1F1E9 ÷ 0062 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [13.0] REGIONAL INDICATOR SYMBOL LETTER B (RI) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER C (RI) × [13.0] REGIONAL INDICATOR SYMBOL LETTER D (RI) ÷ [999.0] LATIN SMALL LETTER B (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x1F1E7, 0x1F1E8, 0x1F1E9, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 6);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_33_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x1F1E7, 0x1F1E8, 0x1F1E9, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 6, cps + 6);

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_33_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x1F1E7, 0x1F1E8, 0x1F1E9, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 6);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_33_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x1F1E7, 0x1F1E8, 0x1F1E9, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 6, cps + 6);

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        --it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), cps + 3);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), cps + 5);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_33_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x0061, 0x1F1E6, 0x1F1E7, 0x1F1E8, 0x1F1E9, 0x0062 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 6),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 6, cps + 6),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[1]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[1]);

        ++it;

        EXPECT_EQ(*it.base(), cps[1]);
        EXPECT_EQ(*it->begin(), cps[1]);
        EXPECT_EQ(*it->end(), cps[3]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[1]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[1]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(*it.base(), cps[3]);
        EXPECT_EQ(*it->begin(), cps[3]);
        EXPECT_EQ(*it->end(), cps[5]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[5]);

        ++it;

        EXPECT_EQ(*it.base(), cps[5]);
        EXPECT_EQ(*it->begin(), cps[5]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[5]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[5]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[6]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[6]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_34_fwd)
{
    // ÷ 0061 × 200D ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) × [9.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0061, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_34_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0061, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_34_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0061, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_34_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0061, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_34_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x0061, 0x200D };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 2),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 2, cps + 2),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[2]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_35_fwd)
{
    // ÷ 0061 × 0308 ÷ 0062 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] LATIN SMALL LETTER B (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0061, 0x0308, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_35_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0061, 0x0308, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_35_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0061, 0x0308, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_35_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0061, 0x0308, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_35_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x0061, 0x0308, 0x0062 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 3),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 3, cps + 3),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[2]);

        ++it;

        EXPECT_EQ(*it.base(), cps[2]);
        EXPECT_EQ(*it->begin(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_36_fwd)
{
    // ÷ 0061 × 0903 ÷ 0062 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [999.0] LATIN SMALL LETTER B (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0061, 0x0903, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_36_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0061, 0x0903, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_36_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0061, 0x0903, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_36_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0061, 0x0903, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_36_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x0061, 0x0903, 0x0062 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 3),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 3, cps + 3),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[2]);

        ++it;

        EXPECT_EQ(*it.base(), cps[2]);
        EXPECT_EQ(*it->begin(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_37_fwd)
{
    // ÷ 0061 ÷ 0600 × 0062 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) × [9.2] LATIN SMALL LETTER B (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0061, 0x0600, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_37_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0061, 0x0600, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_37_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0061, 0x0600, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_13_37_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0061, 0x0600, 0x0062 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_37_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x0061, 0x0600, 0x0062 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 3),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 3, cps + 3),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[1]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[1]);

        ++it;

        EXPECT_EQ(*it.base(), cps[1]);
        EXPECT_EQ(*it->begin(), cps[1]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[1]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[1]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_38_fwd)
{
    // ÷ 1F476 × 1F3FF ÷ 1F476 ÷	
    // ÷ [0.2] BABY (ExtPict) × [9.0] EMOJI MODIFIER FITZPATRICK TYPE-6 (Extend) ÷ [999.0] BABY (ExtPict) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F476, 0x1F3FF, 0x1F476 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_38_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F476, 0x1F3FF, 0x1F476 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_38_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F476, 0x1F3FF, 0x1F476 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_38_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F476, 0x1F3FF, 0x1F476 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_38_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x1F476, 0x1F3FF, 0x1F476 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 3),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 3, cps + 3),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[2]);

        ++it;

        EXPECT_EQ(*it.base(), cps[2]);
        EXPECT_EQ(*it->begin(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_39_fwd)
{
    // ÷ 0061 × 1F3FF ÷ 1F476 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) × [9.0] EMOJI MODIFIER FITZPATRICK TYPE-6 (Extend) ÷ [999.0] BABY (ExtPict) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0061, 0x1F3FF, 0x1F476 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_39_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0061, 0x1F3FF, 0x1F476 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_39_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0061, 0x1F3FF, 0x1F476 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_39_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0061, 0x1F3FF, 0x1F476 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_39_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x0061, 0x1F3FF, 0x1F476 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 3),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 3, cps + 3),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[2]);

        ++it;

        EXPECT_EQ(*it.base(), cps[2]);
        EXPECT_EQ(*it->begin(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_40_fwd)
{
    // ÷ 0061 × 1F3FF ÷ 1F476 × 200D × 1F6D1 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) × [9.0] EMOJI MODIFIER FITZPATRICK TYPE-6 (Extend) ÷ [999.0] BABY (ExtPict) × [9.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) × [11.0] OCTAGONAL SIGN (ExtPict) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0061, 0x1F3FF, 0x1F476, 0x200D, 0x1F6D1 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 5);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_40_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0061, 0x1F3FF, 0x1F476, 0x200D, 0x1F6D1 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 5, cps + 5);

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_40_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0061, 0x1F3FF, 0x1F476, 0x200D, 0x1F6D1 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 5);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_40_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0061, 0x1F3FF, 0x1F476, 0x200D, 0x1F6D1 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 5, cps + 5);

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 5);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 5);

        ++it;

        EXPECT_EQ(it.base(), cps + 5);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_40_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x0061, 0x1F3FF, 0x1F476, 0x200D, 0x1F6D1 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 5),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 5, cps + 5),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[2]);

        ++it;

        EXPECT_EQ(*it.base(), cps[2]);
        EXPECT_EQ(*it->begin(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[5]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[5]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_41_fwd)
{
    // ÷ 1F476 × 1F3FF × 0308 × 200D × 1F476 × 1F3FF ÷	
    // ÷ [0.2] BABY (ExtPict) × [9.0] EMOJI MODIFIER FITZPATRICK TYPE-6 (Extend) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) × [11.0] BABY (ExtPict) × [9.0] EMOJI MODIFIER FITZPATRICK TYPE-6 (Extend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F476, 0x1F3FF, 0x0308, 0x200D, 0x1F476, 0x1F3FF };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 6);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_41_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F476, 0x1F3FF, 0x0308, 0x200D, 0x1F476, 0x1F3FF };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 6, cps + 6);

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 6);
    }
}
TEST(grapheme, iterator_13_41_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F476, 0x1F3FF, 0x0308, 0x200D, 0x1F476, 0x1F3FF };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 6);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 6);
    }
}
TEST(grapheme, iterator_13_41_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F476, 0x1F3FF, 0x0308, 0x200D, 0x1F476, 0x1F3FF };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 6, cps + 6);

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 6);

        ++it;

        EXPECT_EQ(it.base(), cps + 6);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_41_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x1F476, 0x1F3FF, 0x0308, 0x200D, 0x1F476, 0x1F3FF };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 6),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 6, cps + 6),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[6]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[6]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_42_fwd)
{
    // ÷ 1F6D1 × 200D × 1F6D1 ÷	
    // ÷ [0.2] OCTAGONAL SIGN (ExtPict) × [9.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) × [11.0] OCTAGONAL SIGN (ExtPict) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F6D1, 0x200D, 0x1F6D1 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_42_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F6D1, 0x200D, 0x1F6D1 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
}
TEST(grapheme, iterator_13_42_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F6D1, 0x200D, 0x1F6D1 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
}
TEST(grapheme, iterator_13_42_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F6D1, 0x200D, 0x1F6D1 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_42_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x1F6D1, 0x200D, 0x1F6D1 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 3),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 3, cps + 3),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_43_fwd)
{
    // ÷ 0061 × 200D ÷ 1F6D1 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) × [9.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) ÷ [999.0] OCTAGONAL SIGN (ExtPict) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0061, 0x200D, 0x1F6D1 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_43_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0061, 0x200D, 0x1F6D1 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_43_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0061, 0x200D, 0x1F6D1 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_43_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0061, 0x200D, 0x1F6D1 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_43_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x0061, 0x200D, 0x1F6D1 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 3),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 3, cps + 3),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[2]);

        ++it;

        EXPECT_EQ(*it.base(), cps[2]);
        EXPECT_EQ(*it->begin(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_44_fwd)
{
    // ÷ 2701 × 200D × 2701 ÷	
    // ÷ [0.2] UPPER BLADE SCISSORS (Other) × [9.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) × [11.0] UPPER BLADE SCISSORS (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2701, 0x200D, 0x2701 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_44_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x2701, 0x200D, 0x2701 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
}
TEST(grapheme, iterator_13_44_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x2701, 0x200D, 0x2701 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
}
TEST(grapheme, iterator_13_44_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x2701, 0x200D, 0x2701 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_44_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x2701, 0x200D, 0x2701 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 3),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 3, cps + 3),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

TEST(grapheme, iterator_13_45_fwd)
{
    // ÷ 0061 × 200D ÷ 2701 ÷	
    // ÷ [0.2] LATIN SMALL LETTER A (Other) × [9.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) ÷ [999.0] UPPER BLADE SCISSORS (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0061, 0x200D, 0x2701 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_45_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0061, 0x200D, 0x2701 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_45_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0061, 0x200D, 0x2701 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_13_45_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0061, 0x200D, 0x2701 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_13_45_utf8)
{
    {
        // from UTF8
        uint32_t const cps[] = { 0x0061, 0x200D, 0x2701 };
        char cus[1024] = { 0 };
        int cp_indices[1024] = { 0 };

        std::copy(
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps, cps + 3),
            boost::text::utf_32_to_8_iterator<uint32_t const *>(cps, cps + 3, cps + 3),
            cus);

        boost::text::null_sentinel sentinel;
        int * index_it = cp_indices;
        for (boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel> it(cus, cus, boost::text::null_sentinel{}); ; ++it) {
            *index_it++ = it.base() - cus;
            if (it == sentinel)
                break;
        }

        using iter_t = boost::text::utf_8_to_32_iterator<char const *, boost::text::null_sentinel>;
        boost::text::grapheme_iterator<iter_t, boost::text::null_sentinel> it(
            iter_t{cus, cus, boost::text::null_sentinel{}}, iter_t{cus, cus, boost::text::null_sentinel{}}, sentinel);

        EXPECT_EQ(*it.base(), cps[0]);
        EXPECT_EQ(*it->begin(), cps[0]);
        EXPECT_EQ(*it->end(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[0]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[2]);

        ++it;

        EXPECT_EQ(*it.base(), cps[2]);
        EXPECT_EQ(*it->begin(), cps[2]);
        EXPECT_EQ(it.base().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->begin().base(), cus + cp_indices[2]);
        EXPECT_EQ(it->end().base(), cus + cp_indices[3]);

        ++it;

        EXPECT_EQ(it.base().base(), cus + cp_indices[3]);
        EXPECT_EQ(it->begin(), (*it).end());
    }
}

