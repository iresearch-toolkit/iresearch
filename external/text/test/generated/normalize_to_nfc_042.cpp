// Copyright (C) 2020 T. Zachary Laine
//
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// Warning! This file is autogenerated.
#include <boost/text/normalize_string.hpp>
#include <boost/text/transcode_view.hpp>
#include <boost/text/string_utility.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(normalization, nfc_042_000)
{
    // C360;C360;110A 1164 11BB;C360;110A 1164 11BB; 
    // (썠; 썠; 썠; 썠; 썠; ) HANGUL SYLLABLE SSYAESS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC360 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC360 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1164, 0x11BB }};
        std::array<uint32_t, 1> const c4 = {{ 0xC360 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1164, 0x11BB }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_001)
{
    // C361;C361;110A 1164 11BC;C361;110A 1164 11BC; 
    // (썡; 썡; 썡; 썡; 썡; ) HANGUL SYLLABLE SSYAENG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC361 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC361 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1164, 0x11BC }};
        std::array<uint32_t, 1> const c4 = {{ 0xC361 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1164, 0x11BC }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_002)
{
    // C362;C362;110A 1164 11BD;C362;110A 1164 11BD; 
    // (썢; 썢; 썢; 썢; 썢; ) HANGUL SYLLABLE SSYAEJ
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC362 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC362 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1164, 0x11BD }};
        std::array<uint32_t, 1> const c4 = {{ 0xC362 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1164, 0x11BD }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_003)
{
    // C363;C363;110A 1164 11BE;C363;110A 1164 11BE; 
    // (썣; 썣; 썣; 썣; 썣; ) HANGUL SYLLABLE SSYAEC
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC363 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC363 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1164, 0x11BE }};
        std::array<uint32_t, 1> const c4 = {{ 0xC363 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1164, 0x11BE }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_004)
{
    // C364;C364;110A 1164 11BF;C364;110A 1164 11BF; 
    // (썤; 썤; 썤; 썤; 썤; ) HANGUL SYLLABLE SSYAEK
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC364 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC364 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1164, 0x11BF }};
        std::array<uint32_t, 1> const c4 = {{ 0xC364 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1164, 0x11BF }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_005)
{
    // C365;C365;110A 1164 11C0;C365;110A 1164 11C0; 
    // (썥; 썥; 썥; 썥; 썥; ) HANGUL SYLLABLE SSYAET
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC365 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC365 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1164, 0x11C0 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC365 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1164, 0x11C0 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_006)
{
    // C366;C366;110A 1164 11C1;C366;110A 1164 11C1; 
    // (썦; 썦; 썦; 썦; 썦; ) HANGUL SYLLABLE SSYAEP
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC366 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC366 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1164, 0x11C1 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC366 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1164, 0x11C1 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_007)
{
    // C367;C367;110A 1164 11C2;C367;110A 1164 11C2; 
    // (썧; 썧; 썧; 썧; 썧; ) HANGUL SYLLABLE SSYAEH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC367 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC367 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1164, 0x11C2 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC367 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1164, 0x11C2 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_008)
{
    // C368;C368;110A 1165;C368;110A 1165; 
    // (써; 써; 써; 써; 써; ) HANGUL SYLLABLE SSEO
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC368 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC368 }};
        std::array<uint32_t, 2> const c3 = {{ 0x110A, 0x1165 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC368 }};
        std::array<uint32_t, 2> const c5 = {{ 0x110A, 0x1165 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_009)
{
    // C369;C369;110A 1165 11A8;C369;110A 1165 11A8; 
    // (썩; 썩; 썩; 썩; 썩; ) HANGUL SYLLABLE SSEOG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC369 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC369 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11A8 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC369 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11A8 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_010)
{
    // C36A;C36A;110A 1165 11A9;C36A;110A 1165 11A9; 
    // (썪; 썪; 썪; 썪; 썪; ) HANGUL SYLLABLE SSEOGG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC36A }};
        std::array<uint32_t, 1> const c2 = {{ 0xC36A }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11A9 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC36A }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11A9 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_011)
{
    // C36B;C36B;110A 1165 11AA;C36B;110A 1165 11AA; 
    // (썫; 썫; 썫; 썫; 썫; ) HANGUL SYLLABLE SSEOGS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC36B }};
        std::array<uint32_t, 1> const c2 = {{ 0xC36B }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11AA }};
        std::array<uint32_t, 1> const c4 = {{ 0xC36B }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11AA }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_012)
{
    // C36C;C36C;110A 1165 11AB;C36C;110A 1165 11AB; 
    // (썬; 썬; 썬; 썬; 썬; ) HANGUL SYLLABLE SSEON
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC36C }};
        std::array<uint32_t, 1> const c2 = {{ 0xC36C }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11AB }};
        std::array<uint32_t, 1> const c4 = {{ 0xC36C }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11AB }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_013)
{
    // C36D;C36D;110A 1165 11AC;C36D;110A 1165 11AC; 
    // (썭; 썭; 썭; 썭; 썭; ) HANGUL SYLLABLE SSEONJ
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC36D }};
        std::array<uint32_t, 1> const c2 = {{ 0xC36D }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11AC }};
        std::array<uint32_t, 1> const c4 = {{ 0xC36D }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11AC }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_014)
{
    // C36E;C36E;110A 1165 11AD;C36E;110A 1165 11AD; 
    // (썮; 썮; 썮; 썮; 썮; ) HANGUL SYLLABLE SSEONH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC36E }};
        std::array<uint32_t, 1> const c2 = {{ 0xC36E }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11AD }};
        std::array<uint32_t, 1> const c4 = {{ 0xC36E }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11AD }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_015)
{
    // C36F;C36F;110A 1165 11AE;C36F;110A 1165 11AE; 
    // (썯; 썯; 썯; 썯; 썯; ) HANGUL SYLLABLE SSEOD
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC36F }};
        std::array<uint32_t, 1> const c2 = {{ 0xC36F }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11AE }};
        std::array<uint32_t, 1> const c4 = {{ 0xC36F }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11AE }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_016)
{
    // C370;C370;110A 1165 11AF;C370;110A 1165 11AF; 
    // (썰; 썰; 썰; 썰; 썰; ) HANGUL SYLLABLE SSEOL
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC370 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC370 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11AF }};
        std::array<uint32_t, 1> const c4 = {{ 0xC370 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11AF }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_017)
{
    // C371;C371;110A 1165 11B0;C371;110A 1165 11B0; 
    // (썱; 썱; 썱; 썱; 썱; ) HANGUL SYLLABLE SSEOLG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC371 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC371 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11B0 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC371 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11B0 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_018)
{
    // C372;C372;110A 1165 11B1;C372;110A 1165 11B1; 
    // (썲; 썲; 썲; 썲; 썲; ) HANGUL SYLLABLE SSEOLM
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC372 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC372 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11B1 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC372 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11B1 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_019)
{
    // C373;C373;110A 1165 11B2;C373;110A 1165 11B2; 
    // (썳; 썳; 썳; 썳; 썳; ) HANGUL SYLLABLE SSEOLB
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC373 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC373 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11B2 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC373 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11B2 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_020)
{
    // C374;C374;110A 1165 11B3;C374;110A 1165 11B3; 
    // (썴; 썴; 썴; 썴; 썴; ) HANGUL SYLLABLE SSEOLS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC374 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC374 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11B3 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC374 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11B3 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_021)
{
    // C375;C375;110A 1165 11B4;C375;110A 1165 11B4; 
    // (썵; 썵; 썵; 썵; 썵; ) HANGUL SYLLABLE SSEOLT
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC375 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC375 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11B4 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC375 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11B4 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_022)
{
    // C376;C376;110A 1165 11B5;C376;110A 1165 11B5; 
    // (썶; 썶; 썶; 썶; 썶; ) HANGUL SYLLABLE SSEOLP
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC376 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC376 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11B5 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC376 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11B5 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_023)
{
    // C377;C377;110A 1165 11B6;C377;110A 1165 11B6; 
    // (썷; 썷; 썷; 썷; 썷; ) HANGUL SYLLABLE SSEOLH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC377 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC377 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11B6 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC377 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11B6 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_024)
{
    // C378;C378;110A 1165 11B7;C378;110A 1165 11B7; 
    // (썸; 썸; 썸; 썸; 썸; ) HANGUL SYLLABLE SSEOM
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC378 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC378 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11B7 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC378 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11B7 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_025)
{
    // C379;C379;110A 1165 11B8;C379;110A 1165 11B8; 
    // (썹; 썹; 썹; 썹; 썹; ) HANGUL SYLLABLE SSEOB
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC379 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC379 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11B8 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC379 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11B8 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_026)
{
    // C37A;C37A;110A 1165 11B9;C37A;110A 1165 11B9; 
    // (썺; 썺; 썺; 썺; 썺; ) HANGUL SYLLABLE SSEOBS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC37A }};
        std::array<uint32_t, 1> const c2 = {{ 0xC37A }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11B9 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC37A }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11B9 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_027)
{
    // C37B;C37B;110A 1165 11BA;C37B;110A 1165 11BA; 
    // (썻; 썻; 썻; 썻; 썻; ) HANGUL SYLLABLE SSEOS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC37B }};
        std::array<uint32_t, 1> const c2 = {{ 0xC37B }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11BA }};
        std::array<uint32_t, 1> const c4 = {{ 0xC37B }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11BA }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_028)
{
    // C37C;C37C;110A 1165 11BB;C37C;110A 1165 11BB; 
    // (썼; 썼; 썼; 썼; 썼; ) HANGUL SYLLABLE SSEOSS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC37C }};
        std::array<uint32_t, 1> const c2 = {{ 0xC37C }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11BB }};
        std::array<uint32_t, 1> const c4 = {{ 0xC37C }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11BB }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_029)
{
    // C37D;C37D;110A 1165 11BC;C37D;110A 1165 11BC; 
    // (썽; 썽; 썽; 썽; 썽; ) HANGUL SYLLABLE SSEONG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC37D }};
        std::array<uint32_t, 1> const c2 = {{ 0xC37D }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11BC }};
        std::array<uint32_t, 1> const c4 = {{ 0xC37D }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11BC }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_030)
{
    // C37E;C37E;110A 1165 11BD;C37E;110A 1165 11BD; 
    // (썾; 썾; 썾; 썾; 썾; ) HANGUL SYLLABLE SSEOJ
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC37E }};
        std::array<uint32_t, 1> const c2 = {{ 0xC37E }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11BD }};
        std::array<uint32_t, 1> const c4 = {{ 0xC37E }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11BD }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_031)
{
    // C37F;C37F;110A 1165 11BE;C37F;110A 1165 11BE; 
    // (썿; 썿; 썿; 썿; 썿; ) HANGUL SYLLABLE SSEOC
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC37F }};
        std::array<uint32_t, 1> const c2 = {{ 0xC37F }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11BE }};
        std::array<uint32_t, 1> const c4 = {{ 0xC37F }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11BE }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_032)
{
    // C380;C380;110A 1165 11BF;C380;110A 1165 11BF; 
    // (쎀; 쎀; 쎀; 쎀; 쎀; ) HANGUL SYLLABLE SSEOK
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC380 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC380 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11BF }};
        std::array<uint32_t, 1> const c4 = {{ 0xC380 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11BF }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_033)
{
    // C381;C381;110A 1165 11C0;C381;110A 1165 11C0; 
    // (쎁; 쎁; 쎁; 쎁; 쎁; ) HANGUL SYLLABLE SSEOT
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC381 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC381 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11C0 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC381 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11C0 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_034)
{
    // C382;C382;110A 1165 11C1;C382;110A 1165 11C1; 
    // (쎂; 쎂; 쎂; 쎂; 쎂; ) HANGUL SYLLABLE SSEOP
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC382 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC382 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11C1 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC382 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11C1 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_035)
{
    // C383;C383;110A 1165 11C2;C383;110A 1165 11C2; 
    // (쎃; 쎃; 쎃; 쎃; 쎃; ) HANGUL SYLLABLE SSEOH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC383 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC383 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1165, 0x11C2 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC383 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1165, 0x11C2 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_036)
{
    // C384;C384;110A 1166;C384;110A 1166; 
    // (쎄; 쎄; 쎄; 쎄; 쎄; ) HANGUL SYLLABLE SSE
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC384 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC384 }};
        std::array<uint32_t, 2> const c3 = {{ 0x110A, 0x1166 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC384 }};
        std::array<uint32_t, 2> const c5 = {{ 0x110A, 0x1166 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_037)
{
    // C385;C385;110A 1166 11A8;C385;110A 1166 11A8; 
    // (쎅; 쎅; 쎅; 쎅; 쎅; ) HANGUL SYLLABLE SSEG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC385 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC385 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11A8 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC385 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11A8 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_038)
{
    // C386;C386;110A 1166 11A9;C386;110A 1166 11A9; 
    // (쎆; 쎆; 쎆; 쎆; 쎆; ) HANGUL SYLLABLE SSEGG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC386 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC386 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11A9 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC386 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11A9 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_039)
{
    // C387;C387;110A 1166 11AA;C387;110A 1166 11AA; 
    // (쎇; 쎇; 쎇; 쎇; 쎇; ) HANGUL SYLLABLE SSEGS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC387 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC387 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11AA }};
        std::array<uint32_t, 1> const c4 = {{ 0xC387 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11AA }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_040)
{
    // C388;C388;110A 1166 11AB;C388;110A 1166 11AB; 
    // (쎈; 쎈; 쎈; 쎈; 쎈; ) HANGUL SYLLABLE SSEN
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC388 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC388 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11AB }};
        std::array<uint32_t, 1> const c4 = {{ 0xC388 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11AB }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_041)
{
    // C389;C389;110A 1166 11AC;C389;110A 1166 11AC; 
    // (쎉; 쎉; 쎉; 쎉; 쎉; ) HANGUL SYLLABLE SSENJ
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC389 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC389 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11AC }};
        std::array<uint32_t, 1> const c4 = {{ 0xC389 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11AC }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_042)
{
    // C38A;C38A;110A 1166 11AD;C38A;110A 1166 11AD; 
    // (쎊; 쎊; 쎊; 쎊; 쎊; ) HANGUL SYLLABLE SSENH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC38A }};
        std::array<uint32_t, 1> const c2 = {{ 0xC38A }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11AD }};
        std::array<uint32_t, 1> const c4 = {{ 0xC38A }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11AD }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_043)
{
    // C38B;C38B;110A 1166 11AE;C38B;110A 1166 11AE; 
    // (쎋; 쎋; 쎋; 쎋; 쎋; ) HANGUL SYLLABLE SSED
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC38B }};
        std::array<uint32_t, 1> const c2 = {{ 0xC38B }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11AE }};
        std::array<uint32_t, 1> const c4 = {{ 0xC38B }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11AE }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_044)
{
    // C38C;C38C;110A 1166 11AF;C38C;110A 1166 11AF; 
    // (쎌; 쎌; 쎌; 쎌; 쎌; ) HANGUL SYLLABLE SSEL
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC38C }};
        std::array<uint32_t, 1> const c2 = {{ 0xC38C }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11AF }};
        std::array<uint32_t, 1> const c4 = {{ 0xC38C }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11AF }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_045)
{
    // C38D;C38D;110A 1166 11B0;C38D;110A 1166 11B0; 
    // (쎍; 쎍; 쎍; 쎍; 쎍; ) HANGUL SYLLABLE SSELG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC38D }};
        std::array<uint32_t, 1> const c2 = {{ 0xC38D }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11B0 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC38D }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11B0 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_046)
{
    // C38E;C38E;110A 1166 11B1;C38E;110A 1166 11B1; 
    // (쎎; 쎎; 쎎; 쎎; 쎎; ) HANGUL SYLLABLE SSELM
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC38E }};
        std::array<uint32_t, 1> const c2 = {{ 0xC38E }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11B1 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC38E }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11B1 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_047)
{
    // C38F;C38F;110A 1166 11B2;C38F;110A 1166 11B2; 
    // (쎏; 쎏; 쎏; 쎏; 쎏; ) HANGUL SYLLABLE SSELB
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC38F }};
        std::array<uint32_t, 1> const c2 = {{ 0xC38F }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11B2 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC38F }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11B2 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_048)
{
    // C390;C390;110A 1166 11B3;C390;110A 1166 11B3; 
    // (쎐; 쎐; 쎐; 쎐; 쎐; ) HANGUL SYLLABLE SSELS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC390 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC390 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11B3 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC390 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11B3 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_049)
{
    // C391;C391;110A 1166 11B4;C391;110A 1166 11B4; 
    // (쎑; 쎑; 쎑; 쎑; 쎑; ) HANGUL SYLLABLE SSELT
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC391 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC391 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11B4 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC391 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11B4 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_050)
{
    // C392;C392;110A 1166 11B5;C392;110A 1166 11B5; 
    // (쎒; 쎒; 쎒; 쎒; 쎒; ) HANGUL SYLLABLE SSELP
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC392 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC392 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11B5 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC392 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11B5 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_051)
{
    // C393;C393;110A 1166 11B6;C393;110A 1166 11B6; 
    // (쎓; 쎓; 쎓; 쎓; 쎓; ) HANGUL SYLLABLE SSELH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC393 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC393 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11B6 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC393 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11B6 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_052)
{
    // C394;C394;110A 1166 11B7;C394;110A 1166 11B7; 
    // (쎔; 쎔; 쎔; 쎔; 쎔; ) HANGUL SYLLABLE SSEM
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC394 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC394 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11B7 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC394 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11B7 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_053)
{
    // C395;C395;110A 1166 11B8;C395;110A 1166 11B8; 
    // (쎕; 쎕; 쎕; 쎕; 쎕; ) HANGUL SYLLABLE SSEB
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC395 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC395 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11B8 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC395 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11B8 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_054)
{
    // C396;C396;110A 1166 11B9;C396;110A 1166 11B9; 
    // (쎖; 쎖; 쎖; 쎖; 쎖; ) HANGUL SYLLABLE SSEBS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC396 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC396 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11B9 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC396 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11B9 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_055)
{
    // C397;C397;110A 1166 11BA;C397;110A 1166 11BA; 
    // (쎗; 쎗; 쎗; 쎗; 쎗; ) HANGUL SYLLABLE SSES
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC397 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC397 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11BA }};
        std::array<uint32_t, 1> const c4 = {{ 0xC397 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11BA }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_056)
{
    // C398;C398;110A 1166 11BB;C398;110A 1166 11BB; 
    // (쎘; 쎘; 쎘; 쎘; 쎘; ) HANGUL SYLLABLE SSESS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC398 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC398 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11BB }};
        std::array<uint32_t, 1> const c4 = {{ 0xC398 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11BB }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_057)
{
    // C399;C399;110A 1166 11BC;C399;110A 1166 11BC; 
    // (쎙; 쎙; 쎙; 쎙; 쎙; ) HANGUL SYLLABLE SSENG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC399 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC399 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11BC }};
        std::array<uint32_t, 1> const c4 = {{ 0xC399 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11BC }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_058)
{
    // C39A;C39A;110A 1166 11BD;C39A;110A 1166 11BD; 
    // (쎚; 쎚; 쎚; 쎚; 쎚; ) HANGUL SYLLABLE SSEJ
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC39A }};
        std::array<uint32_t, 1> const c2 = {{ 0xC39A }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11BD }};
        std::array<uint32_t, 1> const c4 = {{ 0xC39A }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11BD }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_059)
{
    // C39B;C39B;110A 1166 11BE;C39B;110A 1166 11BE; 
    // (쎛; 쎛; 쎛; 쎛; 쎛; ) HANGUL SYLLABLE SSEC
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC39B }};
        std::array<uint32_t, 1> const c2 = {{ 0xC39B }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11BE }};
        std::array<uint32_t, 1> const c4 = {{ 0xC39B }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11BE }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_060)
{
    // C39C;C39C;110A 1166 11BF;C39C;110A 1166 11BF; 
    // (쎜; 쎜; 쎜; 쎜; 쎜; ) HANGUL SYLLABLE SSEK
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC39C }};
        std::array<uint32_t, 1> const c2 = {{ 0xC39C }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11BF }};
        std::array<uint32_t, 1> const c4 = {{ 0xC39C }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11BF }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_061)
{
    // C39D;C39D;110A 1166 11C0;C39D;110A 1166 11C0; 
    // (쎝; 쎝; 쎝; 쎝; 쎝; ) HANGUL SYLLABLE SSET
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC39D }};
        std::array<uint32_t, 1> const c2 = {{ 0xC39D }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11C0 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC39D }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11C0 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_062)
{
    // C39E;C39E;110A 1166 11C1;C39E;110A 1166 11C1; 
    // (쎞; 쎞; 쎞; 쎞; 쎞; ) HANGUL SYLLABLE SSEP
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC39E }};
        std::array<uint32_t, 1> const c2 = {{ 0xC39E }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11C1 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC39E }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11C1 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_063)
{
    // C39F;C39F;110A 1166 11C2;C39F;110A 1166 11C2; 
    // (쎟; 쎟; 쎟; 쎟; 쎟; ) HANGUL SYLLABLE SSEH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC39F }};
        std::array<uint32_t, 1> const c2 = {{ 0xC39F }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1166, 0x11C2 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC39F }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1166, 0x11C2 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_064)
{
    // C3A0;C3A0;110A 1167;C3A0;110A 1167; 
    // (쎠; 쎠; 쎠; 쎠; 쎠; ) HANGUL SYLLABLE SSYEO
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3A0 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3A0 }};
        std::array<uint32_t, 2> const c3 = {{ 0x110A, 0x1167 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3A0 }};
        std::array<uint32_t, 2> const c5 = {{ 0x110A, 0x1167 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_065)
{
    // C3A1;C3A1;110A 1167 11A8;C3A1;110A 1167 11A8; 
    // (쎡; 쎡; 쎡; 쎡; 쎡; ) HANGUL SYLLABLE SSYEOG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3A1 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3A1 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11A8 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3A1 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11A8 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_066)
{
    // C3A2;C3A2;110A 1167 11A9;C3A2;110A 1167 11A9; 
    // (쎢; 쎢; 쎢; 쎢; 쎢; ) HANGUL SYLLABLE SSYEOGG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3A2 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3A2 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11A9 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3A2 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11A9 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_067)
{
    // C3A3;C3A3;110A 1167 11AA;C3A3;110A 1167 11AA; 
    // (쎣; 쎣; 쎣; 쎣; 쎣; ) HANGUL SYLLABLE SSYEOGS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3A3 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3A3 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11AA }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3A3 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11AA }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_068)
{
    // C3A4;C3A4;110A 1167 11AB;C3A4;110A 1167 11AB; 
    // (쎤; 쎤; 쎤; 쎤; 쎤; ) HANGUL SYLLABLE SSYEON
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3A4 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3A4 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11AB }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3A4 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11AB }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_069)
{
    // C3A5;C3A5;110A 1167 11AC;C3A5;110A 1167 11AC; 
    // (쎥; 쎥; 쎥; 쎥; 쎥; ) HANGUL SYLLABLE SSYEONJ
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3A5 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3A5 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11AC }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3A5 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11AC }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_070)
{
    // C3A6;C3A6;110A 1167 11AD;C3A6;110A 1167 11AD; 
    // (쎦; 쎦; 쎦; 쎦; 쎦; ) HANGUL SYLLABLE SSYEONH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3A6 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3A6 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11AD }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3A6 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11AD }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_071)
{
    // C3A7;C3A7;110A 1167 11AE;C3A7;110A 1167 11AE; 
    // (쎧; 쎧; 쎧; 쎧; 쎧; ) HANGUL SYLLABLE SSYEOD
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3A7 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3A7 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11AE }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3A7 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11AE }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_072)
{
    // C3A8;C3A8;110A 1167 11AF;C3A8;110A 1167 11AF; 
    // (쎨; 쎨; 쎨; 쎨; 쎨; ) HANGUL SYLLABLE SSYEOL
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3A8 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3A8 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11AF }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3A8 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11AF }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_073)
{
    // C3A9;C3A9;110A 1167 11B0;C3A9;110A 1167 11B0; 
    // (쎩; 쎩; 쎩; 쎩; 쎩; ) HANGUL SYLLABLE SSYEOLG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3A9 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3A9 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11B0 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3A9 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11B0 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_074)
{
    // C3AA;C3AA;110A 1167 11B1;C3AA;110A 1167 11B1; 
    // (쎪; 쎪; 쎪; 쎪; 쎪; ) HANGUL SYLLABLE SSYEOLM
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3AA }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3AA }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11B1 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3AA }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11B1 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_075)
{
    // C3AB;C3AB;110A 1167 11B2;C3AB;110A 1167 11B2; 
    // (쎫; 쎫; 쎫; 쎫; 쎫; ) HANGUL SYLLABLE SSYEOLB
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3AB }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3AB }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11B2 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3AB }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11B2 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_076)
{
    // C3AC;C3AC;110A 1167 11B3;C3AC;110A 1167 11B3; 
    // (쎬; 쎬; 쎬; 쎬; 쎬; ) HANGUL SYLLABLE SSYEOLS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3AC }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3AC }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11B3 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3AC }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11B3 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_077)
{
    // C3AD;C3AD;110A 1167 11B4;C3AD;110A 1167 11B4; 
    // (쎭; 쎭; 쎭; 쎭; 쎭; ) HANGUL SYLLABLE SSYEOLT
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3AD }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3AD }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11B4 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3AD }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11B4 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_078)
{
    // C3AE;C3AE;110A 1167 11B5;C3AE;110A 1167 11B5; 
    // (쎮; 쎮; 쎮; 쎮; 쎮; ) HANGUL SYLLABLE SSYEOLP
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3AE }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3AE }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11B5 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3AE }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11B5 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_079)
{
    // C3AF;C3AF;110A 1167 11B6;C3AF;110A 1167 11B6; 
    // (쎯; 쎯; 쎯; 쎯; 쎯; ) HANGUL SYLLABLE SSYEOLH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3AF }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3AF }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11B6 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3AF }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11B6 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_080)
{
    // C3B0;C3B0;110A 1167 11B7;C3B0;110A 1167 11B7; 
    // (쎰; 쎰; 쎰; 쎰; 쎰; ) HANGUL SYLLABLE SSYEOM
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3B0 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3B0 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11B7 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3B0 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11B7 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_081)
{
    // C3B1;C3B1;110A 1167 11B8;C3B1;110A 1167 11B8; 
    // (쎱; 쎱; 쎱; 쎱; 쎱; ) HANGUL SYLLABLE SSYEOB
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3B1 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3B1 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11B8 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3B1 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11B8 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_082)
{
    // C3B2;C3B2;110A 1167 11B9;C3B2;110A 1167 11B9; 
    // (쎲; 쎲; 쎲; 쎲; 쎲; ) HANGUL SYLLABLE SSYEOBS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3B2 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3B2 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11B9 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3B2 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11B9 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_083)
{
    // C3B3;C3B3;110A 1167 11BA;C3B3;110A 1167 11BA; 
    // (쎳; 쎳; 쎳; 쎳; 쎳; ) HANGUL SYLLABLE SSYEOS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3B3 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3B3 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11BA }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3B3 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11BA }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_084)
{
    // C3B4;C3B4;110A 1167 11BB;C3B4;110A 1167 11BB; 
    // (쎴; 쎴; 쎴; 쎴; 쎴; ) HANGUL SYLLABLE SSYEOSS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3B4 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3B4 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11BB }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3B4 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11BB }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_085)
{
    // C3B5;C3B5;110A 1167 11BC;C3B5;110A 1167 11BC; 
    // (쎵; 쎵; 쎵; 쎵; 쎵; ) HANGUL SYLLABLE SSYEONG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3B5 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3B5 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11BC }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3B5 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11BC }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_086)
{
    // C3B6;C3B6;110A 1167 11BD;C3B6;110A 1167 11BD; 
    // (쎶; 쎶; 쎶; 쎶; 쎶; ) HANGUL SYLLABLE SSYEOJ
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3B6 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3B6 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11BD }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3B6 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11BD }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_087)
{
    // C3B7;C3B7;110A 1167 11BE;C3B7;110A 1167 11BE; 
    // (쎷; 쎷; 쎷; 쎷; 쎷; ) HANGUL SYLLABLE SSYEOC
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3B7 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3B7 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11BE }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3B7 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11BE }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_088)
{
    // C3B8;C3B8;110A 1167 11BF;C3B8;110A 1167 11BF; 
    // (쎸; 쎸; 쎸; 쎸; 쎸; ) HANGUL SYLLABLE SSYEOK
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3B8 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3B8 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11BF }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3B8 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11BF }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_089)
{
    // C3B9;C3B9;110A 1167 11C0;C3B9;110A 1167 11C0; 
    // (쎹; 쎹; 쎹; 쎹; 쎹; ) HANGUL SYLLABLE SSYEOT
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3B9 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3B9 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11C0 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3B9 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11C0 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_090)
{
    // C3BA;C3BA;110A 1167 11C1;C3BA;110A 1167 11C1; 
    // (쎺; 쎺; 쎺; 쎺; 쎺; ) HANGUL SYLLABLE SSYEOP
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3BA }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3BA }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11C1 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3BA }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11C1 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_091)
{
    // C3BB;C3BB;110A 1167 11C2;C3BB;110A 1167 11C2; 
    // (쎻; 쎻; 쎻; 쎻; 쎻; ) HANGUL SYLLABLE SSYEOH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3BB }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3BB }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1167, 0x11C2 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3BB }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1167, 0x11C2 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_092)
{
    // C3BC;C3BC;110A 1168;C3BC;110A 1168; 
    // (쎼; 쎼; 쎼; 쎼; 쎼; ) HANGUL SYLLABLE SSYE
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3BC }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3BC }};
        std::array<uint32_t, 2> const c3 = {{ 0x110A, 0x1168 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3BC }};
        std::array<uint32_t, 2> const c5 = {{ 0x110A, 0x1168 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_093)
{
    // C3BD;C3BD;110A 1168 11A8;C3BD;110A 1168 11A8; 
    // (쎽; 쎽; 쎽; 쎽; 쎽; ) HANGUL SYLLABLE SSYEG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3BD }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3BD }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11A8 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3BD }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11A8 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_094)
{
    // C3BE;C3BE;110A 1168 11A9;C3BE;110A 1168 11A9; 
    // (쎾; 쎾; 쎾; 쎾; 쎾; ) HANGUL SYLLABLE SSYEGG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3BE }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3BE }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11A9 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3BE }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11A9 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_095)
{
    // C3BF;C3BF;110A 1168 11AA;C3BF;110A 1168 11AA; 
    // (쎿; 쎿; 쎿; 쎿; 쎿; ) HANGUL SYLLABLE SSYEGS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3BF }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3BF }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11AA }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3BF }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11AA }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_096)
{
    // C3C0;C3C0;110A 1168 11AB;C3C0;110A 1168 11AB; 
    // (쏀; 쏀; 쏀; 쏀; 쏀; ) HANGUL SYLLABLE SSYEN
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3C0 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3C0 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11AB }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3C0 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11AB }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_097)
{
    // C3C1;C3C1;110A 1168 11AC;C3C1;110A 1168 11AC; 
    // (쏁; 쏁; 쏁; 쏁; 쏁; ) HANGUL SYLLABLE SSYENJ
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3C1 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3C1 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11AC }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3C1 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11AC }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_098)
{
    // C3C2;C3C2;110A 1168 11AD;C3C2;110A 1168 11AD; 
    // (쏂; 쏂; 쏂; 쏂; 쏂; ) HANGUL SYLLABLE SSYENH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3C2 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3C2 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11AD }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3C2 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11AD }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_099)
{
    // C3C3;C3C3;110A 1168 11AE;C3C3;110A 1168 11AE; 
    // (쏃; 쏃; 쏃; 쏃; 쏃; ) HANGUL SYLLABLE SSYED
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3C3 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3C3 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11AE }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3C3 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11AE }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_100)
{
    // C3C4;C3C4;110A 1168 11AF;C3C4;110A 1168 11AF; 
    // (쏄; 쏄; 쏄; 쏄; 쏄; ) HANGUL SYLLABLE SSYEL
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3C4 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3C4 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11AF }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3C4 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11AF }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_101)
{
    // C3C5;C3C5;110A 1168 11B0;C3C5;110A 1168 11B0; 
    // (쏅; 쏅; 쏅; 쏅; 쏅; ) HANGUL SYLLABLE SSYELG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3C5 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3C5 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11B0 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3C5 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11B0 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_102)
{
    // C3C6;C3C6;110A 1168 11B1;C3C6;110A 1168 11B1; 
    // (쏆; 쏆; 쏆; 쏆; 쏆; ) HANGUL SYLLABLE SSYELM
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3C6 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3C6 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11B1 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3C6 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11B1 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_103)
{
    // C3C7;C3C7;110A 1168 11B2;C3C7;110A 1168 11B2; 
    // (쏇; 쏇; 쏇; 쏇; 쏇; ) HANGUL SYLLABLE SSYELB
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3C7 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3C7 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11B2 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3C7 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11B2 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_104)
{
    // C3C8;C3C8;110A 1168 11B3;C3C8;110A 1168 11B3; 
    // (쏈; 쏈; 쏈; 쏈; 쏈; ) HANGUL SYLLABLE SSYELS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3C8 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3C8 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11B3 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3C8 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11B3 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_105)
{
    // C3C9;C3C9;110A 1168 11B4;C3C9;110A 1168 11B4; 
    // (쏉; 쏉; 쏉; 쏉; 쏉; ) HANGUL SYLLABLE SSYELT
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3C9 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3C9 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11B4 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3C9 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11B4 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_106)
{
    // C3CA;C3CA;110A 1168 11B5;C3CA;110A 1168 11B5; 
    // (쏊; 쏊; 쏊; 쏊; 쏊; ) HANGUL SYLLABLE SSYELP
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3CA }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3CA }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11B5 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3CA }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11B5 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_107)
{
    // C3CB;C3CB;110A 1168 11B6;C3CB;110A 1168 11B6; 
    // (쏋; 쏋; 쏋; 쏋; 쏋; ) HANGUL SYLLABLE SSYELH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3CB }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3CB }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11B6 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3CB }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11B6 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_108)
{
    // C3CC;C3CC;110A 1168 11B7;C3CC;110A 1168 11B7; 
    // (쏌; 쏌; 쏌; 쏌; 쏌; ) HANGUL SYLLABLE SSYEM
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3CC }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3CC }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11B7 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3CC }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11B7 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_109)
{
    // C3CD;C3CD;110A 1168 11B8;C3CD;110A 1168 11B8; 
    // (쏍; 쏍; 쏍; 쏍; 쏍; ) HANGUL SYLLABLE SSYEB
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3CD }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3CD }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11B8 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3CD }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11B8 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_110)
{
    // C3CE;C3CE;110A 1168 11B9;C3CE;110A 1168 11B9; 
    // (쏎; 쏎; 쏎; 쏎; 쏎; ) HANGUL SYLLABLE SSYEBS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3CE }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3CE }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11B9 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3CE }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11B9 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_111)
{
    // C3CF;C3CF;110A 1168 11BA;C3CF;110A 1168 11BA; 
    // (쏏; 쏏; 쏏; 쏏; 쏏; ) HANGUL SYLLABLE SSYES
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3CF }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3CF }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11BA }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3CF }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11BA }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_112)
{
    // C3D0;C3D0;110A 1168 11BB;C3D0;110A 1168 11BB; 
    // (쏐; 쏐; 쏐; 쏐; 쏐; ) HANGUL SYLLABLE SSYESS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3D0 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3D0 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11BB }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3D0 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11BB }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_113)
{
    // C3D1;C3D1;110A 1168 11BC;C3D1;110A 1168 11BC; 
    // (쏑; 쏑; 쏑; 쏑; 쏑; ) HANGUL SYLLABLE SSYENG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3D1 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3D1 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11BC }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3D1 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11BC }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_114)
{
    // C3D2;C3D2;110A 1168 11BD;C3D2;110A 1168 11BD; 
    // (쏒; 쏒; 쏒; 쏒; 쏒; ) HANGUL SYLLABLE SSYEJ
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3D2 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3D2 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11BD }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3D2 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11BD }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_115)
{
    // C3D3;C3D3;110A 1168 11BE;C3D3;110A 1168 11BE; 
    // (쏓; 쏓; 쏓; 쏓; 쏓; ) HANGUL SYLLABLE SSYEC
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3D3 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3D3 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11BE }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3D3 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11BE }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_116)
{
    // C3D4;C3D4;110A 1168 11BF;C3D4;110A 1168 11BF; 
    // (쏔; 쏔; 쏔; 쏔; 쏔; ) HANGUL SYLLABLE SSYEK
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3D4 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3D4 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11BF }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3D4 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11BF }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_117)
{
    // C3D5;C3D5;110A 1168 11C0;C3D5;110A 1168 11C0; 
    // (쏕; 쏕; 쏕; 쏕; 쏕; ) HANGUL SYLLABLE SSYET
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3D5 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3D5 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11C0 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3D5 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11C0 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_118)
{
    // C3D6;C3D6;110A 1168 11C1;C3D6;110A 1168 11C1; 
    // (쏖; 쏖; 쏖; 쏖; 쏖; ) HANGUL SYLLABLE SSYEP
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3D6 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3D6 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11C1 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3D6 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11C1 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_119)
{
    // C3D7;C3D7;110A 1168 11C2;C3D7;110A 1168 11C2; 
    // (쏗; 쏗; 쏗; 쏗; 쏗; ) HANGUL SYLLABLE SSYEH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3D7 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3D7 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1168, 0x11C2 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3D7 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1168, 0x11C2 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_120)
{
    // C3D8;C3D8;110A 1169;C3D8;110A 1169; 
    // (쏘; 쏘; 쏘; 쏘; 쏘; ) HANGUL SYLLABLE SSO
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3D8 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3D8 }};
        std::array<uint32_t, 2> const c3 = {{ 0x110A, 0x1169 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3D8 }};
        std::array<uint32_t, 2> const c5 = {{ 0x110A, 0x1169 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_121)
{
    // C3D9;C3D9;110A 1169 11A8;C3D9;110A 1169 11A8; 
    // (쏙; 쏙; 쏙; 쏙; 쏙; ) HANGUL SYLLABLE SSOG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3D9 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3D9 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11A8 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3D9 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11A8 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_122)
{
    // C3DA;C3DA;110A 1169 11A9;C3DA;110A 1169 11A9; 
    // (쏚; 쏚; 쏚; 쏚; 쏚; ) HANGUL SYLLABLE SSOGG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3DA }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3DA }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11A9 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3DA }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11A9 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_123)
{
    // C3DB;C3DB;110A 1169 11AA;C3DB;110A 1169 11AA; 
    // (쏛; 쏛; 쏛; 쏛; 쏛; ) HANGUL SYLLABLE SSOGS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3DB }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3DB }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11AA }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3DB }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11AA }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_124)
{
    // C3DC;C3DC;110A 1169 11AB;C3DC;110A 1169 11AB; 
    // (쏜; 쏜; 쏜; 쏜; 쏜; ) HANGUL SYLLABLE SSON
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3DC }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3DC }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11AB }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3DC }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11AB }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_125)
{
    // C3DD;C3DD;110A 1169 11AC;C3DD;110A 1169 11AC; 
    // (쏝; 쏝; 쏝; 쏝; 쏝; ) HANGUL SYLLABLE SSONJ
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3DD }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3DD }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11AC }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3DD }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11AC }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_126)
{
    // C3DE;C3DE;110A 1169 11AD;C3DE;110A 1169 11AD; 
    // (쏞; 쏞; 쏞; 쏞; 쏞; ) HANGUL SYLLABLE SSONH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3DE }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3DE }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11AD }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3DE }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11AD }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_127)
{
    // C3DF;C3DF;110A 1169 11AE;C3DF;110A 1169 11AE; 
    // (쏟; 쏟; 쏟; 쏟; 쏟; ) HANGUL SYLLABLE SSOD
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3DF }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3DF }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11AE }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3DF }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11AE }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_128)
{
    // C3E0;C3E0;110A 1169 11AF;C3E0;110A 1169 11AF; 
    // (쏠; 쏠; 쏠; 쏠; 쏠; ) HANGUL SYLLABLE SSOL
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3E0 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3E0 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11AF }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3E0 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11AF }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_129)
{
    // C3E1;C3E1;110A 1169 11B0;C3E1;110A 1169 11B0; 
    // (쏡; 쏡; 쏡; 쏡; 쏡; ) HANGUL SYLLABLE SSOLG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3E1 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3E1 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11B0 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3E1 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11B0 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_130)
{
    // C3E2;C3E2;110A 1169 11B1;C3E2;110A 1169 11B1; 
    // (쏢; 쏢; 쏢; 쏢; 쏢; ) HANGUL SYLLABLE SSOLM
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3E2 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3E2 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11B1 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3E2 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11B1 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_131)
{
    // C3E3;C3E3;110A 1169 11B2;C3E3;110A 1169 11B2; 
    // (쏣; 쏣; 쏣; 쏣; 쏣; ) HANGUL SYLLABLE SSOLB
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3E3 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3E3 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11B2 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3E3 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11B2 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_132)
{
    // C3E4;C3E4;110A 1169 11B3;C3E4;110A 1169 11B3; 
    // (쏤; 쏤; 쏤; 쏤; 쏤; ) HANGUL SYLLABLE SSOLS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3E4 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3E4 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11B3 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3E4 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11B3 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_133)
{
    // C3E5;C3E5;110A 1169 11B4;C3E5;110A 1169 11B4; 
    // (쏥; 쏥; 쏥; 쏥; 쏥; ) HANGUL SYLLABLE SSOLT
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3E5 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3E5 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11B4 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3E5 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11B4 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_134)
{
    // C3E6;C3E6;110A 1169 11B5;C3E6;110A 1169 11B5; 
    // (쏦; 쏦; 쏦; 쏦; 쏦; ) HANGUL SYLLABLE SSOLP
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3E6 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3E6 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11B5 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3E6 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11B5 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_135)
{
    // C3E7;C3E7;110A 1169 11B6;C3E7;110A 1169 11B6; 
    // (쏧; 쏧; 쏧; 쏧; 쏧; ) HANGUL SYLLABLE SSOLH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3E7 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3E7 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11B6 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3E7 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11B6 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_136)
{
    // C3E8;C3E8;110A 1169 11B7;C3E8;110A 1169 11B7; 
    // (쏨; 쏨; 쏨; 쏨; 쏨; ) HANGUL SYLLABLE SSOM
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3E8 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3E8 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11B7 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3E8 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11B7 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_137)
{
    // C3E9;C3E9;110A 1169 11B8;C3E9;110A 1169 11B8; 
    // (쏩; 쏩; 쏩; 쏩; 쏩; ) HANGUL SYLLABLE SSOB
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3E9 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3E9 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11B8 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3E9 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11B8 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_138)
{
    // C3EA;C3EA;110A 1169 11B9;C3EA;110A 1169 11B9; 
    // (쏪; 쏪; 쏪; 쏪; 쏪; ) HANGUL SYLLABLE SSOBS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3EA }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3EA }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11B9 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3EA }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11B9 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_139)
{
    // C3EB;C3EB;110A 1169 11BA;C3EB;110A 1169 11BA; 
    // (쏫; 쏫; 쏫; 쏫; 쏫; ) HANGUL SYLLABLE SSOS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3EB }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3EB }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11BA }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3EB }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11BA }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_140)
{
    // C3EC;C3EC;110A 1169 11BB;C3EC;110A 1169 11BB; 
    // (쏬; 쏬; 쏬; 쏬; 쏬; ) HANGUL SYLLABLE SSOSS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3EC }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3EC }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11BB }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3EC }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11BB }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_141)
{
    // C3ED;C3ED;110A 1169 11BC;C3ED;110A 1169 11BC; 
    // (쏭; 쏭; 쏭; 쏭; 쏭; ) HANGUL SYLLABLE SSONG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3ED }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3ED }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11BC }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3ED }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11BC }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_142)
{
    // C3EE;C3EE;110A 1169 11BD;C3EE;110A 1169 11BD; 
    // (쏮; 쏮; 쏮; 쏮; 쏮; ) HANGUL SYLLABLE SSOJ
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3EE }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3EE }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11BD }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3EE }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11BD }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_143)
{
    // C3EF;C3EF;110A 1169 11BE;C3EF;110A 1169 11BE; 
    // (쏯; 쏯; 쏯; 쏯; 쏯; ) HANGUL SYLLABLE SSOC
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3EF }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3EF }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11BE }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3EF }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11BE }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_144)
{
    // C3F0;C3F0;110A 1169 11BF;C3F0;110A 1169 11BF; 
    // (쏰; 쏰; 쏰; 쏰; 쏰; ) HANGUL SYLLABLE SSOK
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3F0 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3F0 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11BF }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3F0 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11BF }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_145)
{
    // C3F1;C3F1;110A 1169 11C0;C3F1;110A 1169 11C0; 
    // (쏱; 쏱; 쏱; 쏱; 쏱; ) HANGUL SYLLABLE SSOT
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3F1 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3F1 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11C0 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3F1 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11C0 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_146)
{
    // C3F2;C3F2;110A 1169 11C1;C3F2;110A 1169 11C1; 
    // (쏲; 쏲; 쏲; 쏲; 쏲; ) HANGUL SYLLABLE SSOP
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3F2 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3F2 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11C1 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3F2 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11C1 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_147)
{
    // C3F3;C3F3;110A 1169 11C2;C3F3;110A 1169 11C2; 
    // (쏳; 쏳; 쏳; 쏳; 쏳; ) HANGUL SYLLABLE SSOH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3F3 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3F3 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x1169, 0x11C2 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3F3 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x1169, 0x11C2 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_148)
{
    // C3F4;C3F4;110A 116A;C3F4;110A 116A; 
    // (쏴; 쏴; 쏴; 쏴; 쏴; ) HANGUL SYLLABLE SSWA
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3F4 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3F4 }};
        std::array<uint32_t, 2> const c3 = {{ 0x110A, 0x116A }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3F4 }};
        std::array<uint32_t, 2> const c5 = {{ 0x110A, 0x116A }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_149)
{
    // C3F5;C3F5;110A 116A 11A8;C3F5;110A 116A 11A8; 
    // (쏵; 쏵; 쏵; 쏵; 쏵; ) HANGUL SYLLABLE SSWAG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3F5 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3F5 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11A8 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3F5 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11A8 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_150)
{
    // C3F6;C3F6;110A 116A 11A9;C3F6;110A 116A 11A9; 
    // (쏶; 쏶; 쏶; 쏶; 쏶; ) HANGUL SYLLABLE SSWAGG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3F6 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3F6 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11A9 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3F6 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11A9 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_151)
{
    // C3F7;C3F7;110A 116A 11AA;C3F7;110A 116A 11AA; 
    // (쏷; 쏷; 쏷; 쏷; 쏷; ) HANGUL SYLLABLE SSWAGS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3F7 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3F7 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11AA }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3F7 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11AA }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_152)
{
    // C3F8;C3F8;110A 116A 11AB;C3F8;110A 116A 11AB; 
    // (쏸; 쏸; 쏸; 쏸; 쏸; ) HANGUL SYLLABLE SSWAN
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3F8 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3F8 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11AB }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3F8 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11AB }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_153)
{
    // C3F9;C3F9;110A 116A 11AC;C3F9;110A 116A 11AC; 
    // (쏹; 쏹; 쏹; 쏹; 쏹; ) HANGUL SYLLABLE SSWANJ
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3F9 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3F9 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11AC }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3F9 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11AC }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_154)
{
    // C3FA;C3FA;110A 116A 11AD;C3FA;110A 116A 11AD; 
    // (쏺; 쏺; 쏺; 쏺; 쏺; ) HANGUL SYLLABLE SSWANH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3FA }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3FA }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11AD }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3FA }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11AD }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_155)
{
    // C3FB;C3FB;110A 116A 11AE;C3FB;110A 116A 11AE; 
    // (쏻; 쏻; 쏻; 쏻; 쏻; ) HANGUL SYLLABLE SSWAD
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3FB }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3FB }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11AE }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3FB }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11AE }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_156)
{
    // C3FC;C3FC;110A 116A 11AF;C3FC;110A 116A 11AF; 
    // (쏼; 쏼; 쏼; 쏼; 쏼; ) HANGUL SYLLABLE SSWAL
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3FC }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3FC }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11AF }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3FC }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11AF }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_157)
{
    // C3FD;C3FD;110A 116A 11B0;C3FD;110A 116A 11B0; 
    // (쏽; 쏽; 쏽; 쏽; 쏽; ) HANGUL SYLLABLE SSWALG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3FD }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3FD }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11B0 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3FD }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11B0 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_158)
{
    // C3FE;C3FE;110A 116A 11B1;C3FE;110A 116A 11B1; 
    // (쏾; 쏾; 쏾; 쏾; 쏾; ) HANGUL SYLLABLE SSWALM
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3FE }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3FE }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11B1 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3FE }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11B1 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_159)
{
    // C3FF;C3FF;110A 116A 11B2;C3FF;110A 116A 11B2; 
    // (쏿; 쏿; 쏿; 쏿; 쏿; ) HANGUL SYLLABLE SSWALB
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC3FF }};
        std::array<uint32_t, 1> const c2 = {{ 0xC3FF }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11B2 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC3FF }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11B2 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_160)
{
    // C400;C400;110A 116A 11B3;C400;110A 116A 11B3; 
    // (쐀; 쐀; 쐀; 쐀; 쐀; ) HANGUL SYLLABLE SSWALS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC400 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC400 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11B3 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC400 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11B3 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_161)
{
    // C401;C401;110A 116A 11B4;C401;110A 116A 11B4; 
    // (쐁; 쐁; 쐁; 쐁; 쐁; ) HANGUL SYLLABLE SSWALT
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC401 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC401 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11B4 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC401 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11B4 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_162)
{
    // C402;C402;110A 116A 11B5;C402;110A 116A 11B5; 
    // (쐂; 쐂; 쐂; 쐂; 쐂; ) HANGUL SYLLABLE SSWALP
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC402 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC402 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11B5 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC402 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11B5 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_163)
{
    // C403;C403;110A 116A 11B6;C403;110A 116A 11B6; 
    // (쐃; 쐃; 쐃; 쐃; 쐃; ) HANGUL SYLLABLE SSWALH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC403 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC403 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11B6 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC403 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11B6 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_164)
{
    // C404;C404;110A 116A 11B7;C404;110A 116A 11B7; 
    // (쐄; 쐄; 쐄; 쐄; 쐄; ) HANGUL SYLLABLE SSWAM
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC404 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC404 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11B7 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC404 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11B7 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_165)
{
    // C405;C405;110A 116A 11B8;C405;110A 116A 11B8; 
    // (쐅; 쐅; 쐅; 쐅; 쐅; ) HANGUL SYLLABLE SSWAB
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC405 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC405 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11B8 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC405 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11B8 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_166)
{
    // C406;C406;110A 116A 11B9;C406;110A 116A 11B9; 
    // (쐆; 쐆; 쐆; 쐆; 쐆; ) HANGUL SYLLABLE SSWABS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC406 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC406 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11B9 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC406 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11B9 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_167)
{
    // C407;C407;110A 116A 11BA;C407;110A 116A 11BA; 
    // (쐇; 쐇; 쐇; 쐇; 쐇; ) HANGUL SYLLABLE SSWAS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC407 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC407 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11BA }};
        std::array<uint32_t, 1> const c4 = {{ 0xC407 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11BA }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_168)
{
    // C408;C408;110A 116A 11BB;C408;110A 116A 11BB; 
    // (쐈; 쐈; 쐈; 쐈; 쐈; ) HANGUL SYLLABLE SSWASS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC408 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC408 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11BB }};
        std::array<uint32_t, 1> const c4 = {{ 0xC408 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11BB }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_169)
{
    // C409;C409;110A 116A 11BC;C409;110A 116A 11BC; 
    // (쐉; 쐉; 쐉; 쐉; 쐉; ) HANGUL SYLLABLE SSWANG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC409 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC409 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11BC }};
        std::array<uint32_t, 1> const c4 = {{ 0xC409 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11BC }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_170)
{
    // C40A;C40A;110A 116A 11BD;C40A;110A 116A 11BD; 
    // (쐊; 쐊; 쐊; 쐊; 쐊; ) HANGUL SYLLABLE SSWAJ
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC40A }};
        std::array<uint32_t, 1> const c2 = {{ 0xC40A }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11BD }};
        std::array<uint32_t, 1> const c4 = {{ 0xC40A }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11BD }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_171)
{
    // C40B;C40B;110A 116A 11BE;C40B;110A 116A 11BE; 
    // (쐋; 쐋; 쐋; 쐋; 쐋; ) HANGUL SYLLABLE SSWAC
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC40B }};
        std::array<uint32_t, 1> const c2 = {{ 0xC40B }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11BE }};
        std::array<uint32_t, 1> const c4 = {{ 0xC40B }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11BE }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_172)
{
    // C40C;C40C;110A 116A 11BF;C40C;110A 116A 11BF; 
    // (쐌; 쐌; 쐌; 쐌; 쐌; ) HANGUL SYLLABLE SSWAK
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC40C }};
        std::array<uint32_t, 1> const c2 = {{ 0xC40C }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11BF }};
        std::array<uint32_t, 1> const c4 = {{ 0xC40C }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11BF }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_173)
{
    // C40D;C40D;110A 116A 11C0;C40D;110A 116A 11C0; 
    // (쐍; 쐍; 쐍; 쐍; 쐍; ) HANGUL SYLLABLE SSWAT
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC40D }};
        std::array<uint32_t, 1> const c2 = {{ 0xC40D }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11C0 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC40D }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11C0 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_174)
{
    // C40E;C40E;110A 116A 11C1;C40E;110A 116A 11C1; 
    // (쐎; 쐎; 쐎; 쐎; 쐎; ) HANGUL SYLLABLE SSWAP
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC40E }};
        std::array<uint32_t, 1> const c2 = {{ 0xC40E }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11C1 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC40E }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11C1 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_175)
{
    // C40F;C40F;110A 116A 11C2;C40F;110A 116A 11C2; 
    // (쐏; 쐏; 쐏; 쐏; 쐏; ) HANGUL SYLLABLE SSWAH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC40F }};
        std::array<uint32_t, 1> const c2 = {{ 0xC40F }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116A, 0x11C2 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC40F }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116A, 0x11C2 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_176)
{
    // C410;C410;110A 116B;C410;110A 116B; 
    // (쐐; 쐐; 쐐; 쐐; 쐐; ) HANGUL SYLLABLE SSWAE
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC410 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC410 }};
        std::array<uint32_t, 2> const c3 = {{ 0x110A, 0x116B }};
        std::array<uint32_t, 1> const c4 = {{ 0xC410 }};
        std::array<uint32_t, 2> const c5 = {{ 0x110A, 0x116B }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_177)
{
    // C411;C411;110A 116B 11A8;C411;110A 116B 11A8; 
    // (쐑; 쐑; 쐑; 쐑; 쐑; ) HANGUL SYLLABLE SSWAEG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC411 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC411 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11A8 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC411 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11A8 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_178)
{
    // C412;C412;110A 116B 11A9;C412;110A 116B 11A9; 
    // (쐒; 쐒; 쐒; 쐒; 쐒; ) HANGUL SYLLABLE SSWAEGG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC412 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC412 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11A9 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC412 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11A9 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_179)
{
    // C413;C413;110A 116B 11AA;C413;110A 116B 11AA; 
    // (쐓; 쐓; 쐓; 쐓; 쐓; ) HANGUL SYLLABLE SSWAEGS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC413 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC413 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11AA }};
        std::array<uint32_t, 1> const c4 = {{ 0xC413 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11AA }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_180)
{
    // C414;C414;110A 116B 11AB;C414;110A 116B 11AB; 
    // (쐔; 쐔; 쐔; 쐔; 쐔; ) HANGUL SYLLABLE SSWAEN
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC414 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC414 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11AB }};
        std::array<uint32_t, 1> const c4 = {{ 0xC414 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11AB }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_181)
{
    // C415;C415;110A 116B 11AC;C415;110A 116B 11AC; 
    // (쐕; 쐕; 쐕; 쐕; 쐕; ) HANGUL SYLLABLE SSWAENJ
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC415 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC415 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11AC }};
        std::array<uint32_t, 1> const c4 = {{ 0xC415 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11AC }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_182)
{
    // C416;C416;110A 116B 11AD;C416;110A 116B 11AD; 
    // (쐖; 쐖; 쐖; 쐖; 쐖; ) HANGUL SYLLABLE SSWAENH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC416 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC416 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11AD }};
        std::array<uint32_t, 1> const c4 = {{ 0xC416 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11AD }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_183)
{
    // C417;C417;110A 116B 11AE;C417;110A 116B 11AE; 
    // (쐗; 쐗; 쐗; 쐗; 쐗; ) HANGUL SYLLABLE SSWAED
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC417 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC417 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11AE }};
        std::array<uint32_t, 1> const c4 = {{ 0xC417 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11AE }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_184)
{
    // C418;C418;110A 116B 11AF;C418;110A 116B 11AF; 
    // (쐘; 쐘; 쐘; 쐘; 쐘; ) HANGUL SYLLABLE SSWAEL
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC418 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC418 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11AF }};
        std::array<uint32_t, 1> const c4 = {{ 0xC418 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11AF }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_185)
{
    // C419;C419;110A 116B 11B0;C419;110A 116B 11B0; 
    // (쐙; 쐙; 쐙; 쐙; 쐙; ) HANGUL SYLLABLE SSWAELG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC419 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC419 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11B0 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC419 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11B0 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_186)
{
    // C41A;C41A;110A 116B 11B1;C41A;110A 116B 11B1; 
    // (쐚; 쐚; 쐚; 쐚; 쐚; ) HANGUL SYLLABLE SSWAELM
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC41A }};
        std::array<uint32_t, 1> const c2 = {{ 0xC41A }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11B1 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC41A }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11B1 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_187)
{
    // C41B;C41B;110A 116B 11B2;C41B;110A 116B 11B2; 
    // (쐛; 쐛; 쐛; 쐛; 쐛; ) HANGUL SYLLABLE SSWAELB
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC41B }};
        std::array<uint32_t, 1> const c2 = {{ 0xC41B }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11B2 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC41B }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11B2 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_188)
{
    // C41C;C41C;110A 116B 11B3;C41C;110A 116B 11B3; 
    // (쐜; 쐜; 쐜; 쐜; 쐜; ) HANGUL SYLLABLE SSWAELS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC41C }};
        std::array<uint32_t, 1> const c2 = {{ 0xC41C }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11B3 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC41C }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11B3 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_189)
{
    // C41D;C41D;110A 116B 11B4;C41D;110A 116B 11B4; 
    // (쐝; 쐝; 쐝; 쐝; 쐝; ) HANGUL SYLLABLE SSWAELT
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC41D }};
        std::array<uint32_t, 1> const c2 = {{ 0xC41D }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11B4 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC41D }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11B4 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_190)
{
    // C41E;C41E;110A 116B 11B5;C41E;110A 116B 11B5; 
    // (쐞; 쐞; 쐞; 쐞; 쐞; ) HANGUL SYLLABLE SSWAELP
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC41E }};
        std::array<uint32_t, 1> const c2 = {{ 0xC41E }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11B5 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC41E }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11B5 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_191)
{
    // C41F;C41F;110A 116B 11B6;C41F;110A 116B 11B6; 
    // (쐟; 쐟; 쐟; 쐟; 쐟; ) HANGUL SYLLABLE SSWAELH
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC41F }};
        std::array<uint32_t, 1> const c2 = {{ 0xC41F }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11B6 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC41F }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11B6 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_192)
{
    // C420;C420;110A 116B 11B7;C420;110A 116B 11B7; 
    // (쐠; 쐠; 쐠; 쐠; 쐠; ) HANGUL SYLLABLE SSWAEM
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC420 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC420 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11B7 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC420 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11B7 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_193)
{
    // C421;C421;110A 116B 11B8;C421;110A 116B 11B8; 
    // (쐡; 쐡; 쐡; 쐡; 쐡; ) HANGUL SYLLABLE SSWAEB
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC421 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC421 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11B8 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC421 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11B8 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_194)
{
    // C422;C422;110A 116B 11B9;C422;110A 116B 11B9; 
    // (쐢; 쐢; 쐢; 쐢; 쐢; ) HANGUL SYLLABLE SSWAEBS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC422 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC422 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11B9 }};
        std::array<uint32_t, 1> const c4 = {{ 0xC422 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11B9 }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_195)
{
    // C423;C423;110A 116B 11BA;C423;110A 116B 11BA; 
    // (쐣; 쐣; 쐣; 쐣; 쐣; ) HANGUL SYLLABLE SSWAES
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC423 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC423 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11BA }};
        std::array<uint32_t, 1> const c4 = {{ 0xC423 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11BA }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_196)
{
    // C424;C424;110A 116B 11BB;C424;110A 116B 11BB; 
    // (쐤; 쐤; 쐤; 쐤; 쐤; ) HANGUL SYLLABLE SSWAESS
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC424 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC424 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11BB }};
        std::array<uint32_t, 1> const c4 = {{ 0xC424 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11BB }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_197)
{
    // C425;C425;110A 116B 11BC;C425;110A 116B 11BC; 
    // (쐥; 쐥; 쐥; 쐥; 쐥; ) HANGUL SYLLABLE SSWAENG
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC425 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC425 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11BC }};
        std::array<uint32_t, 1> const c4 = {{ 0xC425 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11BC }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_198)
{
    // C426;C426;110A 116B 11BD;C426;110A 116B 11BD; 
    // (쐦; 쐦; 쐦; 쐦; 쐦; ) HANGUL SYLLABLE SSWAEJ
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC426 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC426 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11BD }};
        std::array<uint32_t, 1> const c4 = {{ 0xC426 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11BD }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


TEST(normalization, nfc_042_199)
{
    // C427;C427;110A 116B 11BE;C427;110A 116B 11BE; 
    // (쐧; 쐧; 쐧; 쐧; 쐧; ) HANGUL SYLLABLE SSWAEC
    {
        std::array<uint32_t, 1> const c1 = {{ 0xC427 }};
        std::array<uint32_t, 1> const c2 = {{ 0xC427 }};
        std::array<uint32_t, 3> const c3 = {{ 0x110A, 0x116B, 0x11BE }};
        std::array<uint32_t, 1> const c4 = {{ 0xC427 }};
        std::array<uint32_t, 3> const c5 = {{ 0x110A, 0x116B, 0x11BE }};

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c2.begin(), c2.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c2.begin(), c2.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c3.begin(), c3.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c3.begin(), c3.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::c>(c4.begin(), c4.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kc>(c4.begin(), c4.end()));

        EXPECT_TRUE(boost::text::normalized<boost::text::nf::d>(c5.begin(), c5.end()));
        EXPECT_TRUE(boost::text::normalized<boost::text::nf::kd>(c5.begin(), c5.end()));



        {
            std::string str = boost::text::to_string(c1.begin(), c1.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c2.begin(), c2.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c3.begin(), c3.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c2.size());
            auto c2_it = c2.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c2_it) << "iteration " << i;
                ++c2_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c4.begin(), c4.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

        {
            std::string str = boost::text::to_string(c5.begin(), c5.end());
            boost::text::normalize<boost::text::nf::c>(str);
            auto const r = boost::text::as_utf32(str);
            EXPECT_EQ(std::distance(r.begin(), r.end()), (std::ptrdiff_t)c4.size());
            auto c4_it = c4.begin();
            int i = 0;
            for (auto x : r) {
                EXPECT_EQ(x, *c4_it) << "iteration " << i;
                ++c4_it;
                ++i;
            }
        }

    }
}


