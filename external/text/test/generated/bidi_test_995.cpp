// Copyright (C) 2020 T. Zachary Laine
//
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// Warning! This file is autogenerated.
#include <boost/text/bidirectional.hpp>

#include "bidi_tests.hpp"

#include <gtest/gtest.h>

#include <algorithm>


std::vector<int> expected_levels;
std::vector<int> expected_reordered_indices;

TEST(bidi, bidi_995_000)
{

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    expected_reordered_indices = { 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };

    {
        // R R R AL WS R AL AL R WS R R R AL R CS WS L L L L L L EN EN EN CS EN EN AN; 5 ('auto') (line 497504)
        std::vector<uint32_t> const cps = { 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x002C, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0030, 0x0030, 0x0030, 0x002C, 0x0030, 0x0030, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), -1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, -1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // R R R AL WS R AL AL R WS R R R AL R CS WS L L L L L L EN EN EN CS EN EN AN; 5 ('RTL') (line 497504)
        std::vector<uint32_t> const cps = { 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x002C, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0030, 0x0030, 0x0030, 0x002C, 0x0030, 0x0030, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    expected_reordered_indices = { 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 8, 7, 6, 5, 4, 3, 2, 1, 0 };

    {
        // R AL WS R AL R AL WS ON L L WS L L WS L WS L L L ON ON WS AL R AL WS R AL R; 5 ('auto') (line 497510)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0021, 0x0021, 0x0020, 0x0608, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), -1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, -1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // R AL WS R AL R AL WS ON L L WS L L WS L WS L L L ON ON WS AL R AL WS R AL R; 5 ('RTL') (line 497510)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0021, 0x0021, 0x0020, 0x0608, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    expected_levels = { 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1 };
    expected_reordered_indices = { 29, 28, 27, 26, 25, 24, 21, 22, 23, 20, 19, 16, 17, 18, 15, 14, 13, 12, 11, 10, 9, 8, 7, 0, 1, 2, 3, 4, 5, 6 };

    {
        // L L WS L L L L WS ON R R WS R R WS ON EN EN EN CS WS EN EN AN ON CS WS R R ON; 4 ('RTL') (line 497516)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0021, 0x0030, 0x0030, 0x0030, 0x002C, 0x0020, 0x0030, 0x0030, 0x0660, 0x0021, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // L L WS L L L L WS ON R R WS R R WS ON AN AN AN CS WS AN AN AN ON CS WS R R ON; 4 ('RTL') (line 497517)
        std::vector<uint32_t> const cps = { 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0041, 0x0020, 0x0021, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x0020, 0x0021, 0x0660, 0x0660, 0x0660, 0x002C, 0x0020, 0x0660, 0x0660, 0x0660, 0x0021, 0x002C, 0x0020, 0x05BE, 0x05BE, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    expected_reordered_indices = { 6, 5, 4, 3, 2, 1, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 30, 29, 28, 27, 26, 25, 24 };

    {
        // R AL WS R AL R AL WS ON L L WS L L WS L WS L L L ON L ON WS AL R AL WS R AL R; 2 ('LTR') (line 497523)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0021, 0x0041, 0x0021, 0x0020, 0x0608, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 0);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 0)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2 };
    expected_reordered_indices = { 28, 29, 30, 27, 23, 24, 25, 26, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };

    {
        // AL WS R AL R R WS AL R R WS R AL AL R WS R R R AL R CS WS EN EN EN ET CS EN EN AN; 7 ('auto') (line 497529)
        std::vector<uint32_t> const cps = { 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x002C, 0x0020, 0x0030, 0x0030, 0x0030, 0x0023, 0x002C, 0x0030, 0x0030, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), -1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, -1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // AL WS R AL R R WS AL R R WS R AL AL R WS R R R AL R CS WS EN EN EN ET CS EN EN AN; 7 ('LTR') (line 497529)
        std::vector<uint32_t> const cps = { 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x002C, 0x0020, 0x0030, 0x0030, 0x0030, 0x0023, 0x002C, 0x0030, 0x0030, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 0);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 0)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // AL WS R AL R R WS AL R R WS R AL AL R WS R R R AL R CS WS EN EN EN ET CS EN EN AN; 7 ('RTL') (line 497529)
        std::vector<uint32_t> const cps = { 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x002C, 0x0020, 0x0030, 0x0030, 0x0030, 0x0023, 0x002C, 0x0030, 0x0030, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    expected_reordered_indices = { 30, 29, 28, 27, 26, 25, 24, 23, 22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 8, 7, 6, 5, 4, 3, 2, 1, 0 };

    {
        // R AL WS R AL R AL WS ON L L WS L L WS L WS L L L ON L ON WS AL R AL WS R AL R; 5 ('auto') (line 497535)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0021, 0x0041, 0x0021, 0x0020, 0x0608, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), -1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, -1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // R AL WS R AL R AL WS ON L L WS L L WS L WS L L L ON L ON WS AL R AL WS R AL R; 5 ('RTL') (line 497535)
        std::vector<uint32_t> const cps = { 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE, 0x0608, 0x0020, 0x0021, 0x0041, 0x0041, 0x0020, 0x0041, 0x0041, 0x0020, 0x0041, 0x0020, 0x0041, 0x0041, 0x0041, 0x0021, 0x0041, 0x0021, 0x0020, 0x0608, 0x05BE, 0x0608, 0x0020, 0x05BE, 0x0608, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    expected_levels = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2 };
    expected_reordered_indices = { 25, 26, 27, 28, 29, 30, 31, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };

    {
        // AL R R R R AL R WS AL R R WS R AL AL R WS R R R AL R CS WS AL EN EN EN CS EN EN AN; 7 ('auto') (line 497541)
        std::vector<uint32_t> const cps = { 0x0608, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x002C, 0x0020, 0x0608, 0x0030, 0x0030, 0x0030, 0x002C, 0x0030, 0x0030, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), -1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, -1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // AL R R R R AL R WS AL R R WS R AL AL R WS R R R AL R CS WS AL EN EN EN CS EN EN AN; 7 ('LTR') (line 497541)
        std::vector<uint32_t> const cps = { 0x0608, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x002C, 0x0020, 0x0608, 0x0030, 0x0030, 0x0030, 0x002C, 0x0030, 0x0030, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 0);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 0)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // AL R R R R AL R WS AL R R WS R AL AL R WS R R R AL R CS WS AL EN EN EN CS EN EN AN; 7 ('RTL') (line 497541)
        std::vector<uint32_t> const cps = { 0x0608, 0x05BE, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x0020, 0x0608, 0x05BE, 0x05BE, 0x0020, 0x05BE, 0x0608, 0x0608, 0x05BE, 0x0020, 0x05BE, 0x05BE, 0x05BE, 0x0608, 0x05BE, 0x002C, 0x0020, 0x0608, 0x0030, 0x0030, 0x0030, 0x002C, 0x0030, 0x0030, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    expected_levels = { 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124, 124, 124 };
    expected_reordered_indices = { 0, 1, 66, 67, 68 };

    {
        // L WS LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO RLO L L L; 3 ('auto') (line 497547)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202E, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), -1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, -1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // L WS LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO RLO L L L; 3 ('LTR') (line 497547)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202E, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 0);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 0)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    expected_levels = { 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124, 124, 124 };
    expected_reordered_indices = { 0, 1, 66, 67, 68 };

    {
        // L WS LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO RLO L L L; 4 ('RTL') (line 497553)
        std::vector<uint32_t> const cps = { 0x0041, 0x0020, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202D, 0x202E, 0x0041, 0x0041, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }
}

TEST(bidi, bidi_995_001)
{

    expected_levels = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124, -1, 125, -1, 125, -1, -1, -1, -1, 125, -1, 125, -1, 124 };
    expected_reordered_indices = { 62, 73, 71, 66, 64, 75 };

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRE RLI LRE RLE LRO RLO PDI PDF L PDF ON; 7 ('auto') (line 497559)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x202A, 0x2067, 0x202A, 0x202B, 0x202D, 0x202E, 0x2069, 0x202C, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), -1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, -1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRE RLI LRE RLE LRO RLO PDI PDF L PDF ON; 7 ('LTR') (line 497559)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x202A, 0x2067, 0x202A, 0x202B, 0x202D, 0x202E, 0x2069, 0x202C, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 0);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 0)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRE RLI LRE RLE LRO RLO PDI PDF L PDF ON; 7 ('RTL') (line 497559)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x202A, 0x2067, 0x202A, 0x202B, 0x202D, 0x202E, 0x2069, 0x202C, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    expected_levels = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 122, -1, 123, -1, -1, -1, -1, 125, 123, 123, 123, 123, -1, 122 };
    expected_reordered_indices = { 61, 72, 71, 70, 69, 68, 63, 74 };

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO LRI RLE LRE RLO LRO ON PDI L PDI L PDF ON; 7 ('auto') (line 497565)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x2066, 0x202B, 0x202A, 0x202E, 0x202D, 0x0021, 0x2069, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), -1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, -1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO LRI RLE LRE RLO LRO ON PDI L PDI L PDF ON; 7 ('LTR') (line 497565)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x2066, 0x202B, 0x202A, 0x202E, 0x202D, 0x0021, 0x2069, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 0);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 0)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO LRI RLE LRE RLO LRO ON PDI L PDI L PDF ON; 7 ('RTL') (line 497565)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x2066, 0x202B, 0x202A, 0x202E, 0x202D, 0x0021, 0x2069, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    expected_levels = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 123, -1, 124, 124, 124, -1, -1, -1, -1, 124, 124, 124, -1, 123 };
    expected_reordered_indices = { 75, 64, 65, 66, 71, 72, 73, 62 };

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R LRI R LRE RLE LRO RLO R PDI R PDF ON; 7 ('auto') (line 497571)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2066, 0x05BE, 0x202A, 0x202B, 0x202D, 0x202E, 0x05BE, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), -1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, -1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R LRI R LRE RLE LRO RLO R PDI R PDF ON; 7 ('LTR') (line 497571)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2066, 0x05BE, 0x202A, 0x202B, 0x202D, 0x202E, 0x05BE, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 0);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 0)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R LRI R LRE RLE LRO RLO R PDI R PDF ON; 7 ('RTL') (line 497571)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2066, 0x05BE, 0x202A, 0x202B, 0x202D, 0x202E, 0x05BE, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    expected_levels = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 123, -1, 124, 124, 125, -1, -1, -1, -1, 125, 124, 124, -1, 123 };
    expected_reordered_indices = { 75, 64, 65, 71, 66, 72, 73, 62 };

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R RLI ON LRO RLE RLO LRE ON PDI R PDF ON; 7 ('auto') (line 497577)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2067, 0x0021, 0x202D, 0x202B, 0x202E, 0x202A, 0x0021, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), -1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, -1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R RLI ON LRO RLE RLO LRE ON PDI R PDF ON; 7 ('LTR') (line 497577)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2067, 0x0021, 0x202D, 0x202B, 0x202E, 0x202A, 0x0021, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 0);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 0)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R RLI ON LRO RLE RLO LRE ON PDI R PDF ON; 7 ('RTL') (line 497577)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202B, 0x0021, 0x202D, 0x05BE, 0x2067, 0x0021, 0x202D, 0x202B, 0x202E, 0x202A, 0x0021, 0x2069, 0x05BE, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    expected_levels = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124, -1, 125, 125, 125, -1, -1, -1, -1, 125, 125, 125, -1, 124 };
    expected_reordered_indices = { 62, 73, 72, 71, 66, 65, 64, 75 };

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRI L RLE LRE RLO LRO L PDI L PDF ON; 7 ('auto') (line 497583)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x2066, 0x0041, 0x202B, 0x202A, 0x202E, 0x202D, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), -1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, -1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRI L RLE LRE RLO LRO L PDI L PDF ON; 7 ('LTR') (line 497583)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x2066, 0x0041, 0x202B, 0x202A, 0x202E, 0x202D, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 0);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 0)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

    {
        // LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRI L RLE LRE RLO LRO L PDI L PDF ON; 7 ('RTL') (line 497583)
        std::vector<uint32_t> const cps = { 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x202A, 0x0021, 0x202E, 0x0041, 0x2066, 0x0041, 0x202B, 0x202A, 0x202E, 0x202D, 0x0041, 0x2069, 0x0041, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(cps.begin(), cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);

        std::vector<int> const reordered =
            bidi_reordered_indices(cps.begin(), cps.end(), 1);
        i = 0;
        for (int idx : expected_reordered_indices) {
            // Skip FSI, LRI, RLI, and PDI.
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }

        std::vector<int> reordered_2;
        for (auto subrange :
            boost::text::bidirectional_subranges(cps, 1)) {
            for (auto cp : subrange) {
                reordered_2.push_back(cp);
            }
        }
        i = 0;
        for (int idx : expected_reordered_indices) {
            if (cps[idx] < 0x2066 || 0x2069 < cps[idx]) {
                EXPECT_EQ(reordered_2[i], (int)cps[idx])
                    << std::hex
                    << " 0x" << reordered_2[i]
                    << " 0x" << cps[idx]
                    << std::dec << " i=" << i;
            }
            ++i;
        }
        EXPECT_EQ(i, (int)reordered_2.size());
    }

}
