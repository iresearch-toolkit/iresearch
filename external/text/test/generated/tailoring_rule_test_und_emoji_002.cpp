// Copyright (C) 2020 T. Zachary Laine
//
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// Warning! This file is autogenerated.
#include <boost/text/collation_table.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/data/all.hpp>

#ifndef LIMIT_TESTING_FOR_CI
#include <boost/text/save_load_table.hpp>

#include <boost/filesystem.hpp>
#endif

#include <gtest/gtest.h>

using namespace boost::text;

auto const error = [](std::string const & s) { std::cout << s; };
auto const warning = [](std::string const & s) {};

collation_table make_save_load_table()
{
#ifdef LIMIT_TESTING_FOR_CI
    std::string const table_str(data::und::emoji_collation_tailoring());
    return tailored_collation_table(
        table_str,
        "und::emoji_collation_tailoring()", error, warning);
#else
    if (!exists(boost::filesystem::path("und_emoji.table"))) {
        std::string const table_str(data::und::emoji_collation_tailoring());
        collation_table table = tailored_collation_table(
            table_str,
            "und::emoji_collation_tailoring()", error, warning);
        save_table(table, "und_emoji.table.2");
        boost::filesystem::rename("und_emoji.table.2", "und_emoji.table");
    }
    return load_table("und_emoji.table");
#endif
}
collation_table const & table()
{
    static collation_table retval = make_save_load_table();
    return retval;
}
TEST(tailoring, und_emoji_001_000)
{
}

TEST(tailoring, und_emoji_002_001)
{
}

TEST(tailoring, und_emoji_002_002)
{
}
