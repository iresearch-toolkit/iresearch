// Copyright (C) 2020 T. Zachary Laine
//
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
// Warning! This file is autogenerated.
#include <boost/text/collation_table.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/data/all.hpp>

#include <gtest/gtest.h>


using namespace boost;

auto const error = [](std::string const & s) { std::cout << s; };
auto const warning = [](std::string const & s) {};

TEST(tailoring, az_search_suppressions_0)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xe40, 0xe06 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72100000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe20 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72440000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe1a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72380000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe1f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72420000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe1e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72400000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe28 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72540000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe12 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72280000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe2c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x725C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe16 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72300000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe0b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x721A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe0f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72220000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe24 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x724C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe03 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x720A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe1b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x723A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe29 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72560000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe13 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x722A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe08 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72140000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe2d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x725E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe0c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x721C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe21 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72460000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe25 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x724E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe04 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x720C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe17 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72320000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe18 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72340000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe1c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x723C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe10 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72240000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe2a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72580000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe14 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x722C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe07 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72120000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe09 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72160000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_1)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xe40, 0xe2e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72600000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe0d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x721E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe22 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72480000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe01 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72060000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe26 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72500000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe05 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x720E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe19 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72360000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe1d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x723E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe11 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72260000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe2b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x725A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe15 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x722E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe0a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72180000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe0e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72200000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe23 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x724A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe02 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72080000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe40, 0xe27 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727A0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72520000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe2c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x725C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe0d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x721E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe01 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72060000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe24 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x724C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe05 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x720E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe1d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x723E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe2b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x725A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe11 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72260000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe20 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72440000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe29 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72560000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe15 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x722E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe0c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x721C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe27 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72520000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe04 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x720C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_2)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xe41, 0xe18 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72340000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe1c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x723C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe2a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72580000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe10 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72240000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe0b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x721A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe2e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72600000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe1e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72400000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe14 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x722C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe0f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72220000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe22 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72480000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe08 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72140000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe03 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x720A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe26 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72500000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe23 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x724A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe07 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72120000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe1b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x723A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe1f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72420000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe13 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x722A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe17 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72320000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe0a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72180000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe2d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x725E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe0e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72200000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe21 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72460000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe02 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72080000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe25 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x724E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe19 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72360000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe06 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72100000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe1a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72380000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe12 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72280000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe28 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72540000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_3)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xe41, 0xe16 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72300000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe41, 0xe09 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72160000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe1b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x723A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe17 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72320000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe2d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x725E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe13 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x722A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe0c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x721C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe29 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72560000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe08 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72140000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe25 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x724E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe04 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x720C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe21 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72460000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe1c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x723C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe2e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72600000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe14 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x722C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe2a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72580000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe10 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72240000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe0d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x721E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe26 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72500000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe09 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72160000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe22 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72480000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe05 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x720E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe20 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72440000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe01 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72060000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe1d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x723E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe19 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72360000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe15 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x722E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe0e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72200000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe2b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x725A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe18 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72340000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_4)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xe42, 0xe11 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72260000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe0a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72180000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe27 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72520000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe06 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72100000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe23 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x724A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe02 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72080000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe1e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72400000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe1a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72380000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe16 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72300000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe2c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x725C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe12 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72280000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe0f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72220000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe28 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72540000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe0b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x721A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe24 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x724C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe07 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72120000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe03 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x720A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe42, 0xe1f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x727E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x72420000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe05 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x720E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe1c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x723C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe23 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x724A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe27 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72520000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe04 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x720C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe2b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x725A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe08 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72140000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe0c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x721C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe13 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x722A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe17 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72320000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe1b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x723A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe1f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72420000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_5)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xe43, 0xe22 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72480000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe03 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x720A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe26 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72500000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe07 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72120000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe2a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72580000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe0b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x721A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe2e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72600000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe0f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72220000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe12 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72280000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe16 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72300000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe10 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72240000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe29 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72560000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe1a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72380000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe21 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72460000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe1e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72400000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe25 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x724E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe02 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72080000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe06 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72100000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe20 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72440000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe2d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x725E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe0a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72180000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe11 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72260000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe0e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72200000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe15 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x722E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe19 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72360000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe1d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x723E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe01 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72060000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe24 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x724C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe28 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72540000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe09 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72160000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_6)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xe43, 0xe2c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x725C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe0d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x721E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe14 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x722C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe43, 0xe18 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72800000, 0x0500, 0x0500},
            text::detail::collation_element{0x72340000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe15 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x722E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe1d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x723E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe18 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72340000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe19 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72360000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe26 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72500000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe17 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72320000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe05 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x720E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe22 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72480000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe01 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72060000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe2e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72600000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe0d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x721E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe2a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72580000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe09 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72160000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe16 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72300000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe12 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72280000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe1e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72400000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe1a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72380000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe27 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72520000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe06 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72100000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe23 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x724A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe02 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72080000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe0e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72200000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe2b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x725A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe11 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72260000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe0a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72180000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe13 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x722A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_7)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xe44, 0xe1f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72420000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe24 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x724C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe1b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x723A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe20 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72440000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe07 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72120000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe2c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x725C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe03 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x720A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe28 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72540000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe0f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72220000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe14 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x722C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe0b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x721A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe10 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72240000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe29 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72560000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe1c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x723C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe25 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x724E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe04 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x720C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe21 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72460000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe2d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x725E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe0c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x721C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xe44, 0xe08 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x72820000, 0x0500, 0x0500},
            text::detail::collation_element{0x72140000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe9b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73260000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe9f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x732E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xea2 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73320000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe88 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73100000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xedd };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x733A0000, 0x0500, 0x2000},
            text::detail::collation_element{0x73300000, 0x0500, 0x2000}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe97 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73200000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xea1 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73300000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xea5 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73360000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe84 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x730C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe94 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x731A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_8)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xec0, 0xeae };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x733E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xede };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73060000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe8d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73180000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe81 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73080000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe99 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73220000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe9d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x732A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xead };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x733C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xeab };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x733A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe95 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x731C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe8a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73140000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe9c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73280000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xedf };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73160000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xea3 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73340000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe82 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x730A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xea7 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73380000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe9a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73240000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe9e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x732C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xedc };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x733A0000, 0x0500, 0x2000},
            text::detail::collation_element{0x73220000, 0x0500, 0x2000}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe96 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x731E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xeaa };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73120000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec0, 0xe87 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735C0000, 0x0500, 0x0500},
            text::detail::collation_element{0x730E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xede };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73060000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xe84 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x730C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xe9c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73280000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xeaa };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73120000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xeae };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x733E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xea2 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73320000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xe94 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x731A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xe87 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x730E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xedd };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x733A0000, 0x0500, 0x2000},
            text::detail::collation_element{0x73300000, 0x0500, 0x2000}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_9)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xec1, 0xe9b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73260000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xedc };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x733A0000, 0x0500, 0x2000},
            text::detail::collation_element{0x73220000, 0x0500, 0x2000}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xe9f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x732E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xe97 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73200000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xe8a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73140000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xead };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x733C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xea1 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73300000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xe82 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x730A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xea5 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73360000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xe9a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73240000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xe9e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x732C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xe96 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x731E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xe8d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73180000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xe81 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73080000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xedf };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73160000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xe99 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73220000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xe9d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x732A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xeab };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x733A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xe95 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x731C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xe88 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73100000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xea3 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73340000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec1, 0xea7 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x735E0000, 0x0500, 0x0500},
            text::detail::collation_element{0x73380000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xea7 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x73380000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xea3 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x73340000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xe82 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x730A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xe9e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x732C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xe9a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x73240000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xe96 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x731E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xedc };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x733A0000, 0x0500, 0x2000},
            text::detail::collation_element{0x73220000, 0x0500, 0x2000}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xe87 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x730E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_10)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xec2, 0xe9f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x732E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xe9b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x73260000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xe97 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x73200000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xead };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x733C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xedd };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x733A0000, 0x0500, 0x2000},
            text::detail::collation_element{0x73300000, 0x0500, 0x2000}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xe88 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x73100000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xea5 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x73360000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xe84 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x730C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xea1 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x73300000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xe9c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x73280000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xeae };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x733E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xede };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x73060000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xe94 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x731A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xeaa };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x73120000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xe8d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x73180000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xea2 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x73320000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xe81 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x73080000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xe9d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x732A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xe99 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x73220000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xedf };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x73160000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xe95 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x731C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xeab };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x733A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec2, 0xe8a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73600000, 0x0500, 0x0500},
            text::detail::collation_element{0x73140000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xead };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x733C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xe8a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x73140000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xe95 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x731C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xedf };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x73160000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xe99 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x73220000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xe9d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x732A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xe81 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x73080000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_11)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xec3, 0xe8d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x73180000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xe94 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x731A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xede };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x73060000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xe9c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x73280000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xea3 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x73340000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xea7 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x73380000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xe84 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x730C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xeab };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x733A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xe88 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x73100000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xedd };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x733A0000, 0x0500, 0x2000},
            text::detail::collation_element{0x73300000, 0x0500, 0x2000}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xe97 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x73200000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xe9b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x73260000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xe9f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x732E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xea2 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x73320000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xe87 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x730E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xeaa };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x73120000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xeae };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x733E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xedc };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x733A0000, 0x0500, 0x2000},
            text::detail::collation_element{0x73220000, 0x0500, 0x2000}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xe96 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x731E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xe9a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x73240000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xea1 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x73300000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xe9e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x732C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xea5 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x73360000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec3, 0xe82 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73620000, 0x0500, 0x0500},
            text::detail::collation_element{0x730A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe8a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x73140000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe97 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x73200000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe87 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x730E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe95 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x731C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe9f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x732E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe9b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x73260000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_12)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xec4, 0xedd };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x733A0000, 0x0500, 0x2000},
            text::detail::collation_element{0x73300000, 0x0500, 0x2000}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xea5 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x73360000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe9c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x73280000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe84 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x730C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xea1 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x73300000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xede };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x73060000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xead };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x733C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe88 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x73100000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe94 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x731A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe9d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x732A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe99 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x73220000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xea2 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x73320000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xedf };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x73160000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe81 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x73080000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xeae };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x733E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe8d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x73180000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xeaa };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x73120000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe96 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x731E0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe9e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x732C0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe9a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x73240000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xea7 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x73380000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xedc };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x733A0000, 0x0500, 0x2000},
            text::detail::collation_element{0x73220000, 0x0500, 0x2000}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xea3 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x73340000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xe82 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x730A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xec4, 0xeab };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73640000, 0x0500, 0x0500},
            text::detail::collation_element{0x733A0000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa93 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73668E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa9f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366E200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaaa5 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73670E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa9c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366CD00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa9b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366C600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_13)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xaab5, 0xaa86 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73663300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaaa1 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366F000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa82 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73661700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaaad };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73674600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaaa2 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366F700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa8e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73666B00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaaa9 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73672A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa8a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73664F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa96 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366A300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa92 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73668700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa9e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366DB00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaaa4 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73670700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa9a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366BF00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa85 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73662C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaaa0 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366E900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa81 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73661000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaaac };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73673F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa8d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73666400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaaa8 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73672300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa89 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73664800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa95 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73669C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa91 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73668000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaaa7 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73671C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa9d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366D400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaaa3 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366FE00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa99 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366B800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa84 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73662500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaaaf };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73675400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa80 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73660900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaaab };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73673800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_14)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xaab5, 0xaa8c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73665D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa88 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73664100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa94 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73669500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa90 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73667900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaaa6 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73671500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa87 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73663A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa98 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366B100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa83 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73661E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaaae };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73674D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa8f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73667200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaaaa };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73673100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa8b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x73665600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab5, 0xaa97 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73677E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366AA00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa84 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73662500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa98 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x7366B100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa90 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73667900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaaae };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73674D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa8f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73667200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa94 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73669500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa89 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73664800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaaa2 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x7366F700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa8d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73666400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaaa6 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73671500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa81 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73661000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa85 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73662C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa99 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x7366B800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa9d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x7366D400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaaab };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73673800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa91 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73668000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa8a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73664F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_15)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xaab6, 0xaaaf };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73675400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa95 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73669C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaaa3 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x7366FE00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa82 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73661700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaaa7 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73671C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa86 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73663300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa9a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x7366BF00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa9c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x7366CD00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa9e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x7366DB00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa8e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73666B00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa92 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73668700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaaa8 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73672300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaaaa };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73673100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa96 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x7366A300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa8b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73665600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaaac };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73673F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaaa0 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x7366E900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa83 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73661E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaaa4 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73670700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa87 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73663A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa9b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x7366C600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa9f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x7366E200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa93 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73668E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaaa9 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73672A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa97 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x7366AA00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa88 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73664100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaaad };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73674600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa8c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73665D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaaa1 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x7366F000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab6, 0xaa80 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73660900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_16)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xaab6, 0xaaa5 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73678500, 0x0500, 0x0500},
            text::detail::collation_element{0x73670E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa9c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366CD00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaaa0 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366E900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa8b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73665600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaaa4 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73670700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa8f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73667200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa87 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73663A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaaa8 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73672300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa93 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73668E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaaac };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73673F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa9b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366C600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa9f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366E200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa82 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73661700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaaa3 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366FE00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa86 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73663300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa8a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73664F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaaab };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73673800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa8e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73666B00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaaaf };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73675400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa92 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73668700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa96 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366A300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa9a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366BF00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa9e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366DB00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa81 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73661000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaaa2 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366F700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa85 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73662C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaaa6 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73671500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa89 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73664800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaaaa };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73673100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa8d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73666400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_17)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xaab9, 0xaaae };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73674D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa91 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73668000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa95 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73669C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa99 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366B800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa9d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366D400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa80 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73660900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaaa1 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366F000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa84 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73662500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaaa5 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73670E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa88 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73664100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaaa7 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73671C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaaa9 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73672A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa8c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73665D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaaad };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73674600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa90 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73667900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa94 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73669500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa97 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366AA00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa98 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366B100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaab9, 0xaa83 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x73679A00, 0x0500, 0x0500},
            text::detail::collation_element{0x73661E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaaac };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73673F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa83 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73661E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa87 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73663A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa88 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73664100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaaa4 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73670700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa9b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x7366C600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa9f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x7366E200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa93 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73668E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa97 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x7366AA00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa8a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73664F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaaab };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73673800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_18)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xaabb, 0xaaa0 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x7366E900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa8e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73666B00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaaaf };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73675400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa82 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73661700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaaa3 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x7366FE00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa86 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73663300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaaa7 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73671C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa9a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x7366BF00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa9e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x7366DB00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa92 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73668700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa89 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73664800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa8d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73666400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaaaa };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73673100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa81 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73661000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaaae };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73674D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa85 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73662C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaaa2 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x7366F700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa99 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x7366B800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaaa6 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73671500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa9d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x7366D400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa95 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73669C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaaa1 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x7366F000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaaa9 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73672A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa8c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73665D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaaad };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73674600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa80 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73660900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa84 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73662500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa91 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73668000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaaa5 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73670E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa9c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x7366CD00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_19)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xaabb, 0xaa96 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x7366A300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa90 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73667900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa94 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73669500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa98 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x7366B100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa8b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73665600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaaa8 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73672300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabb, 0xaa8f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367A800, 0x0500, 0x0500},
            text::detail::collation_element{0x73667200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa97 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366AA00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa8c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73665D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa93 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73668E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa88 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73664100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaaaf };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73675400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa84 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73662500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaaab };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73673800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa80 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73660900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaaa7 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73671C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa9c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366CD00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaaa3 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366FE00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa98 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366B100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa94 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73669500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa90 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73667900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa8d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73666400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaaac };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73673F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa89 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73664800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaaa8 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73672300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa85 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73662C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaaa4 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73670700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa8a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73664F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa81 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73661000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaaa0 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366E900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_20)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0xaabc, 0xaa9d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366D400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa99 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366B800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa95 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73669C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa91 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73668000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa8e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73666B00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaaad };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73674600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaaa9 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73672A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa86 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73663300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaaa5 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73670E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa82 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73661700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaaa1 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366F000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa9e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366DB00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa9a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366BF00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa8f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73667200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa96 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366A300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa92 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73668700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa8b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73665600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaaaa };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73673100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa87 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73663A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaaae };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73674D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaaa6 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73671500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa83 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x73661E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaaa2 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366F700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa9f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366E200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0xaabc, 0xaa9b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x7367AF00, 0x0500, 0x0500},
            text::detail::collation_element{0x7366C600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1992 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76058700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x19a4 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76093300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x199a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7605BF00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1985 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76052C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x19a0 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76091700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_21)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0x19b5, 0x1981 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76051000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1996 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7605A300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x198d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76056400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x19a8 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76094F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1989 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76054800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1995 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76059C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1991 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76058000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x19a7 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76094800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x199d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76090200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x19a3 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76092C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1999 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7605B800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1984 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76052500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1980 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76050900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x19ab };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76096400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x198c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76055D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1990 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76057900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1988 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76054100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1994 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76059500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x19a6 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76094100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x199e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76090900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x199c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76070000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1987 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76053A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x19a2 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76092500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1998 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7605B100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1983 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76051E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x198f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76057200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x19aa };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76095D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x198b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76055600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x198e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76056B00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1997 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7605AA00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_22)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0x19b5, 0x1993 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76058E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x199f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76091000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x19a5 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76093A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x199b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x7605C600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1986 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76053300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x19a1 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76091E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x1982 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76051700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x19a9 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76095600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b5, 0x198a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x76098E00, 0x0500, 0x0500},
            text::detail::collation_element{0x76054F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x19a7 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76094800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x19a1 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76091E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x199a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x7605BF00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1982 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76051700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x199e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76090900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x19a8 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76094F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1996 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x7605A300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x198b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76055600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x198f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76057200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x19a0 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76091700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1983 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76051E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x19a4 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76093300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1986 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76053300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1987 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76053A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x199b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x7605C600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x199f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76091000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1993 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76058E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x19a9 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76095600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1997 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x7605AA00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1988 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76054100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x19ab };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76096400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_23)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0x19b6, 0x198c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76055D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1980 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76050900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x19a5 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76093A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1984 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76052500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1998 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x7605B100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x199c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76070000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x19aa };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76095D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1990 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76057900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1994 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76059500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1989 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76054800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x19a2 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76092500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1981 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76051000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x198d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76056400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x19a6 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76094100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1985 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76052C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1999 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x7605B800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x199d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76090200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1991 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76058000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x198a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76054F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1992 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76058700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x1995 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76059C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x198e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76056B00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b6, 0x19a3 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760B0000, 0x0500, 0x0500},
            text::detail::collation_element{0x76092C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1984 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76052500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x19a3 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76092C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1980 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76050900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x199c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76070000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1998 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x7605B100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1994 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76059500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1990 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76057900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_24)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0x19b7, 0x198f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76057200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x19aa };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76095D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x198b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76055600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x19a6 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76094100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1987 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76053A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x19a2 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76092500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x199f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76091000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x199b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x7605C600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1997 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x7605AA00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x19a9 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76095600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1993 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76058E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x198e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76056B00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x19a5 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76093A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x198a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76054F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x19a1 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76091E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1986 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76053300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1982 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76051700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x199e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76090900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1996 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x7605A300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x198d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76056400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x19a8 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76094F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1992 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76058700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1989 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76054800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x19a4 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76093300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1985 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76052C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x19a0 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76091700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x199a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x7605BF00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1981 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76051000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x199d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76090200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1999 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x7605B800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_25)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0x19b7, 0x1995 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76059C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1991 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76058000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1983 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76051E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x198c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76055D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x19ab };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76096400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x1988 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76054100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19b7, 0x19a7 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D0200, 0x0500, 0x0500},
            text::detail::collation_element{0x76094800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1999 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x7605B800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1982 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76051700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x19a5 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76093A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x198e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76056B00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x19a1 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76091E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x198a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76054F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1996 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x7605A300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x19a9 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76095600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1992 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76058700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x199e };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76090900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x199a };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x7605BF00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1987 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76053A00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x19a6 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76094100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1983 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76051E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x19a2 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76092500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x198f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76057200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x198b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76055600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x19aa };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76095D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1997 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x7605AA00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1993 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76058E00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x199f };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76091000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x199b };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x7605C600, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1984 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76052500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, az_search_suppressions_26)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::search_collation_tailoring(),
            "az::search_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0x19ba, 0x19a7 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76094800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1980 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76050900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x19a3 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76092C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x198c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76055D00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1988 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76054100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1991 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76058000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x19ab };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76096400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1994 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76059500, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1990 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76057900, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x199c };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76070000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1998 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x7605B100, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1985 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76052C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1981 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76051000, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x19a4 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76093300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x198d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76056400, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1989 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76054800, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x19a8 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76094F00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1995 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76059C00, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x19a0 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76091700, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x199d };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76090200, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x19ba, 0x1986 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x760D1700, 0x0500, 0x0500},
            text::detail::collation_element{0x76053300, 0x0500, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

TEST(tailoring, bs_Cyrl_standard_suppressions_0)
{
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::bs_Cyrl::standard_collation_tailoring(),
            "bs_Cyrl::standard_collation_tailoring()",
            error, warning);

    {
        uint32_t cps[2] = { 0x418, 0x306 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x61460000, 0x0500, 0xAE00},
            text::detail::collation_element{0x00000000, 0x8C00, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
    {
        uint32_t cps[2] = { 0x438, 0x306 };
        container::small_vector<text::detail::collation_element, 1024> ces = {
            text::detail::collation_element{0x61460000, 0x0500, 0x0500},
            text::detail::collation_element{0x00000000, 0x8C00, 0x0500}
        };
        container::small_vector<text::detail::collation_element, 1024> result(2 * 10);
        auto result_end = table.copy_collation_elements(cps, cps + 2, result.begin());
        result.resize(result_end - result.begin());
        // Ignore lead byte reorderings.  We just care if the contractions
        // happen.
        for (auto & ce : ces) {
            ce.l1_ &= 0x00ffffff;
            ce.l3_ &= text::detail::disable_case_level_mask;
        }
        for (auto & ce : result) { ce.l1_ &= 0x00ffffff; }
        EXPECT_EQ(result, ces);
    }
}

