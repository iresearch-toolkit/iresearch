// Copyright (C) 2020 T. Zachary Laine
//
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
// Warning! This file is autogenerated.
#include <boost/text/collation_table.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/data/all.hpp>

#include <gtest/gtest.h>


using namespace boost;

auto const error = [](std::string const & s) { std::cout << s; };
auto const warning = [](std::string const & s) {};

TEST(tailoring, am_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::am::standard_collation_tailoring(),
            "am::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " am::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, ar_compat_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Arab */ 0x621, 0x77a, 0x77b, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::ar::compat_collation_tailoring(),
            "ar::compat_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " ar::compat_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, ar_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Arab */ 0x621, 0x77a, 0x77b, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::ar::standard_collation_tailoring(),
            "ar::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " ar::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, as_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::as::standard_collation_tailoring(),
            "as::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " as::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, az_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::az::standard_collation_tailoring(),
            "az::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " az::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, be_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::be::standard_collation_tailoring(),
            "be::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " be::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, bg_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::bg::standard_collation_tailoring(),
            "bg::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " bg::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, bn_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::bn::standard_collation_tailoring(),
            "bn::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " bn::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, bn_traditional_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::bn::traditional_collation_tailoring(),
            "bn::traditional_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " bn::traditional_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, bs_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::bs::standard_collation_tailoring(),
            "bs::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " bs::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, bs_Cyrl_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::bs_Cyrl::standard_collation_tailoring(),
            "bs_Cyrl::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " bs_Cyrl::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, chr_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::chr::standard_collation_tailoring(),
            "chr::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " chr::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, el_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::el::standard_collation_tailoring(),
            "el::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " el::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, fa_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Arab */ 0x621, 0x77a, 0x77b, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::fa::standard_collation_tailoring(),
            "fa::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " fa::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, fa_AF_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Arab */ 0x621, 0x77a, 0x77b, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::fa_AF::standard_collation_tailoring(),
            "fa_AF::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " fa_AF::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, gu_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::gu::standard_collation_tailoring(),
            "gu::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " gu::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, he_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::he::standard_collation_tailoring(),
            "he::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " he::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, hi_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::hi::standard_collation_tailoring(),
            "hi::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " hi::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, hr_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::hr::standard_collation_tailoring(),
            "hr::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " hr::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, hy_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::hy::standard_collation_tailoring(),
            "hy::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " hy::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, ja_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::ja::standard_collation_tailoring(),
            "ja::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " ja::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, ja_unihan_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::ja::unihan_collation_tailoring(),
            "ja::unihan_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " ja::unihan_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, ka_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::ka::standard_collation_tailoring(),
            "ka::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " ka::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, kk_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::kk::standard_collation_tailoring(),
            "kk::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " kk::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, km_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::km::standard_collation_tailoring(),
            "km::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " km::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, kn_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::kn::standard_collation_tailoring(),
            "kn::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " kn::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, kn_traditional_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::kn::traditional_collation_tailoring(),
            "kn::traditional_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " kn::traditional_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, ko_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, 
    }};
    auto const ko_tailoring_str =
        text::data::ko::standard_collation_tailoring();
    text::collation_table const table = text::tailored_collation_table(
        ko_tailoring_str, "ko::standard_collation_tailoring()", error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " ko::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, ko_unihan_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::ko::unihan_collation_tailoring(),
            "ko::unihan_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " ko::unihan_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, kok_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::kok::standard_collation_tailoring(),
            "kok::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " kok::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, ky_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::ky::standard_collation_tailoring(),
            "ky::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " ky::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, lo_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::lo::standard_collation_tailoring(),
            "lo::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " lo::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, mk_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::mk::standard_collation_tailoring(),
            "mk::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " mk::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, ml_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Arab */ 0x621, 0x77a, 0x77b, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::ml::standard_collation_tailoring(),
            "ml::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " ml::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, mn_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::mn::standard_collation_tailoring(),
            "mn::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " mn::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, mr_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::mr::standard_collation_tailoring(),
            "mr::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " mr::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, my_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::my::standard_collation_tailoring(),
            "my::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " my::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, ne_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::ne::standard_collation_tailoring(),
            "ne::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " ne::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, or__standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::or_::standard_collation_tailoring(),
            "or_::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " or_::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, pa_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Arab */ 0x621, 0x77a, 0x77b, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::pa::standard_collation_tailoring(),
            "pa::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " pa::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, ps_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Arab */ 0x621, 0x77a, 0x77b, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::ps::standard_collation_tailoring(),
            "ps::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " ps::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, ru_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::ru::standard_collation_tailoring(),
            "ru::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " ru::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, si_dictionary_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::si::dictionary_collation_tailoring(),
            "si::dictionary_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " si::dictionary_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, si_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::si::standard_collation_tailoring(),
            "si::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " si::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, sr_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::sr::standard_collation_tailoring(),
            "sr::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " sr::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, sr_Latn_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::sr_Latn::standard_collation_tailoring(),
            "sr_Latn::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " sr_Latn::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, ta_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::ta::standard_collation_tailoring(),
            "ta::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " ta::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, te_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::te::standard_collation_tailoring(),
            "te::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " te::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, th_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::th::standard_collation_tailoring(),
            "th::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " th::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, ug_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Arab */ 0x621, 0x77a, 0x77b, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::ug::standard_collation_tailoring(),
            "ug::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " ug::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, uk_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::uk::standard_collation_tailoring(),
            "uk::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " uk::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, ur_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Arab */ 0x621, 0x77a, 0x77b, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::ur::standard_collation_tailoring(),
            "ur::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " ur::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}

TEST(tailoring, yi_standard_reorders)
{
    constexpr std::array<uint32_t, 116> cps = {{
        /* Hebr */ 0x5d0, 0x2135, 0xfb28, 0xfb4a, /* Latn */ 0x61, 0xff41, 0x2ac, 0x2ad, /* Grek */ 0x3b1, 0x1d6c2, 0x3f8, 0x3f7, /* Cyrl */ 0x430, 0x2df6, 0x4cf, 0x4c0, /* Geor */ 0x10d0, 0x2d00, 0x10fe, 0x10ff, /* Armn */ 0x561, 0x531, 0x556, 0x559, /* Arab */ 0x621, 0x77a, 0x77b, /* Ethi */ 0x1200, 0x1201, 0x2ddd, 0x2dde, /* Deva */ 0x950, 0xa8fd, 0x94c, 0x94d, /* Beng */ 0x980, 0x985, 0x9d7, 0x9fc, /* Guru */ 0xa74, 0xa73, 0xa4b, 0xa4c, /* Gujr */ 0xad0, 0xa85, 0xacc, 0xacd, /* Orya */ 0xb05, 0xb06, 0xb56, 0xb57, /* Taml */ 0xbd0, 0xb85, 0xbcd, 0xbd7, /* Telu */ 0xc05, 0xc06, 0xc55, 0xc56, /* Knda */ 0xc85, 0xc86, 0xcd5, 0xcd6, /* Mlym */ 0xd05, 0xd06, 0xd3b, 0xd3c, /* Sinh */ 0xd85, 0xd86, 0xdde, 0xdca, /* Thai */ 0xe01, 0xe02, 0xe43, 0xe44, /* Laoo */ 0xede, 0xe81, 0xec3, 0xec4, /* Mymr */ 0x1000, 0x1075, 0xaa75, 0xaa76, /* Khmr */ 0x1780, 0x1781, 0x17c5, 0x17d2, /* Mong */ 0x1880, 0x1881, 0x18aa, 0x18a9, /* Cher */ 0xab70, 0x13a0, 0x13fd, 0x13f5, /* Hang */ 0x1100, 0x3131, 0xd7a3, 0xd7fa, 0xd7fb, /* Kana */ 0x3041, 0x3042, 0x1b11d, 0x1b11e, /* Bopo */ 0x3105, 0x31a0, 0x3129, 0x312d, /* Hani */ 0x2f00, 0x3280, 0x2f88f, 0x2fa1d, /* implicit */ 0x2a700, 0x2b740, 0x2b820, 0x2ebe0, 
    }};
    text::collation_table const table =
        text::tailored_collation_table(
            text::data::yi::standard_collation_tailoring(),
            "yi::standard_collation_tailoring()",
            error, warning);

    for (int i = 0, end = (int)cps.size() - 1; i != end; ++i) {
        EXPECT_LE(
            text::collate(
                cps.begin() + i,
                cps.begin() + i + 1,
                cps.begin() + i + 1,
                cps.begin() + i + 2,
                table,
                text::collation_strength::primary,
                text::case_first::off,
                text::case_level::off,
                text::variable_weighting::non_ignorable),
            0)
            << "CASE " << i << " yi::standard_collation_tailoring() "
            << std::hex << "0x" << cps[i] << " 0x" << cps[i + 1] << std::dec;
    }
}


